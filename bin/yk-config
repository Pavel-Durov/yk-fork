#!/bin/sh

set -e

# The parent directory of this script. Under some obscure circumstances $0 may
# not be accurate, so we do some quick and dirty sanity checking.
DIR=`dirname $0`
if [ ! -d "${DIR}/../ykrt" ]; then
    1>&2 echo "error: couldn't find parent directory of yk-config"
    exit 1
fi

OUTPUT=""

usage() {
    echo "Generate C compiler flags for building against the yk JIT.\n"
    echo "Usage:"
    echo "    yk-config <profile> \\"
    echo "        <--cc|--cxx|--ar|--ranlib|--cppflags|--cflags|--ldflags>\n"
    echo "    Where <profile> is a Rust cargo profile starting with either 'debug' or 'release'.\n"
    echo "    --cc, --cxx, --ar, --ranlib, --cppflags, --cflags and --ldflags specify "
    echo "    what flags to output.\n\n"
}

handle_arg() {
    profile=$1
    shift

    if [ "x${YKB_YKLLVM_BIN_DIR}" != "x" ]; then
        ykllvm_bin_dir=`realpath ${YKB_YKLLVM_BIN_DIR}`
    else
        # The way this path is calculated must match that in ykbuild/build.rs.
        ykllvm_bin_dir=`realpath ${DIR}/../target/${profile}/ykllvm/bin/`
    fi

    case $1 in
        --cc) OUTPUT="${ykllvm_bin_dir}/clang" ;;
        --cxx) OUTPUT="${ykllvm_bin_dir}/clang++" ;;
        --ar) OUTPUT="${ykllvm_bin_dir}/llvm-ar" ;;
        --ranlib) OUTPUT="${ykllvm_bin_dir}/llvm-ranlib" ;;
        --cflags)
            # Enable LTO.
            OUTPUT="${OUTPUT} -flto"
            # Outline functions containing loops during AOT compilation. Needed
            # for `yk_unroll_safe`.
            OUTPUT="${OUTPUT} -fyk-noinline-funcs-with-loops"
            # Don't optimise functions by changing their calling convention.
            OUTPUT="${OUTPUT} -mllvm -yk-dont-opt-func-abi"
            # Ensure any jump threading pass that may run at pre-link time
            # doesn't interfere with control points that will be added at
            # link-time (the functionalities are guarded by the same flag).
            OUTPUT="${OUTPUT} -mllvm -yk-patch-control-point"
            ;;
        --cppflags)
            # Path to yk.h
            OUTPUT="${OUTPUT} -I${DIR}/../ykcapi"
            ;;
        --ldflags)
            # Use lld.
            OUTPUT="${OUTPUT} -fuse-ld=lld"
            # Embed Yk's IR.
            OUTPUT="${OUTPUT} -Wl,-mllvm=--yk-embed-ir"
            # Add pthread_create wrapper function (__wrap_pthread_create)
            OUTPUT="${OUTPUT} -Wl,--wrap=pthread_create"
            # Add wrapper for `pthread_exit`.
            OUTPUT="${OUTPUT} -Wl,--wrap=pthread_exit"

            # Interferes with the JIT's inlining stack.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-disable-tail-call-codegen"

            # Ensure control point is patched.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-patch-control-point"

            # Patch in idempotent function return value recorders.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-patch-idempotent"

            # Emit stackmaps used for JIT deoptimisation.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-insert-stackmaps"

            # Split blocks after function calls.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-split-blocks-after-calls"

            # Ensure we can unambiguously map back to LLVM IR blocks.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-block-disambiguate"

            # Ensure calls never appear in the entry block of a function.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-no-calls-in-entryblocks"

            # Enable fix for spill reloads before stackmaps.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-stackmap-spillreloads-fix"
            # Enable shadow stacks.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-shadow-stack"
            # Encode additional locations in stackmaps.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-stackmap-add-locs"
            # Don't optimise functions by changing their calling convention.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-dont-opt-func-abi"

            # Tracer-specific flags.
            if [ "${YKB_TRACER}" = "hwt" ]; then
                # HWT-specific flags.
                #
                # Emit a basicblock map section. Used by the HWT mapper.
                OUTPUT="${OUTPUT} -Wl,--lto-basic-block-sections=labels"
                # Use the yk extensions to the blockmap section.
                OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-extended-llvmbbaddrmap-section"
                # Fallthrough optimisations distort block mapping.
                OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-no-fallthrough"
            else
                # SWT-specific flags.
                OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-basicblock-tracer"
                # Make optimised clones of functions.
                OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-module-clone"
            fi

            # Disable backend optimisations that Yk can't handle by adding the
            # `optnone` attribute onto every traceable function after
            # high-level IR optimisations have finished.
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-mark-traceable-optnone-after-ir-passes"

            # Apply `yk_outline` to functions that can never be traced so that
            # we don't pay the cost for unnecessary instrumentation (e.g.
            # stackmaps, swt recording, ...).
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-outline-untraceable"

            # Ensure all symbols are exported so that the JIT can use them.
            # FIXME: https://github.com/ykjit/yk/issues/381
            # Find a better way of handling unexported globals inside a trace.
            OUTPUT="${OUTPUT} -Wl,--export-dynamic"
            OUTPUT="${OUTPUT} -Wl,--mllvm=--yk-linkage"

            # Linkage to yk as a library.
            OUTPUT="${OUTPUT} -L${DIR}/../target/${profile}/deps"

            # Encode an rpath so that we don't have to set LD_LIBRARY_PATH.
            #
            # FIXME: Adding rpaths should probably be behind a flag. It's kind
            # of rude to add local rpaths to interpreter binaries that
            # downstreams may want to distribute.
            OUTPUT="${OUTPUT} -Wl,-rpath=${DIR}/../target/${profile}/deps"
            OUTPUT="${OUTPUT} -Wl,-rpath=$(${ykllvm_bin_dir}/llvm-config --link-shared --libdir)"
            # Add a proper RPATH, not a RUNPATH:
            # https://bugs.launchpad.net/ubuntu/+source/glibc/+bug/1737608
            OUTPUT="${OUTPUT} -Wl,--disable-new-dtags"

            # Improve the quality of profiling data.
            OUTPUT="${OUTPUT} -Wl,--no-rosegment"
            ;;
        --libs)
            OUTPUT="${OUTPUT} -lykcapi"
            ;;
        *)
            1>&2 echo "unknown flag: $1\n"
            usage
            exit 1
            ;;
    esac
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

case $1 in
    debug*|release*);;
    *) 1>&2 echo "Profile '$1' does not start with 'debug' or 'release'.\n"
       usage
       exit 1
       ;;
esac
profile=$1
shift

while [ $# -ne 0 ]; do
    if [ -z "$2" ] || [ "$(echo $2 | cut -b 1,2)" = "--" ]; then
        handle_arg $profile $1
        shift
    else
        handle_arg $profile $1 $2
        shift
        shift
    fi
done

echo ${OUTPUT}
