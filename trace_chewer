#! /usr/bin/env python3

# trace_chewer processes output from YKD_PRINT_IR in various ways:
#   * `simplify` turns the output into a straight-line trace with guards
#
# Note that trace_chewer makes many, many assumptions about YKD_PRINT_IR's
# output. Any changes in that are likely to lead to this script producing
# incorrect output.

import getopt, os, sys

def file_name_to_object(n):
    if n == "-": return sys.stdin
    return open(n, "r")

def simplify():
    try: opts, args = getopt.getopt(sys.argv[2:], "")
    except getopt.GetoptError as e: usage(e)
    if len(args) != 1: usage()

    traces = []
    pre_opt = None
    with file_name_to_object(args[0]) as f:
        while True:
            for l in f:
                if l.rstrip().startswith("--- Begin jit-"):
                    if "pre-opt" in l:
                        assert(pre_opt is None or pre_opt == True)
                        pre_opt = True
                    elif "post-opt" in l:
                        assert(pre_opt is None or pre_opt == False)
                        pre_opt = False
                    else: error("Unknown optimisation phase")
                    break
            else: break
            trace = []
            for l in f:
                l = l.rstrip()
                if l.startswith("--- End jit-"): break
                trace.append(l)
            traces.append(trace)

    for t_i, t in enumerate(traces):
        # Delete rubbish at end of trace
        while len(t) > 0:
            if t[-1] == "}": break
            del t[-1]
        # Delete rubbish at beginning of trace
        i = 0
        while i < len(t):
            if t[i].startswith("entry:"): break
            i += 1
        del t[0:i]

        i = 0
        while i < len(t):
            if t[i].startswith("  br i1"):
                # Turn branches into guards
                var = t[i].split(" ")[4][:-1]
                assert("guardsuccess" in t[i] and "guardfail" in t[i])
                if t[i].index("guardsuccess") < t[i].index("guardfail"):
                    t[i] = f"  guard_true({var})"
                else:
                    t[i] = f"  guard_false({var})"
                assert(t[i + 1] == "")
                del t[i+1]
                i += 1
            elif t[i].startswith("guardfail"):
                # Delete guard failure blocks
                j = i + 1
                while j < len(t) and t[j].startswith("  "): j += 1
                del t[i:j+1]
            elif t[i].startswith("guardsuccess"): del t[i]
            else: i += 1

        if pre_opt: phase = "pre-opt"
        else: phase = "post-opt"
        print(f"--- Begin simplified {phase} trace {t_i + 1} ---")
        print("\n".join(t))
        print(f"--- End simplified {phase} trace {t_i + 1} ---")

def error(msg):
    sys.stderr.write(msg)
    sys.exit(1)

def usage(msg=None):
    if msg: sys.stderr.write(f"{msg}\n")
    prog = os.path.basename(sys.argv[0])
    sys.stderr.write(f"Usage:\n  {prog} simplify <trace-file|->\n")
    sys.exit(1)

if len(sys.argv) <= 2: usage()
match sys.argv[1]:
    case "simplify": simplify()
    case _: usage()
