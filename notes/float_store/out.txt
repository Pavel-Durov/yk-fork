running 1 tests********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-64]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-80]
  fi#4: size=8, align=8, at location [SP-72]
  fi#5: size=8, align=8, at location [SP-104]
  fi#6: size=8, align=8, at location [SP-120]
  fi#7: size=8, align=8, at location [SP-96]
  fi#8: size=8, align=8, at location [SP-112]
Constant Pool:
  cp#0: 0x3FF3AE1480000000, align=4
  cp#1: 1.230000e+00, align=8
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 72, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $r12 = MOV64rr $rsi
  $r14d = MOV32rr $edi
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 80, implicit-def dead $eflags
  renamable $rdx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_head, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rdx, 1, $noreg, 0, $fs, renamable $rax :: (store (s64) into @shadowstack_head)
  renamable $rdx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rdx, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $rbx = MOV64rr $rax
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 8, implicit-def dead $eflags
  $r15 = MOV64rr $rax
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 16, implicit-def dead $eflags
  $rdx = MOV64rr $rax
  renamable $rdx = ADD64ri32 killed renamable $rdx(tied-def 0), 20, implicit-def dead $eflags
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 24, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $rcx :: (store (s64) into %stack.2)
  $r13 = MOV64rr $rax
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 32, implicit-def dead $eflags
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $rcx :: (store (s64) into %stack.3)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 48, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rcx :: (store (s64) into %stack.4)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 56, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -96, $noreg, killed renamable $rcx :: (store (s64) into %stack.5)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 64, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -112, $noreg, killed renamable $rcx :: (store (s64) into %stack.6)
  MOV32mi renamable $rax, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)
  MOV32mr killed renamable $rax, 1, $noreg, 4, $noreg, killed renamable $r14d :: (store (s32) into %ir.6)
  JMP_1 %bb.1, debug-location !28; c/float_store.c:63:14

bb.1 (%ir-block.18, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $rdx, $r12, $r13, $r15
  MOV64mr $rbp, 1, $noreg, -104, $noreg, killed renamable $rdx :: (store (s64) into %stack.8)
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !28; c/float_store.c:63:14 line no:63
  MOV64mr killed renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $r12 :: (store (s64) into %ir.7)
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !31; c/float_store.c:63:27 line no:63
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !38; c/float_store.c:64:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !38; c/float_store.c:64:14
  $rbx = MOV64rr $rax, debug-location !38; c/float_store.c:64:14
  JMP_1 %bb.2, debug-location !37; c/float_store.c:64:9

bb.2 (%ir-block.20, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !37; c/float_store.c:64:9
  $esi = MOV32ri 2, debug-location !37; c/float_store.c:64:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !37; c/float_store.c:64:9
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rbx, debug-location !37 :: (store (s64) into %ir.8); c/float_store.c:64:9
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg, debug-location !39 :: (load (s64) from %ir.8); c/float_store.c:65:27
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !40; c/float_store.c:65:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !40; c/float_store.c:65:3
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -96, $noreg :: (load (s64) from %stack.5)
  JMP_1 %bb.3, debug-location !41; c/float_store.c:66:14

bb.3 (%ir-block.22, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r12, $r13, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !42; c/float_store.c:66:20
  $esi = MOV32ri 3, debug-location !42; c/float_store.c:66:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !42; c/float_store.c:66:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !42; c/float_store.c:66:20
  $rbx = MOV64rr $rax, debug-location !42; c/float_store.c:66:20
  renamable $r14 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.4, debug-location !42; c/float_store.c:66:20

bb.4 (%ir-block.24, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !42; c/float_store.c:66:20
  $esi = MOV32ri 4, debug-location !42; c/float_store.c:66:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !42; c/float_store.c:66:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !42 :: (store (s64) into %ir.25); c/float_store.c:66:20
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  MOV32mi renamable $r15, 1, $noreg, 0, $noreg, 4, debug-location !52 :: (store (s32) into %ir.10); c/float_store.c:68:7
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -104, $noreg :: (load (s64) from %stack.8)
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $rcx, 0, !"f2", !DIExpression(), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !57 :: (store (s64) into %ir.12); c/float_store.c:70:10
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !59 :: (store (s64) into %ir.13); c/float_store.c:71:10
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r14, 0, !"d1", !DIExpression(), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $rax, 0, !"d2", !DIExpression(), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  MOV64mr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $r14, debug-location !64 :: (store (s64) into %ir.15); c/float_store.c:73:11
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  dead renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !65 :: (load (s64) from %ir.9); c/float_store.c:74:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !66, debug-location !65; c/float_store.c:74:3
  JMP_1 %bb.5, debug-location !67; c/float_store.c:75:3

bb.5 (%ir-block.27, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $r12, $r13, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !67; c/float_store.c:75:3
  $esi = MOV32ri 5, debug-location !67; c/float_store.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !67; c/float_store.c:75:3
  dead renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !67 :: (load (s32) from %ir.10); c/float_store.c:75:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !68, debug-location !67; c/float_store.c:75:3
  $rbx = MOV64rr killed $r12
  JMP_1 %bb.6, debug-location !69; c/float_store.c:76:3

bb.6 (%ir-block.29, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !69; c/float_store.c:76:3
  $esi = MOV32ri 6, debug-location !69; c/float_store.c:76:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !69; c/float_store.c:76:3
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -104, $noreg :: (load (s64) from %stack.8)
  dead renamable $xmm0 = MOVSSrm_alt renamable $r12, 1, $noreg, 0, $noreg, debug-location !69 :: (load (s32) from %ir.11); c/float_store.c:76:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r12, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r12, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !70, debug-location !69; c/float_store.c:76:3
  renamable $r14 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  JMP_1 %bb.7, debug-location !71; c/float_store.c:77:3

bb.7 (%ir-block.31, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !71; c/float_store.c:77:3
  $esi = MOV32ri 7, debug-location !71; c/float_store.c:77:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/float_store.c:77:3
  dead renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !71 :: (load (s64) from %ir.12); c/float_store.c:77:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !72, debug-location !71; c/float_store.c:77:3
  JMP_1 %bb.8, debug-location !73; c/float_store.c:78:3

bb.8 (%ir-block.33, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !73; c/float_store.c:78:3
  $esi = MOV32ri 8, debug-location !73; c/float_store.c:78:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/float_store.c:78:3
  dead renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !73 :: (load (s64) from %ir.13); c/float_store.c:78:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !74, debug-location !73; c/float_store.c:78:3
  JMP_1 %bb.9, debug-location !75; c/float_store.c:79:3

bb.9 (%ir-block.35, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !75; c/float_store.c:79:3
  $esi = MOV32ri 9, debug-location !75; c/float_store.c:79:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/float_store.c:79:3
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.3)
  dead renamable $xmm0 = MOVSDrm_alt renamable $rax, 1, $noreg, 0, $noreg, debug-location !75 :: (load (s64) from %ir.14); c/float_store.c:79:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], killed renamable $rax, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rax, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !76, debug-location !75; c/float_store.c:79:3
  JMP_1 %bb.10, debug-location !77; c/float_store.c:80:3

bb.10 (%ir-block.37, bb_id 10):
; predecessors: %bb.9
  successors: %bb.11
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !77; c/float_store.c:80:3
  $esi = MOV32ri 10, debug-location !77; c/float_store.c:80:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !77; c/float_store.c:80:3
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.4)
  dead renamable $rax = MOV64rm renamable $rcx, 1, $noreg, 0, $noreg, debug-location !77 :: (load (s64) from %ir.15); c/float_store.c:80:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], killed renamable $rcx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rcx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !78, debug-location !77; c/float_store.c:80:3
  JMP_1 %bb.11, debug-location !79; c/float_store.c:81:3

bb.11 (%ir-block.39, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !79; c/float_store.c:81:3
  $esi = MOV32ri 11, debug-location !79; c/float_store.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !79; c/float_store.c:81:3
  JMP_1 %bb.12, debug-location !79; c/float_store.c:81:3

bb.12 (%ir-block.40, bb_id 12):
; predecessors: %bb.11, %bb.19
  successors: %bb.13, %bb.20
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !80; c/float_store.c:81:10
  $esi = MOV32ri 12, debug-location !80; c/float_store.c:81:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !80; c/float_store.c:81:10
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !81 :: (load (s32) from %ir.10); c/float_store.c:81:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !81; c/float_store.c:81:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.4)
  renamable $rdx = MOV64rm $rbp, 1, $noreg, -112, $noreg :: (load (s64) from %stack.6)
  renamable $rsi = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.3)
  STACKMAP 2, 0, 0, $rbp, -56, 3, 0, $rbp, -48, 3, renamable $r15, 3, renamable $r12, 3, killed renamable $r14, 3, renamable $r13, 3, renamable $rsi, 3, renamable $rcx, 3, killed renamable $rbx, 3, renamable $rdx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !79 :: (load (s64) from %stack.0), (load (s64) from %stack.1); c/float_store.c:81:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !79; c/float_store.c:81:3
  JCC_1 %bb.13, 5, implicit killed $eflags, debug-location !79; c/float_store.c:81:3
  JMP_1 %bb.20, debug-location !79; c/float_store.c:81:3

bb.13 (%ir-block.43, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rcx, $rdx, $rsi, $r12, $r13, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !82; c/float_store.c:82:25
  $rbx = MOV64rr killed $rsi
  $esi = MOV32ri 13, debug-location !82; c/float_store.c:82:25
  $r14 = MOV64rr killed $rcx
  MOV64mr $rbp, 1, $noreg, -88, $noreg, killed renamable $r13 :: (store (s64) into %stack.7)
  DBG_VALUE $rbp, 0, !"f3", !DIExpression(DW_OP_constu, 88, DW_OP_minus, DW_OP_deref), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  $r13 = MOV64rr killed $rdx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/float_store.c:82:25
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg, debug-location !82 :: (load (s64) from %ir.8); c/float_store.c:82:25
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !84; c/float_store.c:82:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !84; c/float_store.c:82:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -56, 3, 0, $rbp, -48, 3, renamable $r15, 3, renamable $r12, 3, 1, 8, $rbp, -80, 3, 1, 8, $rbp, -88, 3, killed renamable $rbx, 3, killed renamable $r14, 3, 1, 8, $rbp, -96, 3, killed renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r12, $r15, $r12b, $r15b, $r12bh, $r15bh, $r12d, $r15d, $r12w, $r15w, $r12wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !84 :: (load (s64) from %stack.0), (load (s64) from %stack.1), (load (s64) from %stack.5), (load (s64) from %stack.7), (load (s64) from %stack.2); c/float_store.c:82:5
  renamable $r14 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -88, $noreg :: (load (s64) from %stack.7)
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !59; c/float_store.c:71:10 line no:71 indirect
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -96, $noreg :: (load (s64) from %stack.5)
  JMP_1 %bb.14, debug-location !85; c/float_store.c:83:11

bb.14 (%ir-block.45, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !86; c/float_store.c:83:15
  $esi = MOV32ri 14, debug-location !86; c/float_store.c:83:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/float_store.c:83:15
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !85; c/float_store.c:83:11 line no:83 indirect
  renamable $xmm0 = CVTSI2SSrm renamable $r15, 1, $noreg, 0, $noreg, implicit $mxcsr, debug-location !86 :: (load (s32) from %ir.10); c/float_store.c:83:15
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg, debug-location !88; c/float_store.c:83:17
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr, debug-location !88; c/float_store.c:83:17
  MOVSSmr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $xmm0, debug-location !85 :: (store (s32) into %ir.16); c/float_store.c:83:11
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !89 :: (load (s64) from @stderr); c/float_store.c:84:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !90 :: (load (s32) from %ir.10); c/float_store.c:84:35
  renamable $xmm0 = MOVSSrm_alt renamable $rbx, 1, $noreg, 0, $noreg, debug-location !91 :: (load (s32) from %ir.16); c/float_store.c:84:38
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr, debug-location !91; c/float_store.c:84:38
  renamable $rsi = MOV64ri @.str, debug-location !92; c/float_store.c:84:5
  $al = MOV8ri 1, debug-location !92; c/float_store.c:84:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !92; c/float_store.c:84:5
  JMP_1 %bb.15, debug-location !93; c/float_store.c:85:11

bb.15 (%ir-block.54, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !85; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !93; c/float_store.c:85:11
  $esi = MOV32ri 15, debug-location !93; c/float_store.c:85:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !93; c/float_store.c:85:11
  renamable $xmm0 = MOVSSrm_alt renamable $rbx, 1, $noreg, 0, $noreg, debug-location !93 :: (load (s32) from %ir.16); c/float_store.c:85:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !94 :: (load (s64) from %ir.12); c/float_store.c:85:6
  MOVSSmr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $xmm0, debug-location !95 :: (store (s32) into %ir.56); c/float_store.c:85:9
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !96 :: (load (s64) from @stderr); c/float_store.c:86:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !97 :: (load (s32) from %ir.10); c/float_store.c:86:35
  renamable $xmm0 = MOVSSrm_alt renamable $r12, 1, $noreg, 0, $noreg, debug-location !98 :: (load (s32) from %ir.11); c/float_store.c:86:38
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr, debug-location !98; c/float_store.c:86:38
  renamable $rsi = MOV64ri @.str, debug-location !99; c/float_store.c:86:5
  $al = MOV8ri 1, debug-location !99; c/float_store.c:86:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !99; c/float_store.c:86:5
  JMP_1 %bb.16, debug-location !100; c/float_store.c:87:13

bb.16 (%ir-block.62, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !85; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !100; c/float_store.c:87:13
  $esi = MOV32ri 16, debug-location !100; c/float_store.c:87:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/float_store.c:87:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !100 :: (load (s64) from @stderr); c/float_store.c:87:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !101 :: (load (s32) from %ir.10); c/float_store.c:87:35
  renamable $rax = MOV64rm killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !102 :: (load (s64) from %ir.13); c/float_store.c:87:39
  renamable $xmm0 = MOVSSrm_alt killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !103 :: (load (s32) from %ir.65); c/float_store.c:87:38
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr, debug-location !103; c/float_store.c:87:38
  renamable $rsi = MOV64ri @.str, debug-location !104; c/float_store.c:87:5
  $al = MOV8ri 1, debug-location !104; c/float_store.c:87:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !104; c/float_store.c:87:5
  JMP_1 %bb.17, debug-location !105; c/float_store.c:89:12

bb.17 (%ir-block.69, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !85; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !106; c/float_store.c:89:16
  $esi = MOV32ri 17, debug-location !106; c/float_store.c:89:16
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !106; c/float_store.c:89:16
  DBG_VALUE $rbp, 0, !"d", !DIExpression(DW_OP_constu, 112, DW_OP_minus, DW_OP_deref), debug-location !105; c/float_store.c:89:12 line no:89 indirect
  renamable $xmm0 = CVTSI2SDrm renamable $r15, 1, $noreg, 0, $noreg, debug-location !106 :: (load (s32) from %ir.10); c/float_store.c:89:16
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg, debug-location !108; c/float_store.c:89:18
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr, debug-location !108; c/float_store.c:89:18
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -112, $noreg :: (load (s64) from %stack.6)
  MOVSDmr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $xmm0, debug-location !105 :: (store (s64) into %ir.17); c/float_store.c:89:12
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !109 :: (load (s64) from @stderr); c/float_store.c:90:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !110 :: (load (s32) from %ir.10); c/float_store.c:90:35
  renamable $xmm0 = MOVSSrm_alt renamable $rbx, 1, $noreg, 0, $noreg, debug-location !111 :: (load (s32) from %ir.16); c/float_store.c:90:38
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr, debug-location !111; c/float_store.c:90:38
  renamable $rsi = MOV64ri @.str, debug-location !112; c/float_store.c:90:5
  $al = MOV8ri 1, debug-location !112; c/float_store.c:90:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !112; c/float_store.c:90:5
  JMP_1 %bb.18, debug-location !113; c/float_store.c:91:11

bb.18 (%ir-block.78, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d", !DIExpression(DW_OP_constu, 112, DW_OP_minus, DW_OP_deref), debug-location !105; c/float_store.c:89:12 line no:89 indirect
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !85; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !113; c/float_store.c:91:11
  $esi = MOV32ri 18, debug-location !113; c/float_store.c:91:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !113; c/float_store.c:91:11
  renamable $xmm0 = MOVSDrm_alt killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !113 :: (load (s64) from %ir.17); c/float_store.c:91:11
  renamable $rax = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.4)
  renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !114 :: (load (s64) from %ir.15); c/float_store.c:91:6
  MOVSDmr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $xmm0, debug-location !115 :: (store (s64) into %ir.80); c/float_store.c:91:9
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !116 :: (load (s64) from @stderr); c/float_store.c:92:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !117 :: (load (s32) from %ir.10); c/float_store.c:92:35
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.3)
  renamable $xmm0 = MOVSDrm_alt killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !118 :: (load (s64) from %ir.14); c/float_store.c:92:38
  renamable $rsi = MOV64ri @.str, debug-location !119; c/float_store.c:92:5
  $al = MOV8ri 1, debug-location !119; c/float_store.c:92:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !119; c/float_store.c:92:5
  JMP_1 %bb.19, debug-location !120; c/float_store.c:93:6

bb.19 (%ir-block.85, bb_id 19):
; predecessors: %bb.18
  successors: %bb.12
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $rbp, 0, !"d", !DIExpression(DW_OP_constu, 112, DW_OP_minus, DW_OP_deref), debug-location !105; c/float_store.c:89:12 line no:89 indirect
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !85; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !120; c/float_store.c:93:6
  $esi = MOV32ri 19, debug-location !120; c/float_store.c:93:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !120; c/float_store.c:93:6
  renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !120 :: (load (s32) from %ir.10); c/float_store.c:93:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !120; c/float_store.c:93:6
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !120 :: (store (s32) into %ir.10); c/float_store.c:93:6
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -88, $noreg :: (load (s64) from %stack.7)
  JMP_1 %bb.12, debug-location !79; c/float_store.c:81:3

bb.20 (%ir-block.88, bb_id 20):
; predecessors: %bb.12
  successors: %bb.21

  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !124; c/float_store.c:95:3
  $esi = MOV32ri 20, debug-location !124; c/float_store.c:95:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !124; c/float_store.c:95:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !124 :: (load (s64) from %ir.89); c/float_store.c:95:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !124; c/float_store.c:95:3
  JMP_1 %bb.21, debug-location !125; c/float_store.c:96:18

bb.21 (%ir-block.91, bb_id 21):
; predecessors: %bb.20
  successors: %bb.22

  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !125; c/float_store.c:96:18
  $esi = MOV32ri 21, debug-location !125; c/float_store.c:96:18
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !125; c/float_store.c:96:18
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg, debug-location !125 :: (load (s64) from %ir.8); c/float_store.c:96:18
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !126; c/float_store.c:96:3
  JMP_1 %bb.22, debug-location !127; c/float_store.c:97:3

bb.22 (%ir-block.93, bb_id 22):
; predecessors: %bb.21
  successors: %bb.24

  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !127; c/float_store.c:97:3
  $esi = MOV32ri 22, debug-location !127; c/float_store.c:97:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !127; c/float_store.c:97:3
  JMP_1 %bb.24, debug-location !127; c/float_store.c:97:3

bb.23 (%ir-block.94, bb_id 23):
; predecessors: %bb.24

  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !127; c/float_store.c:97:3
  $esi = MOV32ri 23, debug-location !127; c/float_store.c:97:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !127; c/float_store.c:97:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !127; c/float_store.c:97:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 72, implicit-def dead $eflags, debug-location !127; c/float_store.c:97:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !127; c/float_store.c:97:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !127; c/float_store.c:97:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !127; c/float_store.c:97:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !127; c/float_store.c:97:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !127; c/float_store.c:97:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !127; c/float_store.c:97:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !127; c/float_store.c:97:3
  RET64 implicit $eax, debug-location !127; c/float_store.c:97:3

bb.24 (%ir-block.95, bb_id 24):
; predecessors: %bb.22
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !127; c/float_store.c:97:3
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !61; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !64; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"f1", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !54; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !57; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !52; c/float_store.c:68:7 line no:68 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !127; c/float_store.c:97:3
  $esi = MOV32ri 24, debug-location !127; c/float_store.c:97:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !127; c/float_store.c:97:3
  JMP_1 %bb.23, debug-location !127; c/float_store.c:97:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-112]
  fi#3: size=8, align=8, at location [SP-88]
  fi#4: size=8, align=8, at location [SP-64]
  fi#5: size=8, align=8, at location [SP-80]
  fi#6: size=8, align=8, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-104]
Constant Pool:
  cp#0: 0x3FF3AE1480000000, align=4
  cp#1: 1.230000e+00, align=8
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 72, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14d = MOV32rr $edi
  $edi = MOV32ri 9
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $r13 = MOV64rr $rax
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 8, implicit-def dead $eflags
  $r15 = MOV64rr $rax
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 16, implicit-def dead $eflags
  $r12 = MOV64rr $rax
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 20, implicit-def dead $eflags
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 24, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -104, $noreg, killed renamable $rcx :: (store (s64) into %stack.2)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $rcx :: (store (s64) into %stack.3)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rcx :: (store (s64) into %stack.4)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 48, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $rcx :: (store (s64) into %stack.5)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 56, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -88, $noreg, killed renamable $rcx :: (store (s64) into %stack.6)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 64, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -96, $noreg, killed renamable $rcx :: (store (s64) into %stack.7)
  MOV32mi renamable $rax, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)
  MOV32mr killed renamable $rax, 1, $noreg, 4, $noreg, killed renamable $r14d :: (store (s32) into %ir.5)
  JMP_1 %bb.1, debug-location !129; c/float_store.c:63:14

bb.1 (%ir-block.17, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r12, $r13, $r15
  $edi = MOV32ri 9
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !129; c/float_store.c:63:14 line no:63
  MOV64mr killed renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.6)
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !132; c/float_store.c:63:27 line no:63
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !135; c/float_store.c:64:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !135; c/float_store.c:64:14
  $rbx = MOV64rr $rax, debug-location !135; c/float_store.c:64:14
  JMP_1 %bb.2, debug-location !134; c/float_store.c:64:9

bb.2 (%ir-block.19, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r15
  $edi = MOV32ri 9, debug-location !134; c/float_store.c:64:9
  $esi = MOV32ri 2, debug-location !134; c/float_store.c:64:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !134; c/float_store.c:64:9
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $rbx, debug-location !134 :: (store (s64) into %ir.7); c/float_store.c:64:9
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -64, $noreg, debug-location !136 :: (load (s64) from %ir.7); c/float_store.c:65:27
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !137; c/float_store.c:65:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !137; c/float_store.c:65:3
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.3)
  renamable $r14 = MOV64rm $rbp, 1, $noreg, -88, $noreg :: (load (s64) from %stack.6)
  JMP_1 %bb.3, debug-location !138; c/float_store.c:66:14

bb.3 (%ir-block.21, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r12, $r13, $r14, $r15
  $edi = MOV32ri 9, debug-location !139; c/float_store.c:66:20
  $esi = MOV32ri 3, debug-location !139; c/float_store.c:66:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !139; c/float_store.c:66:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !139; c/float_store.c:66:20
  $rbx = MOV64rr $rax, debug-location !139; c/float_store.c:66:20
  JMP_1 %bb.4, debug-location !139; c/float_store.c:66:20

bb.4 (%ir-block.23, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 9, debug-location !139; c/float_store.c:66:20
  $esi = MOV32ri 4, debug-location !139; c/float_store.c:66:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !139; c/float_store.c:66:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !139 :: (store (s64) into %ir.24); c/float_store.c:66:20
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  MOV32mi renamable $r15, 1, $noreg, 0, $noreg, 4, debug-location !142 :: (store (s32) into %ir.9); c/float_store.c:68:7
  DBG_VALUE $rbp, 0, !"f2", !DIExpression(DW_OP_constu, 104, DW_OP_minus, DW_OP_deref), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -104, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $r12, debug-location !146 :: (store (s64) into %ir.11); c/float_store.c:70:10
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !148; c/float_store.c:71:10 line no:71 indirect
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, renamable $r12, debug-location !148 :: (store (s64) into %ir.12); c/float_store.c:71:10
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.5)
  DBG_VALUE $rax, 0, !"d2", !DIExpression(), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $rcx, 0, !"d1", !DIExpression(), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  MOV64mr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $rcx, debug-location !152 :: (store (s64) into %ir.14); c/float_store.c:73:11
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  dead renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !153 :: (load (s64) from %ir.8); c/float_store.c:74:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !66, debug-location !153; c/float_store.c:74:3
  JMP_1 %bb.5, debug-location !154; c/float_store.c:75:3

bb.5 (%ir-block.26, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !148; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !154; c/float_store.c:75:3
  $esi = MOV32ri 5, debug-location !154; c/float_store.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !154; c/float_store.c:75:3
  dead renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !154 :: (load (s32) from %ir.9); c/float_store.c:75:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !68, debug-location !154; c/float_store.c:75:3
  JMP_1 %bb.6, debug-location !155; c/float_store.c:76:3

bb.6 (%ir-block.28, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !148; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !155; c/float_store.c:76:3
  $esi = MOV32ri 6, debug-location !155; c/float_store.c:76:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !155; c/float_store.c:76:3
  dead renamable $xmm0 = MOVSSrm_alt renamable $r12, 1, $noreg, 0, $noreg, debug-location !155 :: (load (s32) from %ir.10); c/float_store.c:76:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r12, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r12, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !70, debug-location !155; c/float_store.c:76:3
  JMP_1 %bb.7, debug-location !156; c/float_store.c:77:3

bb.7 (%ir-block.30, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !148; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !156; c/float_store.c:77:3
  $esi = MOV32ri 7, debug-location !156; c/float_store.c:77:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !156; c/float_store.c:77:3
  dead renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !156 :: (load (s64) from %ir.11); c/float_store.c:77:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !72, debug-location !156; c/float_store.c:77:3
  JMP_1 %bb.8, debug-location !157; c/float_store.c:78:3

bb.8 (%ir-block.32, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !148; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !157; c/float_store.c:78:3
  $esi = MOV32ri 8, debug-location !157; c/float_store.c:78:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !157; c/float_store.c:78:3
  dead renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !157 :: (load (s64) from %ir.12); c/float_store.c:78:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !74, debug-location !157; c/float_store.c:78:3
  JMP_1 %bb.9, debug-location !158; c/float_store.c:79:3

bb.9 (%ir-block.34, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !148; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !158; c/float_store.c:79:3
  $esi = MOV32ri 9, debug-location !158; c/float_store.c:79:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !158; c/float_store.c:79:3
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  dead renamable $xmm0 = MOVSDrm_alt renamable $rax, 1, $noreg, 0, $noreg, debug-location !158 :: (load (s64) from %ir.13); c/float_store.c:79:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], killed renamable $rax, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rax, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !76, debug-location !158; c/float_store.c:79:3
  JMP_1 %bb.10, debug-location !159; c/float_store.c:80:3

bb.10 (%ir-block.36, bb_id 10):
; predecessors: %bb.9
  successors: %bb.11
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !148; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !159; c/float_store.c:80:3
  $esi = MOV32ri 10, debug-location !159; c/float_store.c:80:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !159; c/float_store.c:80:3
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.5)
  dead renamable $rax = MOV64rm renamable $rcx, 1, $noreg, 0, $noreg, debug-location !159 :: (load (s64) from %ir.14); c/float_store.c:80:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], killed renamable $rcx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rcx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !78, debug-location !159; c/float_store.c:80:3
  JMP_1 %bb.11, debug-location !160; c/float_store.c:81:3

bb.11 (%ir-block.38, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $r13, 0, !"f3", !DIExpression(), debug-location !148; c/float_store.c:71:10 line no:71 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !160; c/float_store.c:81:3
  $esi = MOV32ri 11, debug-location !160; c/float_store.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !160; c/float_store.c:81:3
  JMP_1 %bb.12, debug-location !160; c/float_store.c:81:3

bb.12 (%ir-block.39, bb_id 12):
; predecessors: %bb.11, %bb.19
  successors: %bb.13, %bb.20
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !161; c/float_store.c:81:10
  $esi = MOV32ri 12, debug-location !161; c/float_store.c:81:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !161; c/float_store.c:81:10
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !162 :: (load (s32) from %ir.9); c/float_store.c:81:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !162; c/float_store.c:81:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.5)
  renamable $rdx = MOV64rm $rbp, 1, $noreg, -96, $noreg :: (load (s64) from %stack.7)
  renamable $rsi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  STACKMAP 3, 0, 0, $rbp, -64, 3, 0, $rbp, -48, 3, renamable $r15, 3, renamable $r12, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $rsi, 3, renamable $rcx, 3, killed renamable $r14, 3, renamable $rdx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !160 :: (load (s64) from %stack.0), (load (s64) from %stack.1); c/float_store.c:81:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !160; c/float_store.c:81:3
  JCC_1 %bb.13, 5, implicit killed $eflags, debug-location !160; c/float_store.c:81:3
  JMP_1 %bb.20, debug-location !160; c/float_store.c:81:3

bb.13 (%ir-block.42, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $rcx, $rdx, $r12, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !163; c/float_store.c:82:25
  $esi = MOV32ri 13, debug-location !163; c/float_store.c:82:25
  $r14 = MOV64rr killed $rcx
  $r13 = MOV64rr killed $rdx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !163; c/float_store.c:82:25
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -64, $noreg, debug-location !163 :: (load (s64) from %ir.7); c/float_store.c:82:25
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !165; c/float_store.c:82:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !165; c/float_store.c:82:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -64, 3, 0, $rbp, -48, 3, renamable $r15, 3, renamable $r12, 3, renamable $rbx, 3, 1, 8, $rbp, -80, 3, 1, 8, $rbp, -56, 3, killed renamable $r14, 3, 1, 8, $rbp, -88, 3, killed renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bp, $bph, $bpl, $bx, $ebp, $ebx, $hbp, $hbx, $rbp, $rbx, $r12, $r15, $r12b, $r15b, $r12bh, $r15bh, $r12d, $r15d, $r12w, $r15w, $r12wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !165 :: (load (s64) from %stack.0), (load (s64) from %stack.1), (load (s64) from %stack.6), (load (s64) from %stack.3), (load (s64) from %stack.4); c/float_store.c:82:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.3)
  renamable $r14 = MOV64rm $rbp, 1, $noreg, -88, $noreg :: (load (s64) from %stack.6)
  JMP_1 %bb.14, debug-location !166; c/float_store.c:83:11

bb.14 (%ir-block.44, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !167; c/float_store.c:83:15
  $esi = MOV32ri 14, debug-location !167; c/float_store.c:83:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !167; c/float_store.c:83:15
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 88, DW_OP_minus, DW_OP_deref), debug-location !166; c/float_store.c:83:11 line no:83 indirect
  renamable $xmm0 = CVTSI2SSrm renamable $r15, 1, $noreg, 0, $noreg, implicit $mxcsr, debug-location !167 :: (load (s32) from %ir.9); c/float_store.c:83:15
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg, debug-location !169; c/float_store.c:83:17
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr, debug-location !169; c/float_store.c:83:17
  MOVSSmr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $xmm0, debug-location !166 :: (store (s32) into %ir.15); c/float_store.c:83:11
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !170 :: (load (s64) from @stderr); c/float_store.c:84:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !171 :: (load (s32) from %ir.9); c/float_store.c:84:35
  renamable $xmm0 = MOVSSrm_alt renamable $r14, 1, $noreg, 0, $noreg, debug-location !172 :: (load (s32) from %ir.15); c/float_store.c:84:38
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr, debug-location !172; c/float_store.c:84:38
  renamable $rsi = MOV64ri @.str, debug-location !173; c/float_store.c:84:5
  $al = MOV8ri 1, debug-location !173; c/float_store.c:84:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !173; c/float_store.c:84:5
  JMP_1 %bb.15, debug-location !174; c/float_store.c:85:11

bb.15 (%ir-block.53, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 88, DW_OP_minus, DW_OP_deref), debug-location !166; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !174; c/float_store.c:85:11
  $esi = MOV32ri 15, debug-location !174; c/float_store.c:85:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !174; c/float_store.c:85:11
  renamable $xmm0 = MOVSSrm_alt renamable $r14, 1, $noreg, 0, $noreg, debug-location !174 :: (load (s32) from %ir.15); c/float_store.c:85:11
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !175 :: (load (s64) from %ir.11); c/float_store.c:85:6
  MOVSSmr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $xmm0, debug-location !176 :: (store (s32) into %ir.55); c/float_store.c:85:9
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !177 :: (load (s64) from @stderr); c/float_store.c:86:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !178 :: (load (s32) from %ir.9); c/float_store.c:86:35
  renamable $xmm0 = MOVSSrm_alt renamable $r12, 1, $noreg, 0, $noreg, debug-location !179 :: (load (s32) from %ir.10); c/float_store.c:86:38
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr, debug-location !179; c/float_store.c:86:38
  renamable $rsi = MOV64ri @.str, debug-location !180; c/float_store.c:86:5
  $al = MOV8ri 1, debug-location !180; c/float_store.c:86:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !180; c/float_store.c:86:5
  JMP_1 %bb.16, debug-location !181; c/float_store.c:87:13

bb.16 (%ir-block.61, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 88, DW_OP_minus, DW_OP_deref), debug-location !166; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !181; c/float_store.c:87:13
  $esi = MOV32ri 16, debug-location !181; c/float_store.c:87:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !181; c/float_store.c:87:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !181 :: (load (s64) from @stderr); c/float_store.c:87:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !182 :: (load (s32) from %ir.9); c/float_store.c:87:35
  renamable $rax = MOV64rm killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !183 :: (load (s64) from %ir.12); c/float_store.c:87:39
  renamable $xmm0 = MOVSSrm_alt killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !184 :: (load (s32) from %ir.64); c/float_store.c:87:38
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr, debug-location !184; c/float_store.c:87:38
  renamable $rsi = MOV64ri @.str, debug-location !185; c/float_store.c:87:5
  $al = MOV8ri 1, debug-location !185; c/float_store.c:87:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !185; c/float_store.c:87:5
  JMP_1 %bb.17, debug-location !186; c/float_store.c:89:12

bb.17 (%ir-block.68, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 88, DW_OP_minus, DW_OP_deref), debug-location !166; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !187; c/float_store.c:89:16
  $esi = MOV32ri 17, debug-location !187; c/float_store.c:89:16
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !187; c/float_store.c:89:16
  DBG_VALUE $rbp, 0, !"d", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !186; c/float_store.c:89:12 line no:89 indirect
  renamable $xmm0 = CVTSI2SDrm renamable $r15, 1, $noreg, 0, $noreg, debug-location !187 :: (load (s32) from %ir.9); c/float_store.c:89:16
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg, debug-location !189; c/float_store.c:89:18
  renamable $xmm0 = DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr, debug-location !189; c/float_store.c:89:18
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -96, $noreg :: (load (s64) from %stack.7)
  MOVSDmr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $xmm0, debug-location !186 :: (store (s64) into %ir.16); c/float_store.c:89:12
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !190 :: (load (s64) from @stderr); c/float_store.c:90:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !191 :: (load (s32) from %ir.9); c/float_store.c:90:35
  renamable $xmm0 = MOVSSrm_alt renamable $r14, 1, $noreg, 0, $noreg, debug-location !192 :: (load (s32) from %ir.15); c/float_store.c:90:38
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr, debug-location !192; c/float_store.c:90:38
  renamable $rsi = MOV64ri @.str, debug-location !193; c/float_store.c:90:5
  $al = MOV8ri 1, debug-location !193; c/float_store.c:90:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !193; c/float_store.c:90:5
  JMP_1 %bb.18, debug-location !194; c/float_store.c:91:11

bb.18 (%ir-block.77, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $rbp, 0, !"d", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !186; c/float_store.c:89:12 line no:89 indirect
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 88, DW_OP_minus, DW_OP_deref), debug-location !166; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !194; c/float_store.c:91:11
  $esi = MOV32ri 18, debug-location !194; c/float_store.c:91:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !194; c/float_store.c:91:11
  renamable $xmm0 = MOVSDrm_alt killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !194 :: (load (s64) from %ir.16); c/float_store.c:91:11
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.5)
  renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !195 :: (load (s64) from %ir.14); c/float_store.c:91:6
  MOVSDmr killed renamable $rax, 1, $noreg, 0, $noreg, killed renamable $xmm0, debug-location !196 :: (store (s64) into %ir.79); c/float_store.c:91:9
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !197 :: (load (s64) from @stderr); c/float_store.c:92:13
  renamable $edx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !198 :: (load (s32) from %ir.9); c/float_store.c:92:35
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  renamable $xmm0 = MOVSDrm_alt killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !199 :: (load (s64) from %ir.13); c/float_store.c:92:38
  renamable $rsi = MOV64ri @.str, debug-location !200; c/float_store.c:92:5
  $al = MOV8ri 1, debug-location !200; c/float_store.c:92:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $xmm0, implicit-def $eax, debug-location !200; c/float_store.c:92:5
  JMP_1 %bb.19, debug-location !201; c/float_store.c:93:6

bb.19 (%ir-block.84, bb_id 19):
; predecessors: %bb.18
  successors: %bb.12
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $rbp, 0, !"d", !DIExpression(DW_OP_constu, 96, DW_OP_minus, DW_OP_deref), debug-location !186; c/float_store.c:89:12 line no:89 indirect
  DBG_VALUE $rbp, 0, !"f", !DIExpression(DW_OP_constu, 88, DW_OP_minus, DW_OP_deref), debug-location !166; c/float_store.c:83:11 line no:83 indirect
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !201; c/float_store.c:93:6
  $esi = MOV32ri 19, debug-location !201; c/float_store.c:93:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !201; c/float_store.c:93:6
  renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !201 :: (load (s32) from %ir.9); c/float_store.c:93:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !201; c/float_store.c:93:6
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !201 :: (store (s32) into %ir.9); c/float_store.c:93:6
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.12, debug-location !160; c/float_store.c:81:3

bb.20 (%ir-block.87, bb_id 20):
; predecessors: %bb.12
  successors: %bb.21

  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !204; c/float_store.c:95:3
  $esi = MOV32ri 20, debug-location !204; c/float_store.c:95:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/float_store.c:95:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !204 :: (load (s64) from %ir.88); c/float_store.c:95:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !204; c/float_store.c:95:3
  JMP_1 %bb.21, debug-location !205; c/float_store.c:96:18

bb.21 (%ir-block.90, bb_id 21):
; predecessors: %bb.20
  successors: %bb.22

  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !205; c/float_store.c:96:18
  $esi = MOV32ri 21, debug-location !205; c/float_store.c:96:18
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !205; c/float_store.c:96:18
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -64, $noreg, debug-location !205 :: (load (s64) from %ir.7); c/float_store.c:96:18
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !206; c/float_store.c:96:3
  JMP_1 %bb.22, debug-location !207; c/float_store.c:97:3

bb.22 (%ir-block.92, bb_id 22):
; predecessors: %bb.21
  successors: %bb.24

  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !207; c/float_store.c:97:3
  $esi = MOV32ri 22, debug-location !207; c/float_store.c:97:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !207; c/float_store.c:97:3
  JMP_1 %bb.24, debug-location !207; c/float_store.c:97:3

bb.23 (%ir-block.93, bb_id 23):
; predecessors: %bb.24

  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !207; c/float_store.c:97:3
  $esi = MOV32ri 23, debug-location !207; c/float_store.c:97:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !207; c/float_store.c:97:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !207; c/float_store.c:97:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 72, implicit-def dead $eflags, debug-location !207; c/float_store.c:97:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !207; c/float_store.c:97:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !207; c/float_store.c:97:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !207; c/float_store.c:97:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !207; c/float_store.c:97:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !207; c/float_store.c:97:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !207; c/float_store.c:97:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !207; c/float_store.c:97:3
  RET64 implicit $eax, debug-location !207; c/float_store.c:97:3

bb.24 (%ir-block.94, bb_id 24):
; predecessors: %bb.22
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !207; c/float_store.c:97:3
  DBG_VALUE $rbp, 0, !"d1", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !150; c/float_store.c:72:10 line no:72 indirect
  DBG_VALUE $rbp, 0, !"d2", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !152; c/float_store.c:73:11 line no:73 indirect
  DBG_VALUE $rbx, 0, !"f2", !DIExpression(), debug-location !146; c/float_store.c:70:10 line no:70 indirect
  DBG_VALUE $r12, 0, !"f1", !DIExpression(), debug-location !144; c/float_store.c:69:9 line no:69 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !142; c/float_store.c:68:7 line no:68 indirect
  $edi = MOV32ri 9, debug-location !207; c/float_store.c:97:3
  $esi = MOV32ri 24, debug-location !207; c/float_store.c:97:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !207; c/float_store.c:97:3
  JMP_1 %bb.23, debug-location !207; c/float_store.c:97:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
[MT] Control point: StartTracing
yk-tracing: start-tracing
Using buffer at 0x246abbd0 for direction OptToUnopt
Transition: OptToUnopt ExecTrace: false
src_rbp: 0x7fff2aa3f8b0, reg_store: 0x7fff2aa3f7d0, src_frame_size: 0x70, dst_frame_size: 0x70, rbp_offset_reg_store: 0xe0
Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
Register2Register - src: Register(12, 8, [-104]) dst: Register(12, 8, [])
Indirect2Register - src: Indirect(6, -80, 8) dst: Register(3, 8, [-104])
Indirect2Indirect - src: Indirect(6, -88, 8) dst: Indirect(6, -80, 8)
Register2Indirect - src: Register(3, 8, [-72]) dst: Indirect(6, -56, 8)
Register2Register - src: Register(14, 8, [-64]) dst: Register(14, 8, [-72])
Indirect2Indirect - src: Indirect(6, -96, 8) dst: Indirect(6, -88, 8)
Register2Register - src: Register(13, 8, [-112]) dst: Register(13, 8, [-96])
ASM DUMP:
  0: movabs rbp, 0x7fff2aa3f8b0
  a: movabs rsp, 0x7fff2aa3f8b0
  14: sub rsp, 0x70
  1b: movabs rax, 0x246abbd0
  25: mov rcx, qword ptr [rbp - 0x50]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rcx, qword ptr [rbp - 0x58]
  3b: mov qword ptr [rax + riz + 8], rcx
  43: mov rcx, qword ptr [rbp - 0x60]
  4a: mov qword ptr [rax + riz + 0x10], rcx
  52: mov r15, qword ptr [rbp - 0xe0]
  59: mov r12, qword ptr [rbp - 0xc8]
  60: movabs rax, 0x246abbd0
  6a: mov rcx, qword ptr [rax + riz]
  72: mov qword ptr [rbp - 0x68], rcx
  79: movabs rax, 0x246abbd0
  83: mov rbx, qword ptr [rax + riz]
  8b: movabs rax, 0x246abbd0
  95: mov rcx, qword ptr [rax + riz + 8]
  9d: mov qword ptr [rbp - 0x50], rcx
  a4: mov rax, qword ptr [rbp - 0x90]
  ab: mov qword ptr [rbp - 0x38], rax
  b2: mov rax, qword ptr [rbp - 0xd8]
  b9: mov qword ptr [rbp - 0x48], rax
  c0: mov r14, qword ptr [rbp - 0xd8]
  c7: movabs rax, 0x246abbd0
  d1: mov rcx, qword ptr [rax + riz + 0x10]
  d9: mov qword ptr [rbp - 0x58], rcx
  e0: mov rax, qword ptr [rbp - 0xd0]
  e7: mov qword ptr [rbp - 0x60], rax
  ee: mov r13, qword ptr [rbp - 0xd0]
  f5: mov rax, qword ptr [rbp - 0x80]
  fc: mov rcx, qword ptr [rbp - 0x88]
  103: mov rdi, qword ptr [rbp - 0x98]
  10a: mov rsi, qword ptr [rbp - 0xa0]
  111: mov r8, qword ptr [rbp - 0xa8]
  118: mov r9, qword ptr [rbp - 0xb0]
  11f: mov r10, qword ptr [rbp - 0xb8]
  126: mov r11, qword ptr [rbp - 0xc0]
  12d: sub rsp, 0x10
  131: mov qword ptr [rsp], rax
  135: movabs rax, 0x205467
  13f: mov qword ptr [rsp + 8], rax
  144: pop rax
  145: ret 
4 -> 3.252033
4 -> 3.252033
4 -> 3.252033
4 -> 3.252033
4 -> 3.252033
[MT] Control point: StopTracing
[MT] Queueing root compile job for trace ID: 0
[MT] self Arc strong_count before clone: 140647368663076
[MT] Created Arc clone for job, strong_count: 140647368663077
[MT] self Arc strong_count after clone: 140647368663077
[MT] ERROR: Arc strong_count is suspiciously high: 140647368663077
[MT] ERROR: Arc ptr: 0x7feb0472a040
Corrupted Arc detected
[MT] Job main closure starting for trace ID: 0, mt strong_count: 140647368663078
[MT] Job main closure: About to acquire compiler lock
[MT] Job main closure: Acquired compiler lock
[MT] Job main closure: About to clone compiler Arc

test lang_tests::float_store.c ... [0m[31mFAILED[0m

failures:

---- lang_tests::float_store.c status ----
Exited due to signal: 11

---- lang_tests::float_store.c stderr ----

Literal text:
   |[MT] Control point: StartTracing
   |yk-tracing: start-tracing
   |4 -> 3.252033
   |4 -> 3.252033
   |4 -> 3.252033
   |4 -> 3.252033
   |4 -> 3.252033
   |[MT] Control point: StopTracing
   |[MT] Queueing root compile job for trace ID: 0
   |[MT] self Arc strong_count before clone: 140647368663076
   |[MT] Created Arc clone for job, strong_count: 140647368663077
   |[MT] self Arc strong_count after clone: 140647368663077
   |[MT] ERROR: Arc strong_count is suspiciously high: 140647368663077
   |[MT] ERROR: Arc ptr: 0x7feb0472a040
   |Corrupted Arc detected
   |[MT] Job main closure starting for trace ID: 0, mt strong_count: 140647368663078
   |[MT] Job main closure: About to acquire compiler lock
   |[MT] Job main closure: Acquired compiler lock
   |[MT] Job main closure: About to clone compiler Arc
   |

Pattern (error at line 1):
>> |yk-tracing: start-tracing
   |4 -> 3.252033
   |4 -> 3.252033
   |4 -> 3.252033
   ...

Text (error at line 1):
>> |[MT] Control point: StartTracing
   |yk-tracing: start-tracing
   |4 -> 3.252033
   |4 -> 3.252033
   ...

---- lang_tests::float_store.c stdout ----

Using buffer at 0x246abbd0 for direction OptToUnopt
Transition: OptToUnopt ExecTrace: false
src_rbp: 0x7fff2aa3f8b0, reg_store: 0x7fff2aa3f7d0, src_frame_size: 0x70, dst_frame_size: 0x70, rbp_offset_reg_store: 0xe0
Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
Register2Register - src: Register(12, 8, [-104]) dst: Register(12, 8, [])
Indirect2Register - src: Indirect(6, -80, 8) dst: Register(3, 8, [-104])
Indirect2Indirect - src: Indirect(6, -88, 8) dst: Indirect(6, -80, 8)
Register2Indirect - src: Register(3, 8, [-72]) dst: Indirect(6, -56, 8)
Register2Register - src: Register(14, 8, [-64]) dst: Register(14, 8, [-72])
Indirect2Indirect - src: Indirect(6, -96, 8) dst: Indirect(6, -88, 8)
Register2Register - src: Register(13, 8, [-112]) dst: Register(13, 8, [-96])
ASM DUMP:
  0: movabs rbp, 0x7fff2aa3f8b0
  a: movabs rsp, 0x7fff2aa3f8b0
  14: sub rsp, 0x70
  1b: movabs rax, 0x246abbd0
  25: mov rcx, qword ptr [rbp - 0x50]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rcx, qword ptr [rbp - 0x58]
  3b: mov qword ptr [rax + riz + 8], rcx
  43: mov rcx, qword ptr [rbp - 0x60]
  4a: mov qword ptr [rax + riz + 0x10], rcx
  52: mov r15, qword ptr [rbp - 0xe0]
  59: mov r12, qword ptr [rbp - 0xc8]
  60: movabs rax, 0x246abbd0
  6a: mov rcx, qword ptr [rax + riz]
  72: mov qword ptr [rbp - 0x68], rcx
  79: movabs rax, 0x246abbd0
  83: mov rbx, qword ptr [rax + riz]
  8b: movabs rax, 0x246abbd0
  95: mov rcx, qword ptr [rax + riz + 8]
  9d: mov qword ptr [rbp - 0x50], rcx
  a4: mov rax, qword ptr [rbp - 0x90]
  ab: mov qword ptr [rbp - 0x38], rax
  b2: mov rax, qword ptr [rbp - 0xd8]
  b9: mov qword ptr [rbp - 0x48], rax
  c0: mov r14, qword ptr [rbp - 0xd8]
  c7: movabs rax, 0x246abbd0
  d1: mov rcx, qword ptr [rax + riz + 0x10]
  d9: mov qword ptr [rbp - 0x58], rcx
  e0: mov rax, qword ptr [rbp - 0xd0]
  e7: mov qword ptr [rbp - 0x60], rax
  ee: mov r13, qword ptr [rbp - 0xd0]
  f5: mov rax, qword ptr [rbp - 0x80]
  fc: mov rcx, qword ptr [rbp - 0x88]
  103: mov rdi, qword ptr [rbp - 0x98]
  10a: mov rsi, qword ptr [rbp - 0xa0]
  111: mov r8, qword ptr [rbp - 0xa8]
  118: mov r9, qword ptr [rbp - 0xb0]
  11f: mov r10, qword ptr [rbp - 0xb8]
  126: mov r11, qword ptr [rbp - 0xc0]
  12d: sub rsp, 0x10
  131: mov qword ptr [rsp], rax
  135: movabs rax, 0x205467
  13f: mov qword ptr [rsp + 8], rax
  144: pop rax
  145: ret 

failures:
    lang_tests::float_store.c

test result: [0m[31mFAILED[0m. 0 passed; 1 failed; 0 ignored; 0 measured; 155 filtered out

[1m[31merror[0m[1m:[0m test failed, to rerun pass `-p tests --test c_tests`

Caused by:
  process didn't exit successfully: `/home/pd/yk-fork/target/debug/deps/c_tests-23f7068ab185bf3c '::float_store.c' --nocapture` (exit status: 1)
Shared connection to bencher16.soft-dev.org closed.
CompletedProcess(args=['ssh', '-t', 'bencher16.soft-dev.org', 'cd', 'yk-fork', '&&', 'CP_PRINT_MACHINE_CODE=1', 'CP_VERBOSE=1', 'CP_VERBOSE_ASM=1', 'YKB_TRACER=swt', '/home/pd/.cargo/bin/cargo', 'test', '::float_store.c', '--', '--nocapture'], returncode=1)
