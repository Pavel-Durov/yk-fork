main ASM code:

 0x000000000020504b  main+507 call   0x2056b0 <__yk_trace_basicblock_dummy@plt>
 0x0000000000205050  main+512 mov    rdi,QWORD PTR [rbp-0x38]
 0x0000000000205054  main+516 lea    rsi,[rbp-0x30]
 0x0000000000205058  main+520 xor    edx,edx
 0x000000000020505a  main+522 movabs r11,0x2056e0

Registers before the control point transition call
>>> x/gx $r15
0x7ffff6f0a020:	0x0000000000000004
>>> x/gx $r12
0x7ffff6f0a024:	0xf6f0a02400000000
>>> x/gx $rbp-80
0x7fffffffe190:	0x00007ffff6f0a028
>>> x/gx $rbp-88
0x7fffffffe188:	0x00007ffff6f0a030
>>> x/gx $rbx
0x7ffff6f0a038:	0x0000000000000000
>>> x/gx $r14
0x7ffff6f0a040:	0x00007ffff6f0a038
>>> x/gx $rbp-96
0x7fffffffe180:	0x00007ffff6f0a048
>>> x/gx $r13
0x7ffff6f0a050:	0x0000000000000000

// control point call
 0x0000000000205064> main+532 call   r11



// logs
yk-tracing: start-tracing
Using buffer at 0x208bd0 for direction OptToUnopt
Transition: OptToUnopt ExecTrace: false
src_rbp: 0x7fffffffe1e0, reg_store: 0x7fffffffe100, src_frame_size: 0x70, dst_frame_size: 0x70, rbp_offset_reg_store: 0xe0
Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
Register2Register - src: Register(12, 8, [-104]) dst: Register(12, 8, [])
Indirect2Register - src: Indirect(6, -80, 8) dst: Register(3, 8, [-104])
Indirect2Indirect - src: Indirect(6, -88, 8) dst: Indirect(6, -80, 8)
Register2Indirect - src: Register(3, 8, [-72]) dst: Indirect(6, -56, 8)
Register2Register - src: Register(14, 8, [-64]) dst: Register(14, 8, [-72])
Indirect2Indirect - src: Indirect(6, -96, 8) dst: Indirect(6, -88, 8)
Register2Register - src: Register(13, 8, [-112]) dst: Register(13, 8, [-96])

>>> x/gx $r15
0x7ffff6f0a020:	0x0000000000000004
>>> x/gx $r12
0x7ffff6f0a024:	0xf6f0a02400000000
>>> x/gx $rbx
0x7ffff6f0a028:	0x00007ffff6f0a024
>>> x/gx $rbp-80
0x7fffffffe190:	0x00007ffff6f0a030
>>> x/gx $rbp-56
0x7fffffffe1a8:	0x00007ffff6f0a038
>>> x/gx $r14
0x7ffff6f0a040:	0x00007ffff6f0a038
>>> x/gx $rbp-88
0x7fffffffe188:	0x00007ffff6f0a048
>>> x/gx $r13
0x7ffff6f0a050:	0x0000000000000000


All registers after transition:

rax            0x7ffff6f0a001      140737336352769
rbx            0x7ffff6f0a028      140737336352808
rcx            0x7ffff6f0a040      140737336352832
rdx            0x209679            2135673
rsi            0x7fffffffe1b0      140737488347568
rdi            0x208680            2131584
rbp            0x7fffffffe1e0      0x7fffffffe1e0
rsp            0x7fffffffe170      0x7fffffffe170
r8             0x7ffff71f1cc0      140737339399360
r9             0x1b0               432
r10            0x7ffff7201ef8      140737339465464
r11            0x7ffff7969b18      140737347230488
r12            0x7ffff6f0a024      140737336352804
r13            0x7ffff6f0a050      140737336352848
r14            0x7ffff6f0a040      140737336352832
r15            0x7ffff6f0a020      140737336352800
rip            0x205467            0x205467 <main+535>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
k0             0xffffffff          4294967295
k1             0xff                255
k2             0x1                 1
k3             0x0                 0
k4             0x0                 0
k5             0x0                 0
k6             0x0                 0
k7             0x0                 0






Indirect2Indirect - src: Indirect(6, -88, 8) dst: Indirect(6, -80, 8)
Register2Indirect - src: Register(3, 8, [-72]) dst: Indirect(6, -56, 8)
Register2Register - src: Register(14, 8, [-64]) dst: Register(14, 8, [-72])
Indirect2Indirect - src: Indirect(6, -96, 8) dst: Indirect(6, -88, 8)
Register2Register - src: Register(13, 8, [-112]) dst: Register(13, 8, [-96])

Transition ASM:
  0: int3 
  1: movabs rbp, 0x7fffffffe1e0
  b: movabs rsp, 0x7fffffffe1e0
  15: sub rsp, 0x70
  1c: movabs rax, 0x208bd0
  26: mov rcx, qword ptr [rbp - 0x50]
  2d: mov qword ptr [rax + riz], rcx
  35: mov rcx, qword ptr [rbp - 0x58]
  3c: mov qword ptr [rax + riz + 8], rcx
  44: mov rcx, qword ptr [rbp - 0x60]
  4b: mov qword ptr [rax + riz + 0x10], rcx

// Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
  53: mov r15, qword ptr [rbp - 0xe0]
// Register2Register - src: Register(12, 8, [-104]) dst: Register(12, 8, [])
  5a: mov r12, qword ptr [rbp - 0xc8]

// Indirect2Register - src: Indirect(6, -80, 8) dst: Register(3, 8, [-104])
>>> x/gx 0x208bd0 
0x208bd0:	0x00007ffff6f0a028

  61: movabs rax, 0x208bd0
>>> x/gx $rax
0x208bd0:	0x00007ffff6f0a028
  6b: mov rcx, qword ptr [rax + riz]
>>> x/gx $rcx
0x7ffff6f0a028:	0x00007ffff6f0a024
  73: mov qword ptr [rbp - 0x68], rcx
>>> x/gx $rbp-0x68
0x7fffffffe178:	0x00007ffff6f0a028
  7a: movabs rax, 0x208bd0
  84: mov rbx, qword ptr [rax + riz]
>>> x/gx $rbx
0x7ffff6f0a028:	0x00007ffff6f0a024

  8c: movabs rax, 0x208bd0
  96: mov rcx, qword ptr [rax + riz + 8]
  9e: mov qword ptr [rbp - 0x50], rcx
  a5: mov rax, qword ptr [rbp - 0x90]
  ac: mov qword ptr [rbp - 0x38], rax
  b3: mov rax, qword ptr [rbp - 0xd8]
  ba: mov qword ptr [rbp - 0x48], rax
  c1: mov r14, qword ptr [rbp - 0xd8]
  c8: movabs rax, 0x208bd0
  d2: mov rcx, qword ptr [rax + riz + 0x10]
  da: mov qword ptr [rbp - 0x58], rcx
  e1: mov rax, qword ptr [rbp - 0xd0]
  e8: mov qword ptr [rbp - 0x60], rax
  ef: mov r13, qword ptr [rbp - 0xd0]
  f6: mov rax, qword ptr [rbp - 0x80]
  fd: mov rcx, qword ptr [rbp - 0x88]
  104: mov rdi, qword ptr [rbp - 0x98]
  10b: mov rsi, qword ptr [rbp - 0xa0]
  112: mov r8, qword ptr [rbp - 0xa8]
  119: mov r9, qword ptr [rbp - 0xb0]
  120: mov r10, qword ptr [rbp - 0xb8]
  127: mov r11, qword ptr [rbp - 0xc0]
  12e: sub rsp, 0x10
  132: mov qword ptr [rsp], rax
  136: movabs rax, 0x205467
  140: mov qword ptr [rsp + 8], rax
  145: pop rax
  146: ret 






Error:
>>> bt
#0  core::sync::atomic::AtomicUsize::fetch_add (self=0x0) at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/core/src/sync/atomic.rs:2962
#1  alloc::sync::{impl#28}::clone<dyn ykrt::compile::Compiler, alloc::alloc::Global> (self=0x7ffff6f0a150) at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/alloc/src/sync.rs:2208
#2  0x00007ffff799678d in ykrt::mt::{impl#1}::queue_root_compile_job::{closure#0} () at ykrt/src/mt.rs:249
#3  0x00007ffff7b40cde in core::ops::function::FnOnce::call_once<ykrt::mt::{impl#1}::queue_root_compile_job::{closure_env#0}, ()> () at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/core/src/ops/function.rs:250
#4  0x00007ffff7ac9a98 in alloc::boxed::{impl#28}::call_once<(), (dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global> (self=..., args=()) at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/alloc/src/boxed.rs:1966
#5  0x00007ffff799afe4 in std::sys::backtrace::__rust_begin_short_backtrace<alloc::boxed::Box<(dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global>, ()> (f=...) at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/std/src/sys/backtrace.rs:152
#6  0x00007ffff7af1e53 in std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure#0}<alloc::boxed::Box<(dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global>, ()> () at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/std/src/thread/mod.rs:559
#7  0x00007ffff7b2e3a1 in core::panic::unwind_safe::{impl#23}::call_once<(), std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<alloc::boxed::Box<(dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global>, ()>> (self=...) at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/core/src/panic/unwind_safe.rs:272
#8  0x00007ffff7a81a80 in std::panicking::try::do_call<core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<alloc::boxed::Box<(dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global>, ()>>, ()> (data=0x7ffff6f08bb8) at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/std/src/panicking.rs:589
#9  0x00007ffff7af243b in __rust_try () from /home/pd/yk-fork/tests/../bin/../target/debug/deps/libykcapi.so
#10 0x00007ffff7af0ffc in std::panicking::try<(), core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<alloc::boxed::Box<(dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global>, ()>>> (f=...) at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/std/src/panicking.rs:552
#11 std::panic::catch_unwind<core::panic::unwind_safe::AssertUnwindSafe<std::thread::{impl#0}::spawn_unchecked_::{closure#1}::{closure_env#0}<alloc::boxed::Box<(dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global>, ()>>, ()> (f=...) at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/std/src/panic.rs:359
#12 std::thread::{impl#0}::spawn_unchecked_::{closure#1}<alloc::boxed::Box<(dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global>, ()> () at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/std/src/thread/mod.rs:557
#13 0x00007ffff7b40cff in core::ops::function::FnOnce::call_once<std::thread::{impl#0}::spawn_unchecked_::{closure_env#1}<alloc::boxed::Box<(dyn core::ops::function::FnOnce<(), Output=()> + core::marker::Send), alloc::alloc::Global>, ()>, ()> () at /rustc/b4c8b0c3f0533bb342a4873ff59bdad3883ab8e3/library/core/src/ops/function.rs:250
#14 0x00007ffff7e0ce5b in alloc::boxed::{impl#28}::call_once<(), dyn core::ops::function::FnOnce<(), Output=()>, alloc::alloc::Global> () at library/alloc/src/boxed.rs:1966
#15 alloc::boxed::{impl#28}::call_once<(), alloc::boxed::Box<dyn core::ops::function::FnOnce<(), Output=()>, alloc::alloc::Global>, alloc::alloc::Global> () at library/alloc/src/boxed.rs:1966
#16 std::sys::pal::unix::thread::{impl#2}::new::thread_start () at library/std/src/sys/pal/unix/thread.rs:114
#17 0x00007ffff70a81f5 in start_thread (arg=<optimized out>) at ./nptl/pthread_create