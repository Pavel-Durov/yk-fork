warning: unused variable: `dest_reg_nums`
   --> ykrt/src/trace/swt/live_vars.rs:787:13
    |
787 |         let dest_reg_nums = set_destination_live_vars(
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dest_reg_nums`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `ykrt` (lib test) generated 1 warning
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.31s
     Running unittests src/lib.rs (target/debug/deps/hwtracer-5a292c1a4725377f)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 14 filtered out; finished in 0.00s

     Running unittests src/lib.rs (target/debug/deps/tests-765bab7538b573ac)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/dump_ir.rs (target/debug/deps/dump_ir-613d17bd9885d5c3)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/gdb_c_test.rs (target/debug/deps/gdb_c_test-54dab2fbc910e3fa)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running langtest_c.rs (target/debug/deps/c_tests-a7df1e4d217569ba)
Running C tests...

running 1 tests********** Machine Code when processing stackmap **********
Function: loop
# Machine code for function loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !40; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 4, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, 1, 8, $rbp, -136, 3, renamable $r15, 3, renamable $r13, 3, killed renamable $r12, 3, 1, 4, $rbp, -92, 3, implicit-def dead early-clobber $r11, debug-location !56; c/trace_while_executing2.c:40:7
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r12, 0, !"loc", !DIExpression(), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !52 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !51 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !55 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !55; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r12 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  $r12 = MOV64rr killed $r14
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !56; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !57; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !57; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !57; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !57 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !58 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !59; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !60; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !61; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !61; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !61; c/trace_while_executing2.c:42:10
  STACKMAP 5, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !60; c/trace_while_executing2.c:42:3
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !62 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !62; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !60; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !63; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !63; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r15 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r12 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r12 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !63; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !63 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !65 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !66; c/trace_while_executing2.c:43:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r12, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !66 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !67; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !67; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !67; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !67; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !67 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !68 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !69 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !70; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !70; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !70; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !71; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !71; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !71; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/trace_while_executing2.c:45:9
  STACKMAP 6, 0, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !74; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !73 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !73; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !74; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !75; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !75; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/trace_while_executing2.c:46:11
  STACKMAP 7, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r12, 3, renamable $r14, 3, killed renamable $r15, 3, killed renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !79; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !78 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !78; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  $r12 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !79; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r12, $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !80; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !80; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !80; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !80 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !81 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !82; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !83; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !83; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !83; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !84; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !84; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !84; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !85; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !85; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !85 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r12, 1, $noreg, 0, $noreg, debug-location !86 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !87 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r12d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r12d, debug-location !90; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !90; c/trace_while_executing2.c:51:5
  STACKMAP 8, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r12d, 3, implicit-def dead early-clobber $r11, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !91; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !91; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !91 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !91 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !95; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !95; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !95; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !95 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !95 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !95; c/trace_while_executing2.c:54:1
  RET64 debug-location !95; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !95; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !95; c/trace_while_executing2.c:54:1

# End machine code for function loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: loop
# Machine code for function loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !40; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 4, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, 1, 8, $rbp, -136, 3, renamable $r15, 3, renamable $r13, 3, killed renamable $r12, 3, 1, 4, $rbp, -92, 3, implicit-def dead early-clobber $r11, debug-location !56; c/trace_while_executing2.c:40:7
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r12, 0, !"loc", !DIExpression(), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !52 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !51 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !55 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !55; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r12 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  $r12 = MOV64rr killed $r14
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !56; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !57; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !57; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !57; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !57 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !58 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !59; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !60; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !61; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !61; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !61; c/trace_while_executing2.c:42:10
  STACKMAP 5, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !60; c/trace_while_executing2.c:42:3
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !62 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !62; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !60; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !63; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !63; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r15 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r12 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r12 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !63; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !63 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !65 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !66; c/trace_while_executing2.c:43:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r12, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !66 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !67; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !67; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !67; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !67; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !67 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !68 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !69 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !70; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !70; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !70; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !71; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !71; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !71; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/trace_while_executing2.c:45:9
  STACKMAP 6, 0, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !74; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !73 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !73; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !74; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !75; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !75; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/trace_while_executing2.c:46:11
  STACKMAP 7, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r12, 3, renamable $r14, 3, killed renamable $r15, 3, killed renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !79; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !78 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !78; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  $r12 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !79; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r12, $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !80; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !80; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !80; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !80 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !81 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !82; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !83; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !83; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !83; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !84; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !84; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !84; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !85; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !85; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !85 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r12, 1, $noreg, 0, $noreg, debug-location !86 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !87 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r12d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r12d, debug-location !90; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !90; c/trace_while_executing2.c:51:5
  STACKMAP 8, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r12d, 3, implicit-def dead early-clobber $r11, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !91; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !91; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !91 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !91 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !95; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !95; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !95; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !95 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !95 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !95; c/trace_while_executing2.c:54:1
  RET64 debug-location !95; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !95; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !95; c/trace_while_executing2.c:54:1

# End machine code for function loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: loop
# Machine code for function loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !40; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 4, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, 1, 8, $rbp, -136, 3, renamable $r15, 3, renamable $r13, 3, killed renamable $r12, 3, 1, 4, $rbp, -92, 3, implicit-def dead early-clobber $r11, debug-location !56; c/trace_while_executing2.c:40:7
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r12, 0, !"loc", !DIExpression(), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !52 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !51 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !55 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !55; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r12 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  $r12 = MOV64rr killed $r14
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !56; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !57; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !57; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !57; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !57 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !58 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !59; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !60; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !61; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !61; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !61; c/trace_while_executing2.c:42:10
  STACKMAP 5, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !60; c/trace_while_executing2.c:42:3
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !62 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !62; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !60; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !63; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !63; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r15 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r12 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r12 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !63; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !63 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !65 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !66; c/trace_while_executing2.c:43:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r12, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !66 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !67; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !67; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !67; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !67; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !67 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !68 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !69 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !70; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !70; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !70; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !71; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !71; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !71; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/trace_while_executing2.c:45:9
  STACKMAP 6, 0, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !74; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !73 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !73; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !74; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !75; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !75; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/trace_while_executing2.c:46:11
  STACKMAP 7, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r12, 3, renamable $r14, 3, killed renamable $r15, 3, killed renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !79; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !78 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !78; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  $r12 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !79; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r12, $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !80; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !80; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !80; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !80 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !81 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !82; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !83; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !83; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !83; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !84; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !84; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !84; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !85; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !85; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !85 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r12, 1, $noreg, 0, $noreg, debug-location !86 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !87 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r12d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r12d, debug-location !90; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !90; c/trace_while_executing2.c:51:5
  STACKMAP 8, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r12d, 3, implicit-def dead early-clobber $r11, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !91; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !91; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !91 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !91 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !95; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !95; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !95; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !95 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !95 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !95; c/trace_while_executing2.c:54:1
  RET64 debug-location !95; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !95; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !95; c/trace_while_executing2.c:54:1

# End machine code for function loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: loop
# Machine code for function loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !40; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 4, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, 1, 8, $rbp, -136, 3, renamable $r15, 3, renamable $r13, 3, killed renamable $r12, 3, 1, 4, $rbp, -92, 3, implicit-def dead early-clobber $r11, debug-location !56; c/trace_while_executing2.c:40:7
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r12, 0, !"loc", !DIExpression(), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !52 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !51 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !55 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !55; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r12 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  $r12 = MOV64rr killed $r14
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !56; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !57; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !57; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !57; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !57 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !58 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !59; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !60; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !61; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !61; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !61; c/trace_while_executing2.c:42:10
  STACKMAP 5, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !60; c/trace_while_executing2.c:42:3
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !62 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !62; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !60; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !63; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !63; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r15 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r12 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r12 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !63; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !63 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !65 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !66; c/trace_while_executing2.c:43:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r12, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !66 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !67; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !67; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !67; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !67; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !67 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !68 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !69 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !70; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !70; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !70; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !71; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !71; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !71; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/trace_while_executing2.c:45:9
  STACKMAP 6, 0, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !74; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !73 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !73; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !74; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !75; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !75; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/trace_while_executing2.c:46:11
  STACKMAP 7, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r12, 3, renamable $r14, 3, killed renamable $r15, 3, killed renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !79; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !78 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !78; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  $r12 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !79; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r12, $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !80; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !80; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !80; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !80 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !81 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !82; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !83; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !83; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !83; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !84; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !84; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !84; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !85; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !85; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !85 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r12, 1, $noreg, 0, $noreg, debug-location !86 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !87 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r12d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r12d, debug-location !90; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !90; c/trace_while_executing2.c:51:5
  STACKMAP 8, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r12d, 3, implicit-def dead early-clobber $r11, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !91; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !91; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !91 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !91 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !95; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !95; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !95; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !95 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !95 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !95; c/trace_while_executing2.c:54:1
  RET64 debug-location !95; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !95; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !95; c/trace_while_executing2.c:54:1

# End machine code for function loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: loop
# Machine code for function loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !40; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 4, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, 1, 8, $rbp, -136, 3, renamable $r15, 3, renamable $r13, 3, killed renamable $r12, 3, 1, 4, $rbp, -92, 3, implicit-def dead early-clobber $r11, debug-location !56; c/trace_while_executing2.c:40:7
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r12, 0, !"loc", !DIExpression(), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !52 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !51 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !55 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !55; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r12 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  $r12 = MOV64rr killed $r14
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !56; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !57; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !57; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !57; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !57 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !58 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !59; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !60; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !61; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !61; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !61; c/trace_while_executing2.c:42:10
  STACKMAP 5, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !60; c/trace_while_executing2.c:42:3
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !62 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !62; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !60; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !63; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !63; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r15 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r12 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r12 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !63; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !63 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !65 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !66; c/trace_while_executing2.c:43:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r12, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !66 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !67; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !67; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !67; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !67; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !67 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !68 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !69 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !70; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !70; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !70; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !71; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !71; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !71; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/trace_while_executing2.c:45:9
  STACKMAP 6, 0, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !74; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !73 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !73; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !74; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !75; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !75; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/trace_while_executing2.c:46:11
  STACKMAP 7, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r12, 3, renamable $r14, 3, killed renamable $r15, 3, killed renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !79; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !78 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !78; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  $r12 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !79; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r12, $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !80; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !80; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !80; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !80 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !81 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !82; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !83; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !83; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !83; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !84; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !84; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !84; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !85; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !85; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !85 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r12, 1, $noreg, 0, $noreg, debug-location !86 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !87 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r12d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r12d, debug-location !90; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !90; c/trace_while_executing2.c:51:5
  STACKMAP 8, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r12d, 3, implicit-def dead early-clobber $r11, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !91; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !91; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !91 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !91 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !95; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !95; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !95; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !95 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !95 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !95; c/trace_while_executing2.c:54:1
  RET64 debug-location !95; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !95; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !95; c/trace_while_executing2.c:54:1

# End machine code for function loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: loop
# Machine code for function loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !40; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 4, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, 1, 8, $rbp, -136, 3, renamable $r15, 3, renamable $r13, 3, killed renamable $r12, 3, 1, 4, $rbp, -92, 3, implicit-def dead early-clobber $r11, debug-location !56; c/trace_while_executing2.c:40:7
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r12, 0, !"loc", !DIExpression(), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !52 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !51 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !55 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !55; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r12 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  $r12 = MOV64rr killed $r14
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !56; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !56; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !57; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !57; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !57; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !57 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !58 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !59; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !60; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !61; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !61; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !61; c/trace_while_executing2.c:42:10
  STACKMAP 5, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !60; c/trace_while_executing2.c:42:3
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !62 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !62; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !60; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !60; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !63; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !63; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r15 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r12 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r12 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !63; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !40; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !63 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !65 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !66; c/trace_while_executing2.c:43:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r12, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !66 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r12, 0, !"loc1", !DIExpression(), debug-location !43; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r15, 0, !"i", !DIExpression(), debug-location !47; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !49; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !67; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !67; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !67; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !67; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !67 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !68 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !69 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !70; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !70; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !70; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !71; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !71; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !71; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/trace_while_executing2.c:45:9
  STACKMAP 6, 0, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !74; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r15, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !73 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !73; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !74; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !74; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !75; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !75; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/trace_while_executing2.c:46:11
  STACKMAP 7, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r12, 3, renamable $r14, 3, killed renamable $r15, 3, killed renamable $r13, 3, 1, 8, $rbp, -56, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !79; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !78 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !78; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  $r12 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !79; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !79; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r12, $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !80; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !80; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !80; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !80 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !81 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !82; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !83; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !83; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !83; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !84; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !84; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !84; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !85; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !85; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !85 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r12, 1, $noreg, 0, $noreg, debug-location !86 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !87 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r12d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r12d, debug-location !90; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !90; c/trace_while_executing2.c:51:5
  STACKMAP 8, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r15, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r12d, 3, implicit-def dead early-clobber $r11, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !91; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !91; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !91 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !91; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !91 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !60; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !95; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !95; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !95; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !95 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !95 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !95; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !95; c/trace_while_executing2.c:54:1
  RET64 debug-location !95; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !95; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !45; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !51; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !95; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !95; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !95; c/trace_while_executing2.c:54:1

# End machine code for function loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: indirect
# Machine code for function indirect: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-56]
  fi#1: size=4, align=4, at location [SP-52]
  fi#2: size=8, align=8, at location [SP-80]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=8, align=8, at location [SP-64]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -48, $noreg, $r8d :: (store (s32) into %stack.0)
  MOV32mr $rbp, 1, $noreg, -44, $noreg, $ecx :: (store (s32) into %stack.1)
  MOV64mr $rbp, 1, $noreg, -72, $noreg, $rdx :: (store (s64) into %stack.2)
  MOV64mr $rbp, 1, $noreg, -64, $noreg, $rsi :: (store (s64) into %stack.3)
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rdi :: (store (s64) into %stack.4)
  $edi = MOV32ri 4
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $r12
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $r12
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $r13 = MOV64rr $r12
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 16, implicit-def dead $eflags
  $rbx = MOV64rr $r12
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 24, implicit-def dead $eflags
  $r15 = MOV64rr $r12
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 28, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !97; c/trace_while_executing2.c:57:21

bb.1 (%ir-block.13, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.5
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 4
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 9, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, 1, 4, $rbp, -48, 3, implicit-def dead early-clobber $r11, debug-location !110; c/trace_while_executing2.c:58:18
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.3)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.2)
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -44, $noreg :: (load (s32) from %stack.1)
  MOV32mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -48, $noreg :: (load (s32) from %stack.0)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  CMP32mi killed renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !109 :: (load (s32) from %ir.12); c/trace_while_executing2.c:58:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !109; c/trace_while_executing2.c:58:13
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !110; c/trace_while_executing2.c:58:18
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; c/trace_while_executing2.c:58:18
  JMP_1 %bb.5, debug-location !110; c/trace_while_executing2.c:58:18

bb.2 (%ir-block.16, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3, %bb.5
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !111; c/trace_while_executing2.c:58:21
  $esi = MOV32ri 2, debug-location !111; c/trace_while_executing2.c:58:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !111; c/trace_while_executing2.c:58:21
  STACKMAP 10, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !113; c/trace_while_executing2.c:58:7
  CMP32mi renamable $rbx, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !112 :: (load (s32) from %ir.11); c/trace_while_executing2.c:58:23
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !112; c/trace_while_executing2.c:58:23
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !113; c/trace_while_executing2.c:58:7
  JCC_1 %bb.3, 5, implicit killed $eflags, debug-location !113; c/trace_while_executing2.c:58:7
  JMP_1 %bb.5, debug-location !113; c/trace_while_executing2.c:58:7

bb.3 (%ir-block.19, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !114; c/trace_while_executing2.c:59:10
  $esi = MOV32ri 3, debug-location !114; c/trace_while_executing2.c:59:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/trace_while_executing2.c:59:10
  renamable $r15 = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !114 :: (load (s64) from %ir.8); c/trace_while_executing2.c:59:10
  renamable $r14 = MOV64rm killed renamable $r14, 1, $noreg, 0, $noreg, debug-location !115 :: (load (s64) from %ir.9); c/trace_while_executing2.c:59:14
  renamable $r13 = MOV64rm killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !116 :: (load (s64) from %ir.10); c/trace_while_executing2.c:59:20
  renamable $ebx = MOV32rm killed renamable $rbx, 1, $noreg, 0, $noreg, debug-location !117 :: (load (s32) from %ir.11); c/trace_while_executing2.c:59:26
  $rdi = MOV64rr $r15, debug-location !118; c/trace_while_executing2.c:59:5
  $rsi = MOV64rr $r14, debug-location !118; c/trace_while_executing2.c:59:5
  $rdx = MOV64rr $r13, debug-location !118; c/trace_while_executing2.c:59:5
  $ecx = MOV32rr $ebx, debug-location !118; c/trace_while_executing2.c:59:5
  $r8d = MOV32ri 1, debug-location !118; c/trace_while_executing2.c:59:5
  CALL64pcrel32 @loop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !118; c/trace_while_executing2.c:59:5
  STACKMAP 11, 0, renamable $r12, 3, killed renamable $r15, 3, killed renamable $r14, 3, killed renamable $r13, 3, killed renamable $ebx, 3, implicit-def dead early-clobber $r11, debug-location !118; c/trace_while_executing2.c:59:5
  JMP_1 %bb.4, debug-location !118; c/trace_while_executing2.c:59:5

bb.4 (%ir-block.24, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !118; c/trace_while_executing2.c:59:5
  $esi = MOV32ri 4, debug-location !118; c/trace_while_executing2.c:59:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !118; c/trace_while_executing2.c:59:5
  JMP_1 %bb.5, debug-location !118; c/trace_while_executing2.c:59:5

bb.5 (%ir-block.25, bb_id 5):
; predecessors: %bb.1, %bb.2, %bb.4
  successors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 5, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !119; c/trace_while_executing2.c:60:1
  JMP_1 %bb.7, debug-location !119; c/trace_while_executing2.c:60:1

bb.6 (%ir-block.26, bb_id 6):
; predecessors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 6, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !119; c/trace_while_executing2.c:60:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !119 :: (load (s64) from got); c/trace_while_executing2.c:60:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $r12, debug-location !119 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:60:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags, debug-location !119; c/trace_while_executing2.c:60:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !119; c/trace_while_executing2.c:60:1
  RET64 debug-location !119; c/trace_while_executing2.c:60:1

bb.7 (%ir-block.27, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $r12
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !119; c/trace_while_executing2.c:60:1
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 7, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !119; c/trace_while_executing2.c:60:1
  JMP_1 %bb.6, debug-location !119; c/trace_while_executing2.c:60:1

# End machine code for function indirect.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: indirect
# Machine code for function indirect: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-56]
  fi#1: size=4, align=4, at location [SP-52]
  fi#2: size=8, align=8, at location [SP-80]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=8, align=8, at location [SP-64]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -48, $noreg, $r8d :: (store (s32) into %stack.0)
  MOV32mr $rbp, 1, $noreg, -44, $noreg, $ecx :: (store (s32) into %stack.1)
  MOV64mr $rbp, 1, $noreg, -72, $noreg, $rdx :: (store (s64) into %stack.2)
  MOV64mr $rbp, 1, $noreg, -64, $noreg, $rsi :: (store (s64) into %stack.3)
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rdi :: (store (s64) into %stack.4)
  $edi = MOV32ri 4
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $r12
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $r12
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $r13 = MOV64rr $r12
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 16, implicit-def dead $eflags
  $rbx = MOV64rr $r12
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 24, implicit-def dead $eflags
  $r15 = MOV64rr $r12
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 28, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !97; c/trace_while_executing2.c:57:21

bb.1 (%ir-block.13, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.5
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 4
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 9, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, 1, 4, $rbp, -48, 3, implicit-def dead early-clobber $r11, debug-location !110; c/trace_while_executing2.c:58:18
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.3)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.2)
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -44, $noreg :: (load (s32) from %stack.1)
  MOV32mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -48, $noreg :: (load (s32) from %stack.0)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  CMP32mi killed renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !109 :: (load (s32) from %ir.12); c/trace_while_executing2.c:58:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !109; c/trace_while_executing2.c:58:13
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !110; c/trace_while_executing2.c:58:18
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; c/trace_while_executing2.c:58:18
  JMP_1 %bb.5, debug-location !110; c/trace_while_executing2.c:58:18

bb.2 (%ir-block.16, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3, %bb.5
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !111; c/trace_while_executing2.c:58:21
  $esi = MOV32ri 2, debug-location !111; c/trace_while_executing2.c:58:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !111; c/trace_while_executing2.c:58:21
  STACKMAP 10, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !113; c/trace_while_executing2.c:58:7
  CMP32mi renamable $rbx, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !112 :: (load (s32) from %ir.11); c/trace_while_executing2.c:58:23
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !112; c/trace_while_executing2.c:58:23
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !113; c/trace_while_executing2.c:58:7
  JCC_1 %bb.3, 5, implicit killed $eflags, debug-location !113; c/trace_while_executing2.c:58:7
  JMP_1 %bb.5, debug-location !113; c/trace_while_executing2.c:58:7

bb.3 (%ir-block.19, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !114; c/trace_while_executing2.c:59:10
  $esi = MOV32ri 3, debug-location !114; c/trace_while_executing2.c:59:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/trace_while_executing2.c:59:10
  renamable $r15 = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !114 :: (load (s64) from %ir.8); c/trace_while_executing2.c:59:10
  renamable $r14 = MOV64rm killed renamable $r14, 1, $noreg, 0, $noreg, debug-location !115 :: (load (s64) from %ir.9); c/trace_while_executing2.c:59:14
  renamable $r13 = MOV64rm killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !116 :: (load (s64) from %ir.10); c/trace_while_executing2.c:59:20
  renamable $ebx = MOV32rm killed renamable $rbx, 1, $noreg, 0, $noreg, debug-location !117 :: (load (s32) from %ir.11); c/trace_while_executing2.c:59:26
  $rdi = MOV64rr $r15, debug-location !118; c/trace_while_executing2.c:59:5
  $rsi = MOV64rr $r14, debug-location !118; c/trace_while_executing2.c:59:5
  $rdx = MOV64rr $r13, debug-location !118; c/trace_while_executing2.c:59:5
  $ecx = MOV32rr $ebx, debug-location !118; c/trace_while_executing2.c:59:5
  $r8d = MOV32ri 1, debug-location !118; c/trace_while_executing2.c:59:5
  CALL64pcrel32 @loop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !118; c/trace_while_executing2.c:59:5
  STACKMAP 11, 0, renamable $r12, 3, killed renamable $r15, 3, killed renamable $r14, 3, killed renamable $r13, 3, killed renamable $ebx, 3, implicit-def dead early-clobber $r11, debug-location !118; c/trace_while_executing2.c:59:5
  JMP_1 %bb.4, debug-location !118; c/trace_while_executing2.c:59:5

bb.4 (%ir-block.24, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !118; c/trace_while_executing2.c:59:5
  $esi = MOV32ri 4, debug-location !118; c/trace_while_executing2.c:59:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !118; c/trace_while_executing2.c:59:5
  JMP_1 %bb.5, debug-location !118; c/trace_while_executing2.c:59:5

bb.5 (%ir-block.25, bb_id 5):
; predecessors: %bb.1, %bb.2, %bb.4
  successors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 5, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !119; c/trace_while_executing2.c:60:1
  JMP_1 %bb.7, debug-location !119; c/trace_while_executing2.c:60:1

bb.6 (%ir-block.26, bb_id 6):
; predecessors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 6, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !119; c/trace_while_executing2.c:60:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !119 :: (load (s64) from got); c/trace_while_executing2.c:60:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $r12, debug-location !119 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:60:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags, debug-location !119; c/trace_while_executing2.c:60:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !119; c/trace_while_executing2.c:60:1
  RET64 debug-location !119; c/trace_while_executing2.c:60:1

bb.7 (%ir-block.27, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $r12
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !119; c/trace_while_executing2.c:60:1
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 7, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !119; c/trace_while_executing2.c:60:1
  JMP_1 %bb.6, debug-location !119; c/trace_while_executing2.c:60:1

# End machine code for function indirect.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: indirect
# Machine code for function indirect: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-56]
  fi#1: size=4, align=4, at location [SP-52]
  fi#2: size=8, align=8, at location [SP-80]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=8, align=8, at location [SP-64]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -48, $noreg, $r8d :: (store (s32) into %stack.0)
  MOV32mr $rbp, 1, $noreg, -44, $noreg, $ecx :: (store (s32) into %stack.1)
  MOV64mr $rbp, 1, $noreg, -72, $noreg, $rdx :: (store (s64) into %stack.2)
  MOV64mr $rbp, 1, $noreg, -64, $noreg, $rsi :: (store (s64) into %stack.3)
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rdi :: (store (s64) into %stack.4)
  $edi = MOV32ri 4
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $r12
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $r12
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $r13 = MOV64rr $r12
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 16, implicit-def dead $eflags
  $rbx = MOV64rr $r12
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 24, implicit-def dead $eflags
  $r15 = MOV64rr $r12
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 28, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !97; c/trace_while_executing2.c:57:21

bb.1 (%ir-block.13, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.5
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 4
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  STACKMAP 9, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, 1, 4, $rbp, -48, 3, implicit-def dead early-clobber $r11, debug-location !110; c/trace_while_executing2.c:58:18
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.3)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.2)
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -44, $noreg :: (load (s32) from %stack.1)
  MOV32mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -48, $noreg :: (load (s32) from %stack.0)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  CMP32mi killed renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !109 :: (load (s32) from %ir.12); c/trace_while_executing2.c:58:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !109; c/trace_while_executing2.c:58:13
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !110; c/trace_while_executing2.c:58:18
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; c/trace_while_executing2.c:58:18
  JMP_1 %bb.5, debug-location !110; c/trace_while_executing2.c:58:18

bb.2 (%ir-block.16, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3, %bb.5
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !111; c/trace_while_executing2.c:58:21
  $esi = MOV32ri 2, debug-location !111; c/trace_while_executing2.c:58:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !111; c/trace_while_executing2.c:58:21
  STACKMAP 10, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !113; c/trace_while_executing2.c:58:7
  CMP32mi renamable $rbx, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !112 :: (load (s32) from %ir.11); c/trace_while_executing2.c:58:23
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !112; c/trace_while_executing2.c:58:23
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !113; c/trace_while_executing2.c:58:7
  JCC_1 %bb.3, 5, implicit killed $eflags, debug-location !113; c/trace_while_executing2.c:58:7
  JMP_1 %bb.5, debug-location !113; c/trace_while_executing2.c:58:7

bb.3 (%ir-block.19, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !106; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !104; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !102; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !100; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !114; c/trace_while_executing2.c:59:10
  $esi = MOV32ri 3, debug-location !114; c/trace_while_executing2.c:59:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/trace_while_executing2.c:59:10
  renamable $r15 = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !114 :: (load (s64) from %ir.8); c/trace_while_executing2.c:59:10
  renamable $r14 = MOV64rm killed renamable $r14, 1, $noreg, 0, $noreg, debug-location !115 :: (load (s64) from %ir.9); c/trace_while_executing2.c:59:14
  renamable $r13 = MOV64rm killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !116 :: (load (s64) from %ir.10); c/trace_while_executing2.c:59:20
  renamable $ebx = MOV32rm killed renamable $rbx, 1, $noreg, 0, $noreg, debug-location !117 :: (load (s32) from %ir.11); c/trace_while_executing2.c:59:26
  $rdi = MOV64rr $r15, debug-location !118; c/trace_while_executing2.c:59:5
  $rsi = MOV64rr $r14, debug-location !118; c/trace_while_executing2.c:59:5
  $rdx = MOV64rr $r13, debug-location !118; c/trace_while_executing2.c:59:5
  $ecx = MOV32rr $ebx, debug-location !118; c/trace_while_executing2.c:59:5
  $r8d = MOV32ri 1, debug-location !118; c/trace_while_executing2.c:59:5
  CALL64pcrel32 @loop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !118; c/trace_while_executing2.c:59:5
  STACKMAP 11, 0, renamable $r12, 3, killed renamable $r15, 3, killed renamable $r14, 3, killed renamable $r13, 3, killed renamable $ebx, 3, implicit-def dead early-clobber $r11, debug-location !118; c/trace_while_executing2.c:59:5
  JMP_1 %bb.4, debug-location !118; c/trace_while_executing2.c:59:5

bb.4 (%ir-block.24, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !118; c/trace_while_executing2.c:59:5
  $esi = MOV32ri 4, debug-location !118; c/trace_while_executing2.c:59:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !118; c/trace_while_executing2.c:59:5
  JMP_1 %bb.5, debug-location !118; c/trace_while_executing2.c:59:5

bb.5 (%ir-block.25, bb_id 5):
; predecessors: %bb.1, %bb.2, %bb.4
  successors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 5, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !119; c/trace_while_executing2.c:60:1
  JMP_1 %bb.7, debug-location !119; c/trace_while_executing2.c:60:1

bb.6 (%ir-block.26, bb_id 6):
; predecessors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 6, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !119; c/trace_while_executing2.c:60:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !119 :: (load (s64) from got); c/trace_while_executing2.c:60:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $r12, debug-location !119 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:60:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags, debug-location !119; c/trace_while_executing2.c:60:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !119; c/trace_while_executing2.c:60:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !119; c/trace_while_executing2.c:60:1
  RET64 debug-location !119; c/trace_while_executing2.c:60:1

bb.7 (%ir-block.27, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $r12
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !119; c/trace_while_executing2.c:60:1
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !97; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 4, debug-location !119; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 7, debug-location !119; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !119; c/trace_while_executing2.c:60:1
  JMP_1 %bb.6, debug-location !119; c/trace_while_executing2.c:60:1

# End machine code for function indirect.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-48]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14d = MOV32rr $edi
  $edi = MOV32ri 5
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 16, implicit-def dead $eflags
  renamable $rdx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rdx, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r15 = MOV64rr $rax
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 8, implicit-def dead $eflags
  MOV32mi renamable $rax, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)
  MOV32mr killed renamable $rax, 1, $noreg, 4, $noreg, killed renamable $r14d :: (store (s32) into %ir.6)
  JMP_1 %bb.1, debug-location !125; c/trace_while_executing2.c:62:14

bb.1 (%ir-block.11, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r15
  $edi = MOV32ri 5
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !125; c/trace_while_executing2.c:62:14 line no:62
  MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.7)
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !128; c/trace_while_executing2.c:62:27 line no:62
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !131; c/trace_while_executing2.c:63:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !131; c/trace_while_executing2.c:63:14
  $rbx = MOV64rr $rax, debug-location !131; c/trace_while_executing2.c:63:14
  JMP_1 %bb.2, debug-location !130; c/trace_while_executing2.c:63:9

bb.2 (%ir-block.13, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx
  $edi = MOV32ri 5, debug-location !130; c/trace_while_executing2.c:63:9
  $esi = MOV32ri 2, debug-location !130; c/trace_while_executing2.c:63:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !130; c/trace_while_executing2.c:63:9
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx, debug-location !130 :: (store (s64) into %ir.8); c/trace_while_executing2.c:63:9
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg, debug-location !132 :: (load (s64) from %ir.8); c/trace_while_executing2.c:64:27
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !133; c/trace_while_executing2.c:64:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !133; c/trace_while_executing2.c:64:3
  JMP_1 %bb.3, debug-location !134; c/trace_while_executing2.c:65:14

bb.3 (%ir-block.15, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4

  $edi = MOV32ri 5, debug-location !135; c/trace_while_executing2.c:65:21
  $esi = MOV32ri 3, debug-location !135; c/trace_while_executing2.c:65:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !135; c/trace_while_executing2.c:65:21
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !135; c/trace_while_executing2.c:65:21
  $rbx = MOV64rr $rax, debug-location !135; c/trace_while_executing2.c:65:21
  JMP_1 %bb.4, debug-location !135; c/trace_while_executing2.c:65:21

bb.4 (%ir-block.17, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx
  $edi = MOV32ri 5, debug-location !135; c/trace_while_executing2.c:65:21
  $esi = MOV32ri 4, debug-location !135; c/trace_while_executing2.c:65:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !135; c/trace_while_executing2.c:65:21
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !135 :: (store (s64) into %ir.18); c/trace_while_executing2.c:65:21
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !139; c/trace_while_executing2.c:66:21
  $rbx = MOV64rr $rax, debug-location !139; c/trace_while_executing2.c:66:21
  JMP_1 %bb.5, debug-location !139; c/trace_while_executing2.c:66:21

bb.5 (%ir-block.20, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx
  $edi = MOV32ri 5, debug-location !139; c/trace_while_executing2.c:66:21
  $esi = MOV32ri 5, debug-location !139; c/trace_while_executing2.c:66:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !139; c/trace_while_executing2.c:66:21
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rbx, debug-location !139 :: (store (s64) into %ir.21); c/trace_while_executing2.c:66:21
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -32, $noreg, debug-location !140 :: (load (s64) from %ir.8); c/trace_while_executing2.c:68:8
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !141; c/trace_while_executing2.c:68:3
  renamable $rdx = LEA64r $rbp, 1, $noreg, -40, $noreg, debug-location !141; c/trace_while_executing2.c:68:3
  $rdi = MOV64rr $rbx, debug-location !141; c/trace_while_executing2.c:68:3
  $ecx = MOV32ri 5, debug-location !141; c/trace_while_executing2.c:68:3
  $r8d = XOR32rr undef $r8d(tied-def 0), undef $r8d, implicit-def dead $eflags, debug-location !141; c/trace_while_executing2.c:68:3
  CALL64pcrel32 @loop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit killed $r8d, debug-location !141; c/trace_while_executing2.c:68:3
  STACKMAP 12, 0, 0, $rbp, -32, 3, 0, $rbp, -48, 3, 0, $rbp, -40, 3, killed renamable $rbx, 3, implicit-def dead early-clobber $r11, debug-location !142; c/trace_while_executing2.c:69:11
  JMP_1 %bb.6, debug-location !142; c/trace_while_executing2.c:69:11

bb.6 (%ir-block.23, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7

  $edi = MOV32ri 5, debug-location !142; c/trace_while_executing2.c:69:11
  $esi = MOV32ri 6, debug-location !142; c/trace_while_executing2.c:69:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !142; c/trace_while_executing2.c:69:11
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !142 :: (load (s64) from @stderr); c/trace_while_executing2.c:69:11
  renamable $rsi = MOV64ri @.str.1, debug-location !143; c/trace_while_executing2.c:69:3
  $al = MOV8ri 0, debug-location !143; c/trace_while_executing2.c:69:3
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax, debug-location !143; c/trace_while_executing2.c:69:3
  JMP_1 %bb.7, debug-location !144; c/trace_while_executing2.c:70:3

bb.7 (%ir-block.26, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8

  $edi = MOV32ri 5, debug-location !144; c/trace_while_executing2.c:70:3
  $esi = MOV32ri 7, debug-location !144; c/trace_while_executing2.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !144; c/trace_while_executing2.c:70:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !144 :: (load (s64) from %ir.27); c/trace_while_executing2.c:70:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !144; c/trace_while_executing2.c:70:3
  JMP_1 %bb.8, debug-location !145; c/trace_while_executing2.c:71:3

bb.8 (%ir-block.29, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9

  $edi = MOV32ri 5, debug-location !145; c/trace_while_executing2.c:71:3
  $esi = MOV32ri 8, debug-location !145; c/trace_while_executing2.c:71:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !145; c/trace_while_executing2.c:71:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -40, $noreg, debug-location !145 :: (load (s64) from %ir.30); c/trace_while_executing2.c:71:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !145; c/trace_while_executing2.c:71:3
  JMP_1 %bb.9, debug-location !146; c/trace_while_executing2.c:72:18

bb.9 (%ir-block.32, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10

  $edi = MOV32ri 5, debug-location !146; c/trace_while_executing2.c:72:18
  $esi = MOV32ri 9, debug-location !146; c/trace_while_executing2.c:72:18
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !146; c/trace_while_executing2.c:72:18
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg, debug-location !146 :: (load (s64) from %ir.8); c/trace_while_executing2.c:72:18
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !147; c/trace_while_executing2.c:72:3
  JMP_1 %bb.10, debug-location !148; c/trace_while_executing2.c:73:3

bb.10 (%ir-block.34, bb_id 10):
; predecessors: %bb.9
  successors: %bb.12

  $edi = MOV32ri 5, debug-location !148; c/trace_while_executing2.c:73:3
  $esi = MOV32ri 10, debug-location !148; c/trace_while_executing2.c:73:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !148; c/trace_while_executing2.c:73:3
  JMP_1 %bb.12, debug-location !148; c/trace_while_executing2.c:73:3

bb.11 (%ir-block.35, bb_id 11):
; predecessors: %bb.12

  $edi = MOV32ri 5, debug-location !148; c/trace_while_executing2.c:73:3
  $esi = MOV32ri 11, debug-location !148; c/trace_while_executing2.c:73:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !148; c/trace_while_executing2.c:73:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !148; c/trace_while_executing2.c:73:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !148; c/trace_while_executing2.c:73:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !148; c/trace_while_executing2.c:73:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !148; c/trace_while_executing2.c:73:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !148; c/trace_while_executing2.c:73:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !148; c/trace_while_executing2.c:73:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !148; c/trace_while_executing2.c:73:3
  RET64 implicit $eax, debug-location !148; c/trace_while_executing2.c:73:3

bb.12 (%ir-block.36, bb_id 12):
; predecessors: %bb.10
  successors: %bb.11

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !148; c/trace_while_executing2.c:73:3
  $edi = MOV32ri 5, debug-location !148; c/trace_while_executing2.c:73:3
  $esi = MOV32ri 12, debug-location !148; c/trace_while_executing2.c:73:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !148; c/trace_while_executing2.c:73:3
  JMP_1 %bb.11, debug-location !148; c/trace_while_executing2.c:73:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_loop
# Machine code for function __yk_unopt_loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = MOV32ri 11
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !150; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 11
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"loc", !DIExpression(), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !162 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !161 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !165 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !165; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  STACKMAP 3, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, renamable $rcx, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !166; c/trace_while_executing2.c:40:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  $r15 = MOV64rr killed $r14
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !166; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !167; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !167; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !167; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !167 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !168 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !169; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !170; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !170; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !171; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !171; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !171; c/trace_while_executing2.c:42:10
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !172 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !172; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !170; c/trace_while_executing2.c:42:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !170; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !173; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !173; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r12 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r15 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r15 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !173; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !173 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !175 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !176; c/trace_while_executing2.c:43:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !176 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !177; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !177; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !177; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !177; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !177 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !178 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !179 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !180; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !180; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !180; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !181; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !181; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !181; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !181; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !183 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !183; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  STACKMAP 13, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !184; c/trace_while_executing2.c:45:9
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !184; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !185; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !185; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !185; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !188 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !188; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 14, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r15, 3, renamable $r14, 3, killed renamable $r12, 3, killed renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !189; c/trace_while_executing2.c:46:11
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  $r15 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !189; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !190; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !190; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !190; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !190 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !191 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !192; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !193; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !193; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !193; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !193; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !194; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !194; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !195; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !195; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !195; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !195 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r15, 1, $noreg, 0, $noreg, debug-location !196 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !197 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !198 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r15d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !199 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r15d, debug-location !200; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @__yk_unopt_indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !200; c/trace_while_executing2.c:51:5
  STACKMAP 15, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r15d, 3, implicit-def dead early-clobber $r11, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !201; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !201; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !201; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !201 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !201; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !201 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !204; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !204; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !204; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !204 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !204 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !204; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !204; c/trace_while_executing2.c:54:1
  RET64 debug-location !204; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !204; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !204; c/trace_while_executing2.c:54:1

# End machine code for function __yk_unopt_loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_loop
# Machine code for function __yk_unopt_loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = MOV32ri 11
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !150; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 11
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"loc", !DIExpression(), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !162 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !161 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !165 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !165; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  STACKMAP 3, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, renamable $rcx, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !166; c/trace_while_executing2.c:40:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  $r15 = MOV64rr killed $r14
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !166; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !167; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !167; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !167; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !167 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !168 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !169; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !170; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !170; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !171; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !171; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !171; c/trace_while_executing2.c:42:10
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !172 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !172; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !170; c/trace_while_executing2.c:42:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !170; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !173; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !173; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r12 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r15 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r15 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !173; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !173 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !175 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !176; c/trace_while_executing2.c:43:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !176 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !177; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !177; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !177; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !177; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !177 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !178 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !179 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !180; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !180; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !180; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !181; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !181; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !181; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !181; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !183 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !183; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  STACKMAP 13, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !184; c/trace_while_executing2.c:45:9
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !184; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !185; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !185; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !185; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !188 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !188; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 14, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r15, 3, renamable $r14, 3, killed renamable $r12, 3, killed renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !189; c/trace_while_executing2.c:46:11
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  $r15 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !189; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !190; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !190; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !190; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !190 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !191 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !192; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !193; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !193; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !193; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !193; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !194; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !194; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !195; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !195; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !195; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !195 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r15, 1, $noreg, 0, $noreg, debug-location !196 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !197 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !198 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r15d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !199 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r15d, debug-location !200; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @__yk_unopt_indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !200; c/trace_while_executing2.c:51:5
  STACKMAP 15, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r15d, 3, implicit-def dead early-clobber $r11, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !201; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !201; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !201; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !201 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !201; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !201 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !204; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !204; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !204; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !204 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !204 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !204; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !204; c/trace_while_executing2.c:54:1
  RET64 debug-location !204; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !204; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !204; c/trace_while_executing2.c:54:1

# End machine code for function __yk_unopt_loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_loop
# Machine code for function __yk_unopt_loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = MOV32ri 11
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !150; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 11
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"loc", !DIExpression(), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !162 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !161 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !165 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !165; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  STACKMAP 3, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, renamable $rcx, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !166; c/trace_while_executing2.c:40:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  $r15 = MOV64rr killed $r14
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !166; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !167; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !167; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !167; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !167 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !168 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !169; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !170; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !170; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !171; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !171; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !171; c/trace_while_executing2.c:42:10
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !172 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !172; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !170; c/trace_while_executing2.c:42:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !170; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !173; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !173; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r12 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r15 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r15 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !173; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !173 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !175 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !176; c/trace_while_executing2.c:43:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !176 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !177; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !177; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !177; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !177; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !177 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !178 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !179 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !180; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !180; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !180; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !181; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !181; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !181; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !181; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !183 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !183; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  STACKMAP 13, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !184; c/trace_while_executing2.c:45:9
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !184; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !185; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !185; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !185; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !188 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !188; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 14, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r15, 3, renamable $r14, 3, killed renamable $r12, 3, killed renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !189; c/trace_while_executing2.c:46:11
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  $r15 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !189; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !190; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !190; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !190; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !190 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !191 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !192; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !193; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !193; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !193; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !193; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !194; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !194; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !195; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !195; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !195; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !195 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r15, 1, $noreg, 0, $noreg, debug-location !196 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !197 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !198 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r15d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !199 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r15d, debug-location !200; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @__yk_unopt_indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !200; c/trace_while_executing2.c:51:5
  STACKMAP 15, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r15d, 3, implicit-def dead early-clobber $r11, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !201; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !201; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !201; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !201 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !201; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !201 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !204; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !204; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !204; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !204 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !204 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !204; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !204; c/trace_while_executing2.c:54:1
  RET64 debug-location !204; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !204; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !204; c/trace_while_executing2.c:54:1

# End machine code for function __yk_unopt_loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_loop
# Machine code for function __yk_unopt_loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = MOV32ri 11
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !150; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 11
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"loc", !DIExpression(), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !162 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !161 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !165 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !165; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  STACKMAP 3, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, renamable $rcx, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !166; c/trace_while_executing2.c:40:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  $r15 = MOV64rr killed $r14
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !166; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !167; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !167; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !167; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !167 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !168 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !169; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !170; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !170; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !171; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !171; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !171; c/trace_while_executing2.c:42:10
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !172 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !172; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !170; c/trace_while_executing2.c:42:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !170; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !173; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !173; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r12 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r15 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r15 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !173; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !173 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !175 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !176; c/trace_while_executing2.c:43:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !176 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !177; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !177; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !177; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !177; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !177 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !178 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !179 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !180; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !180; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !180; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !181; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !181; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !181; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !181; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !183 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !183; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  STACKMAP 13, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !184; c/trace_while_executing2.c:45:9
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !184; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !185; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !185; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !185; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !188 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !188; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 14, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r15, 3, renamable $r14, 3, killed renamable $r12, 3, killed renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !189; c/trace_while_executing2.c:46:11
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  $r15 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !189; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !190; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !190; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !190; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !190 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !191 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !192; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !193; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !193; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !193; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !193; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !194; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !194; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !195; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !195; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !195; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !195 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r15, 1, $noreg, 0, $noreg, debug-location !196 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !197 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !198 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r15d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !199 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r15d, debug-location !200; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @__yk_unopt_indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !200; c/trace_while_executing2.c:51:5
  STACKMAP 15, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r15d, 3, implicit-def dead early-clobber $r11, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !201; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !201; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !201; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !201 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !201; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !201 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !204; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !204; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !204; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !204 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !204 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !204; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !204; c/trace_while_executing2.c:54:1
  RET64 debug-location !204; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !204; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !204; c/trace_while_executing2.c:54:1

# End machine code for function __yk_unopt_loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_loop
# Machine code for function __yk_unopt_loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = MOV32ri 11
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !150; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 11
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"loc", !DIExpression(), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !162 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !161 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !165 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !165; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  STACKMAP 3, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, renamable $rcx, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !166; c/trace_while_executing2.c:40:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  $r15 = MOV64rr killed $r14
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !166; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !167; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !167; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !167; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !167 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !168 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !169; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !170; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !170; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !171; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !171; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !171; c/trace_while_executing2.c:42:10
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !172 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !172; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !170; c/trace_while_executing2.c:42:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !170; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !173; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !173; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r12 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r15 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r15 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !173; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !173 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !175 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !176; c/trace_while_executing2.c:43:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !176 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !177; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !177; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !177; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !177; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !177 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !178 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !179 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !180; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !180; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !180; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !181; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !181; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !181; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !181; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !183 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !183; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  STACKMAP 13, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !184; c/trace_while_executing2.c:45:9
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !184; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !185; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !185; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !185; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !188 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !188; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 14, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r15, 3, renamable $r14, 3, killed renamable $r12, 3, killed renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !189; c/trace_while_executing2.c:46:11
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  $r15 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !189; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !190; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !190; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !190; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !190 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !191 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !192; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !193; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !193; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !193; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !193; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !194; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !194; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !195; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !195; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !195; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !195 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r15, 1, $noreg, 0, $noreg, debug-location !196 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !197 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !198 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r15d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !199 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r15d, debug-location !200; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @__yk_unopt_indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !200; c/trace_while_executing2.c:51:5
  STACKMAP 15, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r15d, 3, implicit-def dead early-clobber $r11, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !201; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !201; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !201; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !201 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !201; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !201 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !204; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !204; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !204; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !204 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !204 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !204; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !204; c/trace_while_executing2.c:54:1
  RET64 debug-location !204; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !204; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !204; c/trace_while_executing2.c:54:1

# End machine code for function __yk_unopt_loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_loop
# Machine code for function __yk_unopt_loop: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-72]
  fi#1: size=8, align=8, at location [SP-64]
  fi#2: size=8, align=8, at location [SP-88]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=4, align=4, at location [SP-100]
  fi#6: size=4, align=4, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-160]
  fi#8: size=8, align=8, at location [SP-152]
  fi#9: size=8, align=8, at location [SP-144]
  fi#10: size=8, align=8, at location [SP-136]
  fi#11: size=8, align=8, at location [SP-128]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-112]
  fi#14: size=4, align=4, at location [SP-92]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -92, $noreg, $r8d :: (store (s32) into %stack.5)
  MOV32mr $rbp, 1, $noreg, -88, $noreg, $ecx :: (store (s32) into %stack.6)
  MOV64mr $rbp, 1, $noreg, -152, $noreg, $rdx :: (store (s64) into %stack.7)
  MOV64mr $rbp, 1, $noreg, -144, $noreg, $rsi :: (store (s64) into %stack.8)
  MOV64mr $rbp, 1, $noreg, -128, $noreg, $rdi :: (store (s64) into %stack.10)
  $edi = MOV32ri 11
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $rbx
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 40, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $rbx
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $rax = MOV64rr $rbx
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -136, $noreg, killed renamable $rax :: (store (s64) into %stack.9)
  $r12 = MOV64rr $rbx
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 24, implicit-def dead $eflags
  $r13 = MOV64rr $rbx
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 28, implicit-def dead $eflags
  $r15 = MOV64rr $rbx
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 32, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -128, $noreg :: (load (s64) from %stack.10)
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !150; c/trace_while_executing2.c:38:17

bb.1 (%ir-block.14, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 11
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -144, $noreg :: (load (s64) from %stack.8)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -152, $noreg :: (load (s64) from %stack.7)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -136, $noreg :: (load (s64) from %stack.9)
  MOV64mr renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $rcx, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -88, $noreg :: (load (s32) from %stack.6)
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -92, $noreg :: (load (s32) from %stack.5)
  MOV32mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"loc", !DIExpression(), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !162 :: (load (s64) from %ir.9); c/trace_while_executing2.c:39:21
  MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !161 :: (store (s64) into %ir.13); c/trace_while_executing2.c:39:15
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !165 :: (load (s32) from %ir.12); c/trace_while_executing2.c:40:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !165; c/trace_while_executing2.c:40:13
  MOV64mr $rbp, 1, $noreg, -56, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  STACKMAP 3, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r14, 3, renamable $rcx, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !166; c/trace_while_executing2.c:40:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  $r15 = MOV64rr killed $r14
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r14 = MOV64rr killed $rcx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !166; c/trace_while_executing2.c:40:7
  JMP_1 %bb.3, debug-location !166; c/trace_while_executing2.c:40:7

bb.2 (%ir-block.18, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !167; c/trace_while_executing2.c:41:11
  $esi = MOV32ri 2, debug-location !167; c/trace_while_executing2.c:41:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !167; c/trace_while_executing2.c:41:11
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !167 :: (load (s64) from %ir.10); c/trace_while_executing2.c:41:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !168 :: (store (s64) into %ir.13); c/trace_while_executing2.c:41:9
  JMP_1 %bb.3, debug-location !169; c/trace_while_executing2.c:41:5

bb.3 (%ir-block.20, bb_id 3):
; predecessors: %bb.1, %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  DBG_VALUE $rbx, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  $edi = MOV32ri 11, debug-location !170; c/trace_while_executing2.c:42:3
  $esi = MOV32ri 3, debug-location !170; c/trace_while_executing2.c:42:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.4 (%ir-block.21, bb_id 4):
; predecessors: %bb.3, %bb.13
  successors: %bb.5, %bb.14
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !171; c/trace_while_executing2.c:42:10
  $esi = MOV32ri 4, debug-location !171; c/trace_while_executing2.c:42:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !171; c/trace_while_executing2.c:42:10
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !172 :: (load (s32) from %ir.11); c/trace_while_executing2.c:42:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !172; c/trace_while_executing2.c:42:12
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !170; c/trace_while_executing2.c:42:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !170; c/trace_while_executing2.c:42:3
  JMP_1 %bb.14, debug-location !170; c/trace_while_executing2.c:42:3

bb.5 (%ir-block.24, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $rcx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !173; c/trace_while_executing2.c:43:25
  $esi = MOV32ri 5, debug-location !173; c/trace_while_executing2.c:43:25
  MOV64mr $rbp, 1, $noreg, -80, $noreg, killed renamable $r13 :: (store (s64) into %stack.2)
  DBG_VALUE $rbp, 0, !"depth", !DIExpression(DW_OP_constu, 80, DW_OP_minus, DW_OP_deref), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx :: (store (s64) into %stack.3)
  DBG_VALUE $rbp, 0, !"mt", !DIExpression(DW_OP_constu, 48, DW_OP_minus, DW_OP_deref), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -72, $noreg, killed renamable $r12 :: (store (s64) into %stack.4)
  DBG_VALUE $rbp, 0, !"i", !DIExpression(DW_OP_constu, 72, DW_OP_minus, DW_OP_deref), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  MOV64mr $rbp, 1, $noreg, -64, $noreg, killed renamable $r15 :: (store (s64) into %stack.0)
  DBG_VALUE $rbp, 0, !"loc1", !DIExpression(DW_OP_constu, 64, DW_OP_minus, DW_OP_deref), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  $r15 = MOV64rr killed $rcx
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !173; c/trace_while_executing2.c:43:25
  renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  DBG_VALUE $rax, 0, !"mt", !DIExpression(), debug-location !150; c/trace_while_executing2.c:38:17 line no:38 indirect
  renamable $rdi = MOV64rm killed renamable $rax, 1, $noreg, 0, $noreg, debug-location !173 :: (load (s64) from %ir.8); c/trace_while_executing2.c:43:25
  renamable $rsi = MOV64rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !175 :: (load (s64) from %ir.13); c/trace_while_executing2.c:43:29
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !176; c/trace_while_executing2.c:43:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -48, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, 1, 8, $rbp, -72, 3, 1, 8, $rbp, -80, 3, killed renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bp, $bph, $bpl, $ebp, $hbp, $rbp, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !176 :: (load (s64) from %stack.2), (load (s64) from %stack.3), (load (s64) from %stack.4), (load (s64) from %stack.0); c/trace_while_executing2.c:43:5
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  DBG_VALUE $r15, 0, !"loc1", !DIExpression(), debug-location !153; c/trace_while_executing2.c:38:33 line no:38 indirect
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !157; c/trace_while_executing2.c:38:61 line no:38 indirect
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  DBG_VALUE $r13, 0, !"depth", !DIExpression(), debug-location !159; c/trace_while_executing2.c:38:68 line no:38 indirect
  JMP_1 %bb.6, debug-location !177; c/trace_while_executing2.c:44:13

bb.6 (%ir-block.27, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !177; c/trace_while_executing2.c:44:13
  $esi = MOV32ri 6, debug-location !177; c/trace_while_executing2.c:44:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !177; c/trace_while_executing2.c:44:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !177 :: (load (s64) from @stderr); c/trace_while_executing2.c:44:13
  renamable $edx = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !178 :: (load (s32) from %ir.12); c/trace_while_executing2.c:44:33
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !179 :: (load (s32) from %ir.11); c/trace_while_executing2.c:44:40
  renamable $rsi = MOV64ri @.str, debug-location !180; c/trace_while_executing2.c:44:5
  $al = MOV8ri 0, debug-location !180; c/trace_while_executing2.c:44:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit-def $eax, debug-location !180; c/trace_while_executing2.c:44:5
  JMP_1 %bb.7, debug-location !181; c/trace_while_executing2.c:45:9

bb.7 (%ir-block.32, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8, %bb.12
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !181; c/trace_while_executing2.c:45:9
  $esi = MOV32ri 7, debug-location !181; c/trace_while_executing2.c:45:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !181; c/trace_while_executing2.c:45:9
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !183 :: (load (s32) from %ir.11); c/trace_while_executing2.c:45:11
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !183; c/trace_while_executing2.c:45:11
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  STACKMAP 13, 0, renamable $rbx, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, killed renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !184; c/trace_while_executing2.c:45:9
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !184; c/trace_while_executing2.c:45:9
  JMP_1 %bb.12, debug-location !184; c/trace_while_executing2.c:45:9

bb.8 (%ir-block.35, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9, %bb.10
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !185; c/trace_while_executing2.c:46:11
  $esi = MOV32ri 8, debug-location !185; c/trace_while_executing2.c:46:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !185; c/trace_while_executing2.c:46:11
  CMP32mi renamable $r13, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !188 :: (load (s32) from %ir.12); c/trace_while_executing2.c:46:17
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !188; c/trace_while_executing2.c:46:17
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.1)
  STACKMAP 14, 0, killed renamable $rbx, 3, renamable $rbx, 3, killed renamable $r15, 3, renamable $r14, 3, killed renamable $r12, 3, killed renamable $r13, 3, renamable $rcx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !189; c/trace_while_executing2.c:46:11
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  $r15 = MOV64rr killed $rcx
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !189; c/trace_while_executing2.c:46:11
  JMP_1 %bb.10, debug-location !189; c/trace_while_executing2.c:46:11

bb.9 (%ir-block.38, bb_id 9):
; predecessors: %bb.8
  successors: %bb.11
  liveins: $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !190; c/trace_while_executing2.c:47:15
  $esi = MOV32ri 9, debug-location !190; c/trace_while_executing2.c:47:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !190; c/trace_while_executing2.c:47:15
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !190 :: (load (s64) from %ir.10); c/trace_while_executing2.c:47:15
  MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !191 :: (store (s64) into %ir.13); c/trace_while_executing2.c:47:13
  JMP_1 %bb.11, debug-location !192; c/trace_while_executing2.c:47:9

bb.10 (%ir-block.40, bb_id 10):
; predecessors: %bb.8
  successors: %bb.15

  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !193; c/trace_while_executing2.c:49:9
  $esi = MOV32ri 10, debug-location !193; c/trace_while_executing2.c:49:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !193; c/trace_while_executing2.c:49:9
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  JMP_1 %bb.15, debug-location !193; c/trace_while_executing2.c:49:9

bb.11 (%ir-block.41, bb_id 11):
; predecessors: %bb.9
  successors: %bb.12
  liveins: $r14
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  $esi = MOV32ri 11, debug-location !194; c/trace_while_executing2.c:50:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !194; c/trace_while_executing2.c:50:5
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -80, $noreg :: (load (s64) from %stack.2)
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -48, $noreg :: (load (s64) from %stack.3)
  renamable $r12 = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.4)
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.12, debug-location !194; c/trace_while_executing2.c:50:5

bb.12 (%ir-block.42, bb_id 12):
; predecessors: %bb.7, %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !195; c/trace_while_executing2.c:51:14
  $esi = MOV32ri 12, debug-location !195; c/trace_while_executing2.c:51:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !195; c/trace_while_executing2.c:51:14
  renamable $rdi = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !195 :: (load (s64) from %ir.8); c/trace_while_executing2.c:51:14
  MOV64mr $rbp, 1, $noreg, -120, $noreg, renamable $rdi :: (store (s64) into %stack.11)
  renamable $rsi = MOV64rm killed renamable $r15, 1, $noreg, 0, $noreg, debug-location !196 :: (load (s64) from %ir.9); c/trace_while_executing2.c:51:18
  MOV64mr $rbp, 1, $noreg, -112, $noreg, renamable $rsi :: (store (s64) into %stack.12)
  renamable $rdx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !197 :: (load (s64) from %ir.10); c/trace_while_executing2.c:51:24
  MOV64mr $rbp, 1, $noreg, -104, $noreg, renamable $rdx :: (store (s64) into %stack.13)
  renamable $ecx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !198 :: (load (s32) from %ir.11); c/trace_while_executing2.c:51:30
  MOV32mr $rbp, 1, $noreg, -84, $noreg, renamable $ecx :: (store (s32) into %stack.14)
  renamable $r15d = MOV32rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !199 :: (load (s32) from %ir.12); c/trace_while_executing2.c:51:33
  $r8d = MOV32rr $r15d, debug-location !200; c/trace_while_executing2.c:51:5
  CALL64pcrel32 @__yk_unopt_indirect, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !200; c/trace_while_executing2.c:51:5
  STACKMAP 15, 0, renamable $rbx, 3, renamable $rbx, 3, 1, 8, $rbp, -64, 3, renamable $r14, 3, renamable $r12, 3, renamable $r13, 3, 1, 8, $rbp, -56, 3, 1, 8, $rbp, -120, 3, 1, 8, $rbp, -112, 3, 1, 8, $rbp, -104, 3, 1, 4, $rbp, -84, 3, killed renamable $r15d, 3, implicit-def dead early-clobber $r11, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.0)
  JMP_1 %bb.13, debug-location !201; c/trace_while_executing2.c:52:6

bb.13 (%ir-block.48, bb_id 13):
; predecessors: %bb.12
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !201; c/trace_while_executing2.c:52:6
  $esi = MOV32ri 13, debug-location !201; c/trace_while_executing2.c:52:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !201; c/trace_while_executing2.c:52:6
  renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !201 :: (load (s32) from %ir.11); c/trace_while_executing2.c:52:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !201; c/trace_while_executing2.c:52:6
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !201 :: (store (s32) into %ir.11); c/trace_while_executing2.c:52:6
  JMP_1 %bb.4, debug-location !170; c/trace_while_executing2.c:42:3

bb.14 (%ir-block.51, bb_id 14):
; predecessors: %bb.4
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 14, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.15, debug-location !204; c/trace_while_executing2.c:54:1

bb.15 (%ir-block.52, bb_id 15):
; predecessors: %bb.14, %bb.10
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 15, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.17, debug-location !204; c/trace_while_executing2.c:54:1

bb.16 (%ir-block.53, bb_id 16):
; predecessors: %bb.17
  liveins: $rbx
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 16, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !204; c/trace_while_executing2.c:54:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !204 :: (load (s64) from got); c/trace_while_executing2.c:54:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rbx, debug-location !204 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:54:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 120, implicit-def dead $eflags, debug-location !204; c/trace_while_executing2.c:54:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !204; c/trace_while_executing2.c:54:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !204; c/trace_while_executing2.c:54:1
  RET64 debug-location !204; c/trace_while_executing2.c:54:1

bb.17 (%ir-block.54, bb_id 17):
; predecessors: %bb.15
  successors: %bb.16
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !204; c/trace_while_executing2.c:54:1
  DBG_VALUE $r14, 0, !"loc2", !DIExpression(), debug-location !155; c/trace_while_executing2.c:38:51 line no:38 indirect
  DBG_VALUE $rbp, 0, !"loc", !DIExpression(DW_OP_constu, 56, DW_OP_minus, DW_OP_deref), debug-location !161; c/trace_while_executing2.c:39:15 line no:39 indirect
  $edi = MOV32ri 11, debug-location !204; c/trace_while_executing2.c:54:1
  $esi = MOV32ri 17, debug-location !204; c/trace_while_executing2.c:54:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !204; c/trace_while_executing2.c:54:1
  JMP_1 %bb.16, debug-location !204; c/trace_while_executing2.c:54:1

# End machine code for function __yk_unopt_loop.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_indirect
# Machine code for function __yk_unopt_indirect: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-56]
  fi#1: size=4, align=4, at location [SP-52]
  fi#2: size=8, align=8, at location [SP-80]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=8, align=8, at location [SP-64]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -48, $noreg, $r8d :: (store (s32) into %stack.0)
  MOV32mr $rbp, 1, $noreg, -44, $noreg, $ecx :: (store (s32) into %stack.1)
  MOV64mr $rbp, 1, $noreg, -72, $noreg, $rdx :: (store (s64) into %stack.2)
  MOV64mr $rbp, 1, $noreg, -64, $noreg, $rsi :: (store (s64) into %stack.3)
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rdi :: (store (s64) into %stack.4)
  $edi = MOV32ri 12
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $r12
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $r12
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $r13 = MOV64rr $r12
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 16, implicit-def dead $eflags
  $rbx = MOV64rr $r12
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 24, implicit-def dead $eflags
  $r15 = MOV64rr $r12
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 28, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !206; c/trace_while_executing2.c:57:21

bb.1 (%ir-block.13, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.5
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 12
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.3)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.2)
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -44, $noreg :: (load (s32) from %stack.1)
  MOV32mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -48, $noreg :: (load (s32) from %stack.0)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  CMP32mi killed renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !218 :: (load (s32) from %ir.12); c/trace_while_executing2.c:58:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/trace_while_executing2.c:58:13
  STACKMAP 16, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219; c/trace_while_executing2.c:58:18
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/trace_while_executing2.c:58:18
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !219; c/trace_while_executing2.c:58:18
  JMP_1 %bb.5, debug-location !219; c/trace_while_executing2.c:58:18

bb.2 (%ir-block.16, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3, %bb.5
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !220; c/trace_while_executing2.c:58:21
  $esi = MOV32ri 2, debug-location !220; c/trace_while_executing2.c:58:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !220; c/trace_while_executing2.c:58:21
  CMP32mi renamable $rbx, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !221 :: (load (s32) from %ir.11); c/trace_while_executing2.c:58:23
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !221; c/trace_while_executing2.c:58:23
  STACKMAP 17, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !222; c/trace_while_executing2.c:58:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !222; c/trace_while_executing2.c:58:7
  JCC_1 %bb.3, 5, implicit killed $eflags, debug-location !222; c/trace_while_executing2.c:58:7
  JMP_1 %bb.5, debug-location !222; c/trace_while_executing2.c:58:7

bb.3 (%ir-block.19, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !223; c/trace_while_executing2.c:59:10
  $esi = MOV32ri 3, debug-location !223; c/trace_while_executing2.c:59:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !223; c/trace_while_executing2.c:59:10
  renamable $r15 = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !223 :: (load (s64) from %ir.8); c/trace_while_executing2.c:59:10
  renamable $r14 = MOV64rm killed renamable $r14, 1, $noreg, 0, $noreg, debug-location !224 :: (load (s64) from %ir.9); c/trace_while_executing2.c:59:14
  renamable $r13 = MOV64rm killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !225 :: (load (s64) from %ir.10); c/trace_while_executing2.c:59:20
  renamable $ebx = MOV32rm killed renamable $rbx, 1, $noreg, 0, $noreg, debug-location !226 :: (load (s32) from %ir.11); c/trace_while_executing2.c:59:26
  $rdi = MOV64rr $r15, debug-location !227; c/trace_while_executing2.c:59:5
  $rsi = MOV64rr $r14, debug-location !227; c/trace_while_executing2.c:59:5
  $rdx = MOV64rr $r13, debug-location !227; c/trace_while_executing2.c:59:5
  $ecx = MOV32rr $ebx, debug-location !227; c/trace_while_executing2.c:59:5
  $r8d = MOV32ri 1, debug-location !227; c/trace_while_executing2.c:59:5
  CALL64pcrel32 @__yk_unopt_loop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !227; c/trace_while_executing2.c:59:5
  STACKMAP 18, 0, renamable $r12, 3, killed renamable $r15, 3, killed renamable $r14, 3, killed renamable $r13, 3, killed renamable $ebx, 3, implicit-def dead early-clobber $r11, debug-location !227; c/trace_while_executing2.c:59:5
  JMP_1 %bb.4, debug-location !227; c/trace_while_executing2.c:59:5

bb.4 (%ir-block.24, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !227; c/trace_while_executing2.c:59:5
  $esi = MOV32ri 4, debug-location !227; c/trace_while_executing2.c:59:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !227; c/trace_while_executing2.c:59:5
  JMP_1 %bb.5, debug-location !227; c/trace_while_executing2.c:59:5

bb.5 (%ir-block.25, bb_id 5):
; predecessors: %bb.1, %bb.2, %bb.4
  successors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 5, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/trace_while_executing2.c:60:1
  JMP_1 %bb.7, debug-location !228; c/trace_while_executing2.c:60:1

bb.6 (%ir-block.26, bb_id 6):
; predecessors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 6, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !228; c/trace_while_executing2.c:60:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !228 :: (load (s64) from got); c/trace_while_executing2.c:60:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $r12, debug-location !228 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:60:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags, debug-location !228; c/trace_while_executing2.c:60:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !228; c/trace_while_executing2.c:60:1
  RET64 debug-location !228; c/trace_while_executing2.c:60:1

bb.7 (%ir-block.27, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $r12
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !228; c/trace_while_executing2.c:60:1
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 7, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/trace_while_executing2.c:60:1
  JMP_1 %bb.6, debug-location !228; c/trace_while_executing2.c:60:1

# End machine code for function __yk_unopt_indirect.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_indirect
# Machine code for function __yk_unopt_indirect: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-56]
  fi#1: size=4, align=4, at location [SP-52]
  fi#2: size=8, align=8, at location [SP-80]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=8, align=8, at location [SP-64]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -48, $noreg, $r8d :: (store (s32) into %stack.0)
  MOV32mr $rbp, 1, $noreg, -44, $noreg, $ecx :: (store (s32) into %stack.1)
  MOV64mr $rbp, 1, $noreg, -72, $noreg, $rdx :: (store (s64) into %stack.2)
  MOV64mr $rbp, 1, $noreg, -64, $noreg, $rsi :: (store (s64) into %stack.3)
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rdi :: (store (s64) into %stack.4)
  $edi = MOV32ri 12
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $r12
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $r12
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $r13 = MOV64rr $r12
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 16, implicit-def dead $eflags
  $rbx = MOV64rr $r12
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 24, implicit-def dead $eflags
  $r15 = MOV64rr $r12
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 28, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !206; c/trace_while_executing2.c:57:21

bb.1 (%ir-block.13, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.5
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 12
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.3)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.2)
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -44, $noreg :: (load (s32) from %stack.1)
  MOV32mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -48, $noreg :: (load (s32) from %stack.0)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  CMP32mi killed renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !218 :: (load (s32) from %ir.12); c/trace_while_executing2.c:58:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/trace_while_executing2.c:58:13
  STACKMAP 16, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219; c/trace_while_executing2.c:58:18
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/trace_while_executing2.c:58:18
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !219; c/trace_while_executing2.c:58:18
  JMP_1 %bb.5, debug-location !219; c/trace_while_executing2.c:58:18

bb.2 (%ir-block.16, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3, %bb.5
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !220; c/trace_while_executing2.c:58:21
  $esi = MOV32ri 2, debug-location !220; c/trace_while_executing2.c:58:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !220; c/trace_while_executing2.c:58:21
  CMP32mi renamable $rbx, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !221 :: (load (s32) from %ir.11); c/trace_while_executing2.c:58:23
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !221; c/trace_while_executing2.c:58:23
  STACKMAP 17, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !222; c/trace_while_executing2.c:58:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !222; c/trace_while_executing2.c:58:7
  JCC_1 %bb.3, 5, implicit killed $eflags, debug-location !222; c/trace_while_executing2.c:58:7
  JMP_1 %bb.5, debug-location !222; c/trace_while_executing2.c:58:7

bb.3 (%ir-block.19, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !223; c/trace_while_executing2.c:59:10
  $esi = MOV32ri 3, debug-location !223; c/trace_while_executing2.c:59:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !223; c/trace_while_executing2.c:59:10
  renamable $r15 = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !223 :: (load (s64) from %ir.8); c/trace_while_executing2.c:59:10
  renamable $r14 = MOV64rm killed renamable $r14, 1, $noreg, 0, $noreg, debug-location !224 :: (load (s64) from %ir.9); c/trace_while_executing2.c:59:14
  renamable $r13 = MOV64rm killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !225 :: (load (s64) from %ir.10); c/trace_while_executing2.c:59:20
  renamable $ebx = MOV32rm killed renamable $rbx, 1, $noreg, 0, $noreg, debug-location !226 :: (load (s32) from %ir.11); c/trace_while_executing2.c:59:26
  $rdi = MOV64rr $r15, debug-location !227; c/trace_while_executing2.c:59:5
  $rsi = MOV64rr $r14, debug-location !227; c/trace_while_executing2.c:59:5
  $rdx = MOV64rr $r13, debug-location !227; c/trace_while_executing2.c:59:5
  $ecx = MOV32rr $ebx, debug-location !227; c/trace_while_executing2.c:59:5
  $r8d = MOV32ri 1, debug-location !227; c/trace_while_executing2.c:59:5
  CALL64pcrel32 @__yk_unopt_loop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !227; c/trace_while_executing2.c:59:5
  STACKMAP 18, 0, renamable $r12, 3, killed renamable $r15, 3, killed renamable $r14, 3, killed renamable $r13, 3, killed renamable $ebx, 3, implicit-def dead early-clobber $r11, debug-location !227; c/trace_while_executing2.c:59:5
  JMP_1 %bb.4, debug-location !227; c/trace_while_executing2.c:59:5

bb.4 (%ir-block.24, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !227; c/trace_while_executing2.c:59:5
  $esi = MOV32ri 4, debug-location !227; c/trace_while_executing2.c:59:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !227; c/trace_while_executing2.c:59:5
  JMP_1 %bb.5, debug-location !227; c/trace_while_executing2.c:59:5

bb.5 (%ir-block.25, bb_id 5):
; predecessors: %bb.1, %bb.2, %bb.4
  successors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 5, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/trace_while_executing2.c:60:1
  JMP_1 %bb.7, debug-location !228; c/trace_while_executing2.c:60:1

bb.6 (%ir-block.26, bb_id 6):
; predecessors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 6, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !228; c/trace_while_executing2.c:60:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !228 :: (load (s64) from got); c/trace_while_executing2.c:60:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $r12, debug-location !228 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:60:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags, debug-location !228; c/trace_while_executing2.c:60:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !228; c/trace_while_executing2.c:60:1
  RET64 debug-location !228; c/trace_while_executing2.c:60:1

bb.7 (%ir-block.27, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $r12
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !228; c/trace_while_executing2.c:60:1
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 7, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/trace_while_executing2.c:60:1
  JMP_1 %bb.6, debug-location !228; c/trace_while_executing2.c:60:1

# End machine code for function __yk_unopt_indirect.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_indirect
# Machine code for function __yk_unopt_indirect: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-56]
  fi#1: size=4, align=4, at location [SP-52]
  fi#2: size=8, align=8, at location [SP-80]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=8, align=8, at location [SP-64]
Function Live Ins: $rdi, $rsi, $rdx, $ecx, $r8d

bb.0 (%ir-block.5, bb_id 0):
  successors: %bb.1
  liveins: $ecx, $rdi, $rdx, $rsi, $r8d, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  MOV32mr $rbp, 1, $noreg, -48, $noreg, $r8d :: (store (s32) into %stack.0)
  MOV32mr $rbp, 1, $noreg, -44, $noreg, $ecx :: (store (s32) into %stack.1)
  MOV64mr $rbp, 1, $noreg, -72, $noreg, $rdx :: (store (s64) into %stack.2)
  MOV64mr $rbp, 1, $noreg, -64, $noreg, $rsi :: (store (s64) into %stack.3)
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rdi :: (store (s64) into %stack.4)
  $edi = MOV32ri 12
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r12 = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $r12
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $r14 = MOV64rr $r12
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 8, implicit-def dead $eflags
  $r13 = MOV64rr $r12
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 16, implicit-def dead $eflags
  $rbx = MOV64rr $r12
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 24, implicit-def dead $eflags
  $r15 = MOV64rr $r12
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 28, implicit-def dead $eflags
  renamable $rax = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.4)
  MOV64mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.8)
  JMP_1 %bb.1, debug-location !206; c/trace_while_executing2.c:57:21

bb.1 (%ir-block.13, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2, %bb.5
  liveins: $rbx, $r12, $r13, $r14, $r15
  $edi = MOV32ri 12
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.3)
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.9)
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  renamable $rax = MOV64rm $rbp, 1, $noreg, -72, $noreg :: (load (s64) from %stack.2)
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rax :: (store (s64) into %ir.10)
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -44, $noreg :: (load (s32) from %stack.1)
  MOV32mr renamable $rbx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  renamable $eax = MOV32rm $rbp, 1, $noreg, -48, $noreg :: (load (s32) from %stack.0)
  MOV32mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.12)
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  CMP32mi killed renamable $r15, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !218 :: (load (s32) from %ir.12); c/trace_while_executing2.c:58:13
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/trace_while_executing2.c:58:13
  STACKMAP 16, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219; c/trace_while_executing2.c:58:18
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/trace_while_executing2.c:58:18
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !219; c/trace_while_executing2.c:58:18
  JMP_1 %bb.5, debug-location !219; c/trace_while_executing2.c:58:18

bb.2 (%ir-block.16, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3, %bb.5
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !220; c/trace_while_executing2.c:58:21
  $esi = MOV32ri 2, debug-location !220; c/trace_while_executing2.c:58:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !220; c/trace_while_executing2.c:58:21
  CMP32mi renamable $rbx, 1, $noreg, 0, $noreg, 3, implicit-def $eflags, debug-location !221 :: (load (s32) from %ir.11); c/trace_while_executing2.c:58:23
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !221; c/trace_while_executing2.c:58:23
  STACKMAP 17, 0, renamable $r12, 3, renamable $r12, 3, renamable $r14, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !222; c/trace_while_executing2.c:58:7
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !222; c/trace_while_executing2.c:58:7
  JCC_1 %bb.3, 5, implicit killed $eflags, debug-location !222; c/trace_while_executing2.c:58:7
  JMP_1 %bb.5, debug-location !222; c/trace_while_executing2.c:58:7

bb.3 (%ir-block.19, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r12, $r13, $r14
  DBG_VALUE $r15, 0, !"depth", !DIExpression(), debug-location !215; c/trace_while_executing2.c:57:72 line no:57 indirect
  DBG_VALUE $rbx, 0, !"i", !DIExpression(), debug-location !213; c/trace_while_executing2.c:57:65 line no:57 indirect
  DBG_VALUE $r13, 0, !"loc2", !DIExpression(), debug-location !211; c/trace_while_executing2.c:57:55 line no:57 indirect
  DBG_VALUE $r14, 0, !"loc1", !DIExpression(), debug-location !209; c/trace_while_executing2.c:57:37 line no:57 indirect
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !223; c/trace_while_executing2.c:59:10
  $esi = MOV32ri 3, debug-location !223; c/trace_while_executing2.c:59:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !223; c/trace_while_executing2.c:59:10
  renamable $r15 = MOV64rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !223 :: (load (s64) from %ir.8); c/trace_while_executing2.c:59:10
  renamable $r14 = MOV64rm killed renamable $r14, 1, $noreg, 0, $noreg, debug-location !224 :: (load (s64) from %ir.9); c/trace_while_executing2.c:59:14
  renamable $r13 = MOV64rm killed renamable $r13, 1, $noreg, 0, $noreg, debug-location !225 :: (load (s64) from %ir.10); c/trace_while_executing2.c:59:20
  renamable $ebx = MOV32rm killed renamable $rbx, 1, $noreg, 0, $noreg, debug-location !226 :: (load (s32) from %ir.11); c/trace_while_executing2.c:59:26
  $rdi = MOV64rr $r15, debug-location !227; c/trace_while_executing2.c:59:5
  $rsi = MOV64rr $r14, debug-location !227; c/trace_while_executing2.c:59:5
  $rdx = MOV64rr $r13, debug-location !227; c/trace_while_executing2.c:59:5
  $ecx = MOV32rr $ebx, debug-location !227; c/trace_while_executing2.c:59:5
  $r8d = MOV32ri 1, debug-location !227; c/trace_while_executing2.c:59:5
  CALL64pcrel32 @__yk_unopt_loop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, debug-location !227; c/trace_while_executing2.c:59:5
  STACKMAP 18, 0, renamable $r12, 3, killed renamable $r15, 3, killed renamable $r14, 3, killed renamable $r13, 3, killed renamable $ebx, 3, implicit-def dead early-clobber $r11, debug-location !227; c/trace_while_executing2.c:59:5
  JMP_1 %bb.4, debug-location !227; c/trace_while_executing2.c:59:5

bb.4 (%ir-block.24, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !227; c/trace_while_executing2.c:59:5
  $esi = MOV32ri 4, debug-location !227; c/trace_while_executing2.c:59:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !227; c/trace_while_executing2.c:59:5
  JMP_1 %bb.5, debug-location !227; c/trace_while_executing2.c:59:5

bb.5 (%ir-block.25, bb_id 5):
; predecessors: %bb.1, %bb.2, %bb.4
  successors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 5, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/trace_while_executing2.c:60:1
  JMP_1 %bb.7, debug-location !228; c/trace_while_executing2.c:60:1

bb.6 (%ir-block.26, bb_id 6):
; predecessors: %bb.7
  liveins: $r12
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 6, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp, debug-location !228; c/trace_while_executing2.c:60:1
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !228 :: (load (s64) from got); c/trace_while_executing2.c:60:1
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $r12, debug-location !228 :: (store (s64) into @shadowstack_0); c/trace_while_executing2.c:60:1
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 40, implicit-def dead $eflags, debug-location !228; c/trace_while_executing2.c:60:1
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/trace_while_executing2.c:60:1
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !228; c/trace_while_executing2.c:60:1
  RET64 debug-location !228; c/trace_while_executing2.c:60:1

bb.7 (%ir-block.27, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $r12
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !228; c/trace_while_executing2.c:60:1
  DBG_VALUE $r12, 0, !"mt", !DIExpression(), debug-location !206; c/trace_while_executing2.c:57:21 line no:57 indirect
  $edi = MOV32ri 12, debug-location !228; c/trace_while_executing2.c:60:1
  $esi = MOV32ri 7, debug-location !228; c/trace_while_executing2.c:60:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/trace_while_executing2.c:60:1
  JMP_1 %bb.6, debug-location !228; c/trace_while_executing2.c:60:1

# End machine code for function __yk_unopt_indirect.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-48]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14d = MOV32rr $edi
  $edi = MOV32ri 13
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $r15 = MOV64rr $rax
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 8, implicit-def dead $eflags
  MOV32mi renamable $rax, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)
  MOV32mr killed renamable $rax, 1, $noreg, 4, $noreg, killed renamable $r14d :: (store (s32) into %ir.5)
  JMP_1 %bb.1, debug-location !230; c/trace_while_executing2.c:62:14

bb.1 (%ir-block.10, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r15
  $edi = MOV32ri 13
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !230; c/trace_while_executing2.c:62:14 line no:62
  MOV64mr killed renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.6)
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !233; c/trace_while_executing2.c:62:27 line no:62
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !236; c/trace_while_executing2.c:63:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !236; c/trace_while_executing2.c:63:14
  $rbx = MOV64rr $rax, debug-location !236; c/trace_while_executing2.c:63:14
  JMP_1 %bb.2, debug-location !235; c/trace_while_executing2.c:63:9

bb.2 (%ir-block.12, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx
  $edi = MOV32ri 13, debug-location !235; c/trace_while_executing2.c:63:9
  $esi = MOV32ri 2, debug-location !235; c/trace_while_executing2.c:63:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !235; c/trace_while_executing2.c:63:9
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rbx, debug-location !235 :: (store (s64) into %ir.7); c/trace_while_executing2.c:63:9
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg, debug-location !237 :: (load (s64) from %ir.7); c/trace_while_executing2.c:64:27
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !238; c/trace_while_executing2.c:64:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !238; c/trace_while_executing2.c:64:3
  JMP_1 %bb.3, debug-location !239; c/trace_while_executing2.c:65:14

bb.3 (%ir-block.14, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4

  $edi = MOV32ri 13, debug-location !240; c/trace_while_executing2.c:65:21
  $esi = MOV32ri 3, debug-location !240; c/trace_while_executing2.c:65:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !240; c/trace_while_executing2.c:65:21
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !240; c/trace_while_executing2.c:65:21
  $rbx = MOV64rr $rax, debug-location !240; c/trace_while_executing2.c:65:21
  JMP_1 %bb.4, debug-location !240; c/trace_while_executing2.c:65:21

bb.4 (%ir-block.16, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx
  $edi = MOV32ri 13, debug-location !240; c/trace_while_executing2.c:65:21
  $esi = MOV32ri 4, debug-location !240; c/trace_while_executing2.c:65:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !240; c/trace_while_executing2.c:65:21
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !240 :: (store (s64) into %ir.17); c/trace_while_executing2.c:65:21
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !244; c/trace_while_executing2.c:66:21
  $rbx = MOV64rr $rax, debug-location !244; c/trace_while_executing2.c:66:21
  JMP_1 %bb.5, debug-location !244; c/trace_while_executing2.c:66:21

bb.5 (%ir-block.19, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx
  $edi = MOV32ri 13, debug-location !244; c/trace_while_executing2.c:66:21
  $esi = MOV32ri 5, debug-location !244; c/trace_while_executing2.c:66:21
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !244; c/trace_while_executing2.c:66:21
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rbx, debug-location !244 :: (store (s64) into %ir.20); c/trace_while_executing2.c:66:21
  renamable $rbx = MOV64rm $rbp, 1, $noreg, -32, $noreg, debug-location !245 :: (load (s64) from %ir.7); c/trace_while_executing2.c:68:8
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !246; c/trace_while_executing2.c:68:3
  renamable $rdx = LEA64r $rbp, 1, $noreg, -40, $noreg, debug-location !246; c/trace_while_executing2.c:68:3
  $rdi = MOV64rr $rbx, debug-location !246; c/trace_while_executing2.c:68:3
  $ecx = MOV32ri 5, debug-location !246; c/trace_while_executing2.c:68:3
  $r8d = XOR32rr undef $r8d(tied-def 0), undef $r8d, implicit-def dead $eflags, debug-location !246; c/trace_while_executing2.c:68:3
  CALL64pcrel32 @__yk_unopt_loop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit killed $ecx, implicit killed $r8d, debug-location !246; c/trace_while_executing2.c:68:3
  STACKMAP 19, 0, 0, $rbp, -32, 3, 0, $rbp, -48, 3, 0, $rbp, -40, 3, killed renamable $rbx, 3, implicit-def dead early-clobber $r11, debug-location !247; c/trace_while_executing2.c:69:11
  JMP_1 %bb.6, debug-location !247; c/trace_while_executing2.c:69:11

bb.6 (%ir-block.22, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7

  $edi = MOV32ri 13, debug-location !247; c/trace_while_executing2.c:69:11
  $esi = MOV32ri 6, debug-location !247; c/trace_while_executing2.c:69:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/trace_while_executing2.c:69:11
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !247 :: (load (s64) from @stderr); c/trace_while_executing2.c:69:11
  renamable $rsi = MOV64ri @.str.1, debug-location !248; c/trace_while_executing2.c:69:3
  $al = MOV8ri 0, debug-location !248; c/trace_while_executing2.c:69:3
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax, debug-location !248; c/trace_while_executing2.c:69:3
  JMP_1 %bb.7, debug-location !249; c/trace_while_executing2.c:70:3

bb.7 (%ir-block.25, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8

  $edi = MOV32ri 13, debug-location !249; c/trace_while_executing2.c:70:3
  $esi = MOV32ri 7, debug-location !249; c/trace_while_executing2.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !249; c/trace_while_executing2.c:70:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !249 :: (load (s64) from %ir.26); c/trace_while_executing2.c:70:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !249; c/trace_while_executing2.c:70:3
  JMP_1 %bb.8, debug-location !250; c/trace_while_executing2.c:71:3

bb.8 (%ir-block.28, bb_id 8):
; predecessors: %bb.7
  successors: %bb.9

  $edi = MOV32ri 13, debug-location !250; c/trace_while_executing2.c:71:3
  $esi = MOV32ri 8, debug-location !250; c/trace_while_executing2.c:71:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/trace_while_executing2.c:71:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -40, $noreg, debug-location !250 :: (load (s64) from %ir.29); c/trace_while_executing2.c:71:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !250; c/trace_while_executing2.c:71:3
  JMP_1 %bb.9, debug-location !251; c/trace_while_executing2.c:72:18

bb.9 (%ir-block.31, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10

  $edi = MOV32ri 13, debug-location !251; c/trace_while_executing2.c:72:18
  $esi = MOV32ri 9, debug-location !251; c/trace_while_executing2.c:72:18
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !251; c/trace_while_executing2.c:72:18
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -32, $noreg, debug-location !251 :: (load (s64) from %ir.7); c/trace_while_executing2.c:72:18
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !252; c/trace_while_executing2.c:72:3
  JMP_1 %bb.10, debug-location !253; c/trace_while_executing2.c:73:3

bb.10 (%ir-block.33, bb_id 10):
; predecessors: %bb.9
  successors: %bb.12

  $edi = MOV32ri 13, debug-location !253; c/trace_while_executing2.c:73:3
  $esi = MOV32ri 10, debug-location !253; c/trace_while_executing2.c:73:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/trace_while_executing2.c:73:3
  JMP_1 %bb.12, debug-location !253; c/trace_while_executing2.c:73:3

bb.11 (%ir-block.34, bb_id 11):
; predecessors: %bb.12

  $edi = MOV32ri 13, debug-location !253; c/trace_while_executing2.c:73:3
  $esi = MOV32ri 11, debug-location !253; c/trace_while_executing2.c:73:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/trace_while_executing2.c:73:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !253; c/trace_while_executing2.c:73:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !253; c/trace_while_executing2.c:73:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/trace_while_executing2.c:73:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/trace_while_executing2.c:73:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/trace_while_executing2.c:73:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/trace_while_executing2.c:73:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !253; c/trace_while_executing2.c:73:3
  RET64 implicit $eax, debug-location !253; c/trace_while_executing2.c:73:3

bb.12 (%ir-block.35, bb_id 12):
; predecessors: %bb.10
  successors: %bb.11

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !253; c/trace_while_executing2.c:73:3
  $edi = MOV32ri 13, debug-location !253; c/trace_while_executing2.c:73:3
  $esi = MOV32ri 12, debug-location !253; c/trace_while_executing2.c:73:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/trace_while_executing2.c:73:3
  JMP_1 %bb.11, debug-location !253; c/trace_while_executing2.c:73:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
yk-jit-event: start-tracing
Allocating new buffer for direction OptToUnopt
Using buffer at 0x1289a6d0 for direction OptToUnopt
Transition: OptToUnopt
src_rbp: 0x7fff8d986fd0, reg_store: 0x7fff8d986ec0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(15, 8, [-72]) dst: Register(12, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(12, 8, [-56]) dst: Register(15, 8, [-56])
ASM DUMP:
  0: movabs rbp, 0x7fff8d986fd0
  a: movabs rsp, 0x7fff8d986fd0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289a6d0
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289a6d0
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0x110]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r12, qword ptr [rbp - 0x110]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0xf8]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r15, qword ptr [rbp - 0xf8]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: sub rsp, 0x10
  107: mov qword ptr [rsp], rax
  10b: movabs rax, 0x2077d3
  115: mov qword ptr [rsp + 8], rax
  11a: pop rax
  11b: ret 
0: 5
yk-jit-event: stop-tracing
--- Begin jit-pre-opt ---
; compiled trace ID #0

func_decl fprintf (ptr, ptr, ...) -> i32
func_decl __yk_unopt_indirect (ptr, ptr, ptr, i32, i32)
global_decl @stderr
global_decl @.str

entry:
    %0: ptr = param Register(3, 8, [-48])
    %1: ptr = param Register(3, 8, [-48])
    %2: ptr = param Indirect(6, -64, 8)
    %3: ptr = param Register(14, 8, [-136])
    %4: ptr = param Register(12, 8, [-72])
    %5: ptr = param Register(13, 8, [-80])
    %6: ptr = param Register(15, 8, [-56])
    header_start [%0, %1, %2, %3, %4, %5, %6]
    %8: ptr = lookup_global @stderr
    %9: ptr = load %8
    %10: i32 = load %5
    %11: i32 = load %4
    %12: ptr = lookup_global @.str
    %13: i32 = call @fprintf(%9, %12, %10, %11)
    %14: i32 = load %4
    %15: i1 = eq %14, 3i32
    guard false, %15, [11:%0_6: %0, 11:%0_9: %1, 11:%0_10: %2, 11:%0_11: %3, 11:%0_12: %4, 11:%0_13: %5, 11:%0_14: %6, 11:%7_2: 1i1] ; trace_gidx 0 safepoint_id 13
    %17: ptr = load %1
    %18: ptr = load %2
    %19: ptr = load %3
    %20: i32 = load %4
    %21: i32 = load %5
    call @__yk_unopt_indirect(%17, %18, %19, %20, %21)
    %23: i32 = load %4
    %24: i32 = add %23, 4294967295i32
    *%4 = %24
    %26: i32 = load %4
    %27: i1 = sgt %26, 0i32
    guard true, %27, [11:%0_6: %0, 11:%0_9: %1, 11:%0_10: %2, 11:%0_11: %3, 11:%0_12: %4, 11:%0_13: %5, 11:%0_14: %6, 11:%4_2: 0i1] ; trace_gidx 1 safepoint_id 2
    %29: ptr = load %1
    %30: ptr = load %6
    header_end [%0, %1, %2, %3, %4, %5, %6]
--- End jit-pre-opt ---
Allocating new buffer for direction UnoptToOpt
Using buffer at 0x1289b550 for direction UnoptToOpt
Transition: UnoptToOpt
src_rbp: 0x7fff8d986fd0, reg_store: 0x7fff8d986ec0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(12, 8, [-72]) dst: Register(15, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(15, 8, [-56]) dst: Register(12, 8, [-56])
ASM DUMP:
  0: movabs rbp, 0x7fff8d986fd0
  a: movabs rsp, 0x7fff8d986fd0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289b550
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289b550
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0xf8]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r15, qword ptr [rbp - 0xf8]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0x110]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r12, qword ptr [rbp - 0x110]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: sub rsp, 0x10
  107: mov qword ptr [rsp], rax
  10b: movabs rax, 0x2071fe
  115: mov qword ptr [rsp + 8], rax
  11a: pop rax
  11b: ret 
0: 4
yk-jit-event: enter-jit-code
Using buffer at 0x1289a6d0 for direction OptToUnopt
Transition: OptToUnopt
src_rbp: 0x7fff8d986fd0, reg_store: 0x7fff8d986ec0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(15, 8, [-72]) dst: Register(12, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(12, 8, [-56]) dst: Register(15, 8, [-56])
@@ calling exec_trace
ASM DUMP:
  0: movabs rbp, 0x7fff8d986fd0
  a: movabs rsp, 0x7fff8d986fd0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289a6d0
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289a6d0
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0x110]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r12, qword ptr [rbp - 0x110]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0xf8]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r15, qword ptr [rbp - 0xf8]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: movabs rdi, 0x7fff8d986fd0
  10d: movabs rsi, 0x7fff8d986f30
  117: movabs rdx, 0x7f5337b8e000
  121: movabs rcx, 0x7f533841acb0
  12b: call rcx
0: 3
yk-jit-event: deoptimise
yk-jit-event: start-tracing
Using buffer at 0x1289a6d0 for direction OptToUnopt
Transition: OptToUnopt
src_rbp: 0x7fff8d986ec0, reg_store: 0x7fff8d986db0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(15, 8, [-72]) dst: Register(12, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(12, 8, [-56]) dst: Register(15, 8, [-56])
ASM DUMP:
  0: movabs rbp, 0x7fff8d986ec0
  a: movabs rsp, 0x7fff8d986ec0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289a6d0
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289a6d0
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0x110]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r12, qword ptr [rbp - 0x110]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0xf8]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r15, qword ptr [rbp - 0xf8]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: sub rsp, 0x10
  107: mov qword ptr [rsp], rax
  10b: movabs rax, 0x2077d3
  115: mov qword ptr [rsp + 8], rax
  11a: pop rax
  11b: ret 
1: -1919389720
yk-warning: tracing-aborted: tracing went outside of starting frame
0: 2
yk-jit-event: start-tracing
Using buffer at 0x1289a6d0 for direction OptToUnopt
Transition: OptToUnopt
src_rbp: 0x7fff8d986fd0, reg_store: 0x7fff8d986ec0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(15, 8, [-72]) dst: Register(12, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(12, 8, [-56]) dst: Register(15, 8, [-56])
ASM DUMP:
  0: movabs rbp, 0x7fff8d986fd0
  a: movabs rsp, 0x7fff8d986fd0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289a6d0
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289a6d0
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0x110]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r12, qword ptr [rbp - 0x110]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0xf8]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r15, qword ptr [rbp - 0xf8]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: sub rsp, 0x10
  107: mov qword ptr [rsp], rax
  10b: movabs rax, 0x2077d3
  115: mov qword ptr [rsp + 8], rax
  11a: pop rax
  11b: ret 
0: -1919389720
exit

test lang_tests::trace_while_executing2.c ... [0m[31mFAILED[0m

failures:

---- lang_tests::trace_while_executing2.c status ----
Success

---- lang_tests::trace_while_executing2.c stderr ----

Literal text:
   |yk-jit-event: start-tracing
   |0: 5
   |yk-jit-event: stop-tracing
   |--- Begin jit-pre-opt ---
   |; compiled trace ID #0
   |
   |func_decl fprintf (ptr, ptr, ...) -> i32
   |func_decl __yk_unopt_indirect (ptr, ptr, ptr, i32, i32)
   |global_decl @stderr
   |global_decl @.str
   |
   |entry:
   |    %0: ptr = param Register(3, 8, [-48])
   |    %1: ptr = param Register(3, 8, [-48])
   |    %2: ptr = param Indirect(6, -64, 8)
   |    %3: ptr = param Register(14, 8, [-136])
   |    %4: ptr = param Register(12, 8, [-72])
   |    %5: ptr = param Register(13, 8, [-80])
   |    %6: ptr = param Register(15, 8, [-56])
   |    header_start [%0, %1, %2, %3, %4, %5, %6]
   |    %8: ptr = lookup_global @stderr
   |    %9: ptr = load %8
   |    %10: i32 = load %5
   |    %11: i32 = load %4
   |    %12: ptr = lookup_global @.str
   |    %13: i32 = call @fprintf(%9, %12, %10, %11)
   |    %14: i32 = load %4
   |    %15: i1 = eq %14, 3i32
   |    guard false, %15, [11:%0_6: %0, 11:%0_9: %1, 11:%0_10: %2, 11:%0_11: %3, 11:%0_12: %4, 11:%0_13: %5, 11:%0_14: %6, 11:%7_2: 1i1] ; trace_gidx 0 safepoint_id 13
   |    %17: ptr = load %1
   |    %18: ptr = load %2
   |    %19: ptr = load %3
   |    %20: i32 = load %4
   |    %21: i32 = load %5
   |    call @__yk_unopt_indirect(%17, %18, %19, %20, %21)
   |    %23: i32 = load %4
   |    %24: i32 = add %23, 4294967295i32
   |    *%4 = %24
   |    %26: i32 = load %4
   |    %27: i1 = sgt %26, 0i32
   |    guard true, %27, [11:%0_6: %0, 11:%0_9: %1, 11:%0_10: %2, 11:%0_11: %3, 11:%0_12: %4, 11:%0_13: %5, 11:%0_14: %6, 11:%4_2: 0i1] ; trace_gidx 1 safepoint_id 2
   |    %29: ptr = load %1
   |    %30: ptr = load %6
   |    header_end [%0, %1, %2, %3, %4, %5, %6]
   |--- End jit-pre-opt ---
   |0: 4
   |yk-jit-event: enter-jit-code
   |0: 3
   |yk-jit-event: deoptimise
   |yk-jit-event: start-tracing
   |1: -1919389720
   |yk-warning: tracing-aborted: tracing went outside of starting frame
   |0: 2
   |yk-jit-event: start-tracing
   |0: -1919389720
   |exit
   |

Pattern (error at line 14):
   ...
   |0: 3
   |yk-jit-event: deoptimise
   |yk-jit-event: start-tracing
>> |1: 3
   |yk-warning: tracing-aborted: tracing went outside of starting frame
   |0: 2
   |yk-jit-event: start-tracing
   ...

Text (error at line 51):
   ...
   |0: 3
   |yk-jit-event: deoptimise
   |yk-jit-event: start-tracing
>> |1: -1919389720
   |yk-warning: tracing-aborted: tracing went outside of starting frame
   |0: 2
   |yk-jit-event: start-tracing
   ...

---- lang_tests::trace_while_executing2.c stdout ----

Allocating new buffer for direction OptToUnopt
Using buffer at 0x1289a6d0 for direction OptToUnopt
Transition: OptToUnopt
src_rbp: 0x7fff8d986fd0, reg_store: 0x7fff8d986ec0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(15, 8, [-72]) dst: Register(12, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(12, 8, [-56]) dst: Register(15, 8, [-56])
ASM DUMP:
  0: movabs rbp, 0x7fff8d986fd0
  a: movabs rsp, 0x7fff8d986fd0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289a6d0
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289a6d0
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0x110]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r12, qword ptr [rbp - 0x110]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0xf8]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r15, qword ptr [rbp - 0xf8]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: sub rsp, 0x10
  107: mov qword ptr [rsp], rax
  10b: movabs rax, 0x2077d3
  115: mov qword ptr [rsp + 8], rax
  11a: pop rax
  11b: ret 
Allocating new buffer for direction UnoptToOpt
Using buffer at 0x1289b550 for direction UnoptToOpt
Transition: UnoptToOpt
src_rbp: 0x7fff8d986fd0, reg_store: 0x7fff8d986ec0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(12, 8, [-72]) dst: Register(15, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(15, 8, [-56]) dst: Register(12, 8, [-56])
ASM DUMP:
  0: movabs rbp, 0x7fff8d986fd0
  a: movabs rsp, 0x7fff8d986fd0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289b550
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289b550
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0xf8]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r15, qword ptr [rbp - 0xf8]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0x110]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r12, qword ptr [rbp - 0x110]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: sub rsp, 0x10
  107: mov qword ptr [rsp], rax
  10b: movabs rax, 0x2071fe
  115: mov qword ptr [rsp + 8], rax
  11a: pop rax
  11b: ret 
Using buffer at 0x1289a6d0 for direction OptToUnopt
Transition: OptToUnopt
src_rbp: 0x7fff8d986fd0, reg_store: 0x7fff8d986ec0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(15, 8, [-72]) dst: Register(12, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(12, 8, [-56]) dst: Register(15, 8, [-56])
@@ calling exec_trace
ASM DUMP:
  0: movabs rbp, 0x7fff8d986fd0
  a: movabs rsp, 0x7fff8d986fd0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289a6d0
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289a6d0
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0x110]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r12, qword ptr [rbp - 0x110]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0xf8]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r15, qword ptr [rbp - 0xf8]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: movabs rdi, 0x7fff8d986fd0
  10d: movabs rsi, 0x7fff8d986f30
  117: movabs rdx, 0x7f5337b8e000
  121: movabs rcx, 0x7f533841acb0
  12b: call rcx
Using buffer at 0x1289a6d0 for direction OptToUnopt
Transition: OptToUnopt
src_rbp: 0x7fff8d986ec0, reg_store: 0x7fff8d986db0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(15, 8, [-72]) dst: Register(12, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(12, 8, [-56]) dst: Register(15, 8, [-56])
ASM DUMP:
  0: movabs rbp, 0x7fff8d986ec0
  a: movabs rsp, 0x7fff8d986ec0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289a6d0
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289a6d0
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0x110]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r12, qword ptr [rbp - 0x110]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0xf8]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r15, qword ptr [rbp - 0xf8]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: sub rsp, 0x10
  107: mov qword ptr [rsp], rax
  10b: movabs rax, 0x2077d3
  115: mov qword ptr [rsp + 8], rax
  11a: pop rax
  11b: ret 
Using buffer at 0x1289a6d0 for direction OptToUnopt
Transition: OptToUnopt
src_rbp: 0x7fff8d986fd0, reg_store: 0x7fff8d986ec0, src_frame_size: 0xa0, dst_frame_size: 0xa0
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Register2Register - src: Register(3, 8, [-48]) dst: Register(3, 8, [-48])
Indirect2Indirect - src: Indirect(6, -64, 8) dst: Indirect(6, -64, 8)
Register2Register - src: Register(14, 8, [-136]) dst: Register(14, 8, [-136])
Register2Register - src: Register(15, 8, [-72]) dst: Register(12, 8, [-72])
Register2Register - src: Register(13, 8, [-80]) dst: Register(13, 8, [-80])
Register2Register - src: Register(12, 8, [-56]) dst: Register(15, 8, [-56])
ASM DUMP:
  0: movabs rbp, 0x7fff8d986fd0
  a: movabs rsp, 0x7fff8d986fd0
  14: sub rsp, 0xa0
  1b: movabs rax, 0x1289a6d0
  25: mov rcx, qword ptr [rbp - 0x40]
  2c: mov qword ptr [rax + riz], rcx
  34: mov rax, qword ptr [rbp - 0xc0]
  3b: mov qword ptr [rbp - 0x30], rax
  42: mov rbx, qword ptr [rbp - 0xc0]
  49: mov rax, qword ptr [rbp - 0xc0]
  50: mov qword ptr [rbp - 0x30], rax
  57: mov rbx, qword ptr [rbp - 0xc0]
  5e: movabs rax, 0x1289a6d0
  68: mov rax, qword ptr [rax + riz]
  70: mov qword ptr [rbp - 0x40], rax
  77: mov rax, qword ptr [rbp - 0x108]
  7e: mov qword ptr [rbp - 0x88], rax
  85: mov r14, qword ptr [rbp - 0x108]
  8c: mov rax, qword ptr [rbp - 0x110]
  93: mov qword ptr [rbp - 0x48], rax
  9a: mov r12, qword ptr [rbp - 0x110]
  a1: mov rax, qword ptr [rbp - 0x100]
  a8: mov qword ptr [rbp - 0x50], rax
  af: mov r13, qword ptr [rbp - 0x100]
  b6: mov rax, qword ptr [rbp - 0xf8]
  bd: mov qword ptr [rbp - 0x38], rax
  c4: mov r15, qword ptr [rbp - 0xf8]
  cb: mov rax, qword ptr [rbp - 0xb0]
  d2: mov rcx, qword ptr [rbp - 0xb8]
  d9: mov rdi, qword ptr [rbp - 0xc8]
  e0: mov rsi, qword ptr [rbp - 0xd0]
  e7: mov r8, qword ptr [rbp - 0xd8]
  ee: mov r9, qword ptr [rbp - 0xe0]
  f5: mov r10, qword ptr [rbp - 0xe8]
  fc: mov r11, qword ptr [rbp - 0xf0]
  103: sub rsp, 0x10
  107: mov qword ptr [rsp], rax
  10b: movabs rax, 0x2077d3
  115: mov qword ptr [rsp + 8], rax
  11a: pop rax
  11b: ret 

failures:
    lang_tests::trace_while_executing2.c

test result: [0m[31mFAILED[0m. 0 passed; 1 failed; 0 ignored; 0 measured; 150 filtered out

error: test failed, to rerun pass `-p tests --test c_tests`

Caused by:
  process didn't exit successfully: `/home/pd/git-repos/research/yk-fork/target/debug/deps/c_tests-a7df1e4d217569ba '::trace_while_executing2.c' --nocapture` (exit status: 1)
