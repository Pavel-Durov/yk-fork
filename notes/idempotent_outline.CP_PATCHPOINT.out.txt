test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 14 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/lib.rs (target/debug/deps/tests-85b48ad7f40a41cd)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/bin/dump_ir.rs (target/debug/deps/dump_ir-5a75d08e22383257)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/bin/gdb_c_test.rs (target/debug/deps/gdb_c_test-7bae41caa2faa194)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m langtest_c.rs (target/debug/deps/c_tests-311eca720dce6708)
Running C tests...

running 1 tests********** Machine Code when processing stackmap **********
Function: g
# Machine code for function g: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14 = MOV64rr $rdi
  $edi = MOV32ri 2, debug-location !35; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !35; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !35; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !35; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r14
  $edi = MOV32ri 2, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $esi = MOV32ri 1, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), debug-location !38; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:57:17 ] line no:50
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), debug-location !38; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:57:17 ] line no:50
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:55
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:55
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $r14, implicit-def dead $eflags, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $r14 = MOV64rr $rbx, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 2, implicit-def dead $eflags, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $rdi = MOV64rr $r14, debug-location !39; c/idempotent_outline.c:57:17
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !39; c/idempotent_outline.c:57:17
  STACKMAP 5, 0, renamable $rbx, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !35; c/idempotent_outline.c:0
  $r15 = MOV64rr $rax, debug-location !39; c/idempotent_outline.c:57:17
  JMP_1 %bb.2, debug-location !35; c/idempotent_outline.c:0

bb.2 (%ir-block.7, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r15
  $edi = MOV32ri 2, debug-location !40; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  $esi = MOV32ri 2, debug-location !40; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !40; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  DBG_VALUE $noreg, $noreg, !"y", !DIExpression(DW_OP_plus_uconst, 5, DW_OP_stack_value), debug-location !42; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:58:17 ] line no:50
  DBG_VALUE $noreg, $noreg, !"x", !DIExpression(DW_OP_plus_uconst, 5, DW_OP_stack_value), debug-location !42; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:58:17 ] line no:50
  DBG_VALUE $r15, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:57
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 10, implicit-def dead $eflags, debug-location !40; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  $rdi = MOV64rr $rbx, debug-location !43; c/idempotent_outline.c:58:17
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !43; c/idempotent_outline.c:58:17
  STACKMAP 6, 0, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !35; c/idempotent_outline.c:0
  $r14 = MOV64rr $rax, debug-location !43; c/idempotent_outline.c:58:17
  JMP_1 %bb.3, debug-location !35; c/idempotent_outline.c:0

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 2, debug-location !44; c/idempotent_outline.c:59:12
  $esi = MOV32ri 3, debug-location !44; c/idempotent_outline.c:59:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !44; c/idempotent_outline.c:59:12
  DBG_VALUE $r14, $noreg, !"b", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:58
  renamable $r14 = ADD64rr killed renamable $r14(tied-def 0), killed renamable $r15, implicit-def dead $eflags, debug-location !44; c/idempotent_outline.c:59:12
  JMP_1 %bb.5, debug-location !45; c/idempotent_outline.c:59:3

bb.4 (%ir-block.12, bb_id 4):
; predecessors: %bb.5
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 2, debug-location !45; c/idempotent_outline.c:59:3
  $esi = MOV32ri 4, debug-location !45; c/idempotent_outline.c:59:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !45; c/idempotent_outline.c:59:3
  $rax = MOV64rr killed $r14, debug-location !45; c/idempotent_outline.c:59:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !45; c/idempotent_outline.c:59:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !45; c/idempotent_outline.c:59:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !45; c/idempotent_outline.c:59:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !45; c/idempotent_outline.c:59:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !45; c/idempotent_outline.c:59:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !45; c/idempotent_outline.c:59:3
  RET64 implicit $rax, debug-location !45; c/idempotent_outline.c:59:3

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.3
  successors: %bb.4
  liveins: $r14
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !45; c/idempotent_outline.c:59:3
  DBG_VALUE $r15, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 2, debug-location !45; c/idempotent_outline.c:59:3
  $esi = MOV32ri 5, debug-location !45; c/idempotent_outline.c:59:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !45; c/idempotent_outline.c:59:3
  JMP_1 %bb.4, debug-location !45; c/idempotent_outline.c:59:3

# End machine code for function g.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: g
# Machine code for function g: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14 = MOV64rr $rdi
  $edi = MOV32ri 2, debug-location !35; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !35; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !35; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !35; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r14
  $edi = MOV32ri 2, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $esi = MOV32ri 1, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), debug-location !38; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:57:17 ] line no:50
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), debug-location !38; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:57:17 ] line no:50
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:55
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:55
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $r14, implicit-def dead $eflags, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $r14 = MOV64rr $rbx, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 2, implicit-def dead $eflags, debug-location !36; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $rdi = MOV64rr $r14, debug-location !39; c/idempotent_outline.c:57:17
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !39; c/idempotent_outline.c:57:17
  STACKMAP 5, 0, renamable $rbx, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !35; c/idempotent_outline.c:0
  $r15 = MOV64rr $rax, debug-location !39; c/idempotent_outline.c:57:17
  JMP_1 %bb.2, debug-location !35; c/idempotent_outline.c:0

bb.2 (%ir-block.7, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r15
  $edi = MOV32ri 2, debug-location !40; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  $esi = MOV32ri 2, debug-location !40; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !40; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  DBG_VALUE $noreg, $noreg, !"y", !DIExpression(DW_OP_plus_uconst, 5, DW_OP_stack_value), debug-location !42; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:58:17 ] line no:50
  DBG_VALUE $noreg, $noreg, !"x", !DIExpression(DW_OP_plus_uconst, 5, DW_OP_stack_value), debug-location !42; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:58:17 ] line no:50
  DBG_VALUE $r15, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:57
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 10, implicit-def dead $eflags, debug-location !40; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  $rdi = MOV64rr $rbx, debug-location !43; c/idempotent_outline.c:58:17
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !43; c/idempotent_outline.c:58:17
  STACKMAP 6, 0, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !35; c/idempotent_outline.c:0
  $r14 = MOV64rr $rax, debug-location !43; c/idempotent_outline.c:58:17
  JMP_1 %bb.3, debug-location !35; c/idempotent_outline.c:0

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 2, debug-location !44; c/idempotent_outline.c:59:12
  $esi = MOV32ri 3, debug-location !44; c/idempotent_outline.c:59:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !44; c/idempotent_outline.c:59:12
  DBG_VALUE $r14, $noreg, !"b", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:58
  renamable $r14 = ADD64rr killed renamable $r14(tied-def 0), killed renamable $r15, implicit-def dead $eflags, debug-location !44; c/idempotent_outline.c:59:12
  JMP_1 %bb.5, debug-location !45; c/idempotent_outline.c:59:3

bb.4 (%ir-block.12, bb_id 4):
; predecessors: %bb.5
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 2, debug-location !45; c/idempotent_outline.c:59:3
  $esi = MOV32ri 4, debug-location !45; c/idempotent_outline.c:59:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !45; c/idempotent_outline.c:59:3
  $rax = MOV64rr killed $r14, debug-location !45; c/idempotent_outline.c:59:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !45; c/idempotent_outline.c:59:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !45; c/idempotent_outline.c:59:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !45; c/idempotent_outline.c:59:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !45; c/idempotent_outline.c:59:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !45; c/idempotent_outline.c:59:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !45; c/idempotent_outline.c:59:3
  RET64 implicit $rax, debug-location !45; c/idempotent_outline.c:59:3

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.3
  successors: %bb.4
  liveins: $r14
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !45; c/idempotent_outline.c:59:3
  DBG_VALUE $r15, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 2, debug-location !45; c/idempotent_outline.c:59:3
  $esi = MOV32ri 5, debug-location !45; c/idempotent_outline.c:59:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !45; c/idempotent_outline.c:59:3
  JMP_1 %bb.4, debug-location !45; c/idempotent_outline.c:59:3

# End machine code for function g.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: f
# Machine code for function f: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $r14 = MOV64rr $rsi
  $r15 = MOV64rr $rdi
  $edi = MOV32ri 4, debug-location !54; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !54; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !54; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !54; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14, $r15
  $edi = MOV32ri 4, debug-location !55; c/idempotent_outline.c:64:10
  $esi = MOV32ri 1, debug-location !55; c/idempotent_outline.c:64:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !55; c/idempotent_outline.c:64:10
  DBG_VALUE $r14, $noreg, !"y", !DIExpression(), debug-location !54; c/idempotent_outline.c:0 line no:63
  DBG_VALUE $r15, $noreg, !"x", !DIExpression(), debug-location !54; c/idempotent_outline.c:0 line no:63
  $rdi = MOV64rr $r15, debug-location !55; c/idempotent_outline.c:64:10
  $rsi = MOV64rr $r14, debug-location !55; c/idempotent_outline.c:64:10
  CALL64pcrel32 @g, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !55; c/idempotent_outline.c:64:10
  STACKMAP 3, 0, killed renamable $r15, 3, killed renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !56; c/idempotent_outline.c:64:3
  $rbx = MOV64rr $rax, debug-location !55; c/idempotent_outline.c:64:10
  JMP_1 %bb.2, debug-location !56; c/idempotent_outline.c:64:3

bb.2 (%ir-block.5, bb_id 2):
; predecessors: %bb.1
  successors: %bb.4
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"x", !DIExpression(), debug-location !54; c/idempotent_outline.c:0 line no:63
  DBG_VALUE $r14, $noreg, !"y", !DIExpression(), debug-location !54; c/idempotent_outline.c:0 line no:63
  $edi = MOV32ri 4, debug-location !56; c/idempotent_outline.c:64:3
  $esi = MOV32ri 2, debug-location !56; c/idempotent_outline.c:64:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !56; c/idempotent_outline.c:64:3
  JMP_1 %bb.4, debug-location !56; c/idempotent_outline.c:64:3

bb.3 (%ir-block.6, bb_id 3):
; predecessors: %bb.4
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"x", !DIExpression(), debug-location !54; c/idempotent_outline.c:0 line no:63
  DBG_VALUE $r14, $noreg, !"y", !DIExpression(), debug-location !54; c/idempotent_outline.c:0 line no:63
  $edi = MOV32ri 4, debug-location !56; c/idempotent_outline.c:64:3
  $esi = MOV32ri 3, debug-location !56; c/idempotent_outline.c:64:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !56; c/idempotent_outline.c:64:3
  $rax = MOV64rr killed $rbx, debug-location !56; c/idempotent_outline.c:64:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !56; c/idempotent_outline.c:64:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !56; c/idempotent_outline.c:64:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !56; c/idempotent_outline.c:64:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !56; c/idempotent_outline.c:64:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !56; c/idempotent_outline.c:64:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !56; c/idempotent_outline.c:64:3
  RET64 implicit $rax, debug-location !56; c/idempotent_outline.c:64:3

bb.4 (%ir-block.7, bb_id 4):
; predecessors: %bb.2
  successors: %bb.3
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !56; c/idempotent_outline.c:64:3
  DBG_VALUE $r15, $noreg, !"x", !DIExpression(), debug-location !54; c/idempotent_outline.c:0 line no:63
  DBG_VALUE $r14, $noreg, !"y", !DIExpression(), debug-location !54; c/idempotent_outline.c:0 line no:63
  $edi = MOV32ri 4, debug-location !56; c/idempotent_outline.c:64:3
  $esi = MOV32ri 4, debug-location !56; c/idempotent_outline.c:64:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !56; c/idempotent_outline.c:64:3
  JMP_1 %bb.3, debug-location !56; c/idempotent_outline.c:64:3

# End machine code for function f.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 5
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !80; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 5, debug-location !81; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !81; c/idempotent_outline.c:68:14
  $r15 = MOV64rr $rax, debug-location !81; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !80; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !82; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r15, debug-location !82; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !83; c/idempotent_outline.c:70:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !83; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !83; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !84; c/idempotent_outline.c:70:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !85; c/idempotent_outline.c:70:20
  $rbx = MOV64rr $rax, debug-location !85; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !85; c/idempotent_outline.c:70:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !85 :: (store (s64) into %ir.5); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !80; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !87; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !87; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !87 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !92; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !80; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !94; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !94; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !94; c/idempotent_outline.c:74:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !94; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !96; c/idempotent_outline.c:75:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !96; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !96; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:75:10
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !98; c/idempotent_outline.c:75:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !98; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !98; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !98; c/idempotent_outline.c:75:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !99; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !99; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !99; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r15, debug-location !99; c/idempotent_outline.c:76:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !99; c/idempotent_outline.c:76:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !99 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !100; c/idempotent_outline.c:77:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !100; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:77:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !100 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $rbx, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !100; c/idempotent_outline.c:77:19
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !101; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !100; c/idempotent_outline.c:77:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  JMP_1 %bb.12, debug-location !101; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 5, debug-location !102; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !102; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:78:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !102 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !105 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !106; c/idempotent_outline.c:78:56
  STACKMAP 10, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !107; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !107; c/idempotent_outline.c:78:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !107; c/idempotent_outline.c:78:5
  $r13 = MOV64rr $rax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !107; c/idempotent_outline.c:78:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r12, debug-location !107; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !107; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r13, debug-location !107; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !108; c/idempotent_outline.c:79:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !108; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !108; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !108; c/idempotent_outline.c:79:6
  STACKMAP 11, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !108 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !108; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !108 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !98; c/idempotent_outline.c:75:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !112; c/idempotent_outline.c:81:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !112 :: (load (s64) from %ir.5); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !113; c/idempotent_outline.c:82:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 5, debug-location !113; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !113; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r15, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !113; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !114; c/idempotent_outline.c:84:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !114; c/idempotent_outline.c:84:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !115; c/idempotent_outline.c:83:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !115; c/idempotent_outline.c:83:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 5
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !115; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !115; c/idempotent_outline.c:83:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !115; c/idempotent_outline.c:83:3
  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !115; c/idempotent_outline.c:83:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 5
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !80; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 5, debug-location !81; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !81; c/idempotent_outline.c:68:14
  $r15 = MOV64rr $rax, debug-location !81; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !80; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !82; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r15, debug-location !82; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !83; c/idempotent_outline.c:70:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !83; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !83; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !84; c/idempotent_outline.c:70:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !85; c/idempotent_outline.c:70:20
  $rbx = MOV64rr $rax, debug-location !85; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !85; c/idempotent_outline.c:70:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !85 :: (store (s64) into %ir.5); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !80; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !87; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !87; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !87 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !92; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !80; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !94; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !94; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !94; c/idempotent_outline.c:74:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !94; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !96; c/idempotent_outline.c:75:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !96; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !96; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:75:10
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !98; c/idempotent_outline.c:75:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !98; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !98; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !98; c/idempotent_outline.c:75:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !99; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !99; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !99; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r15, debug-location !99; c/idempotent_outline.c:76:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !99; c/idempotent_outline.c:76:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !99 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !100; c/idempotent_outline.c:77:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !100; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:77:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !100 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $rbx, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !100; c/idempotent_outline.c:77:19
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !101; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !100; c/idempotent_outline.c:77:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  JMP_1 %bb.12, debug-location !101; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 5, debug-location !102; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !102; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:78:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !102 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !105 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !106; c/idempotent_outline.c:78:56
  STACKMAP 10, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !107; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !107; c/idempotent_outline.c:78:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !107; c/idempotent_outline.c:78:5
  $r13 = MOV64rr $rax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !107; c/idempotent_outline.c:78:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r12, debug-location !107; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !107; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r13, debug-location !107; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !108; c/idempotent_outline.c:79:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !108; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !108; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !108; c/idempotent_outline.c:79:6
  STACKMAP 11, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !108 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !108; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !108 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !98; c/idempotent_outline.c:75:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !112; c/idempotent_outline.c:81:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !112 :: (load (s64) from %ir.5); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !113; c/idempotent_outline.c:82:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 5, debug-location !113; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !113; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r15, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !113; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !114; c/idempotent_outline.c:84:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !114; c/idempotent_outline.c:84:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !115; c/idempotent_outline.c:83:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !115; c/idempotent_outline.c:83:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 5
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !115; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !115; c/idempotent_outline.c:83:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !115; c/idempotent_outline.c:83:3
  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !115; c/idempotent_outline.c:83:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 5
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !80; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 5, debug-location !81; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !81; c/idempotent_outline.c:68:14
  $r15 = MOV64rr $rax, debug-location !81; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !80; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !82; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r15, debug-location !82; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !83; c/idempotent_outline.c:70:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !83; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !83; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !84; c/idempotent_outline.c:70:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !85; c/idempotent_outline.c:70:20
  $rbx = MOV64rr $rax, debug-location !85; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !85; c/idempotent_outline.c:70:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !85 :: (store (s64) into %ir.5); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !80; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !87; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !87; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !87 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !92; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !80; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !94; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !94; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !94; c/idempotent_outline.c:74:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !94; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !96; c/idempotent_outline.c:75:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !96; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !96; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:75:10
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !98; c/idempotent_outline.c:75:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !98; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !98; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !98; c/idempotent_outline.c:75:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !99; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !99; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !99; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r15, debug-location !99; c/idempotent_outline.c:76:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !99; c/idempotent_outline.c:76:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !99 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !100; c/idempotent_outline.c:77:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !100; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:77:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !100 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $rbx, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !100; c/idempotent_outline.c:77:19
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !101; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !100; c/idempotent_outline.c:77:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  JMP_1 %bb.12, debug-location !101; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 5, debug-location !102; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !102; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:78:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !102 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !105 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !106; c/idempotent_outline.c:78:56
  STACKMAP 10, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !107; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !107; c/idempotent_outline.c:78:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !107; c/idempotent_outline.c:78:5
  $r13 = MOV64rr $rax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !107; c/idempotent_outline.c:78:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r12, debug-location !107; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !107; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r13, debug-location !107; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !108; c/idempotent_outline.c:79:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !108; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !108; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !108; c/idempotent_outline.c:79:6
  STACKMAP 11, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !108 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !108; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !108 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !98; c/idempotent_outline.c:75:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !112; c/idempotent_outline.c:81:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !112 :: (load (s64) from %ir.5); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !113; c/idempotent_outline.c:82:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 5, debug-location !113; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !113; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r15, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !113; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !114; c/idempotent_outline.c:84:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !114; c/idempotent_outline.c:84:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !115; c/idempotent_outline.c:83:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !115; c/idempotent_outline.c:83:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 5
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !115; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !115; c/idempotent_outline.c:83:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !115; c/idempotent_outline.c:83:3
  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !115; c/idempotent_outline.c:83:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 5
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !80; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 5, debug-location !81; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !81; c/idempotent_outline.c:68:14
  $r15 = MOV64rr $rax, debug-location !81; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !80; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !82; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r15, debug-location !82; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !83; c/idempotent_outline.c:70:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !83; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !83; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !84; c/idempotent_outline.c:70:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !85; c/idempotent_outline.c:70:20
  $rbx = MOV64rr $rax, debug-location !85; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !85; c/idempotent_outline.c:70:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !85 :: (store (s64) into %ir.5); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !80; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !87; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !87; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !87 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !92; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !80; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !94; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !94; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !94; c/idempotent_outline.c:74:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !94; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !96; c/idempotent_outline.c:75:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !96; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !96; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:75:10
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !98; c/idempotent_outline.c:75:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !98; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !98; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !98; c/idempotent_outline.c:75:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !99; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !99; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !99; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r15, debug-location !99; c/idempotent_outline.c:76:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !99; c/idempotent_outline.c:76:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !99 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !100; c/idempotent_outline.c:77:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !100; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:77:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !100 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $rbx, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !100; c/idempotent_outline.c:77:19
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !101; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !100; c/idempotent_outline.c:77:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  JMP_1 %bb.12, debug-location !101; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 5, debug-location !102; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !102; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:78:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !102 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !105 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !106; c/idempotent_outline.c:78:56
  STACKMAP 10, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !107; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !107; c/idempotent_outline.c:78:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !107; c/idempotent_outline.c:78:5
  $r13 = MOV64rr $rax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !107; c/idempotent_outline.c:78:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r12, debug-location !107; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !107; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r13, debug-location !107; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !108; c/idempotent_outline.c:79:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !108; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !108; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !108; c/idempotent_outline.c:79:6
  STACKMAP 11, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !108 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !108; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !108 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !98; c/idempotent_outline.c:75:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !112; c/idempotent_outline.c:81:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !112 :: (load (s64) from %ir.5); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !113; c/idempotent_outline.c:82:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 5, debug-location !113; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !113; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r15, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !113; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !114; c/idempotent_outline.c:84:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !114; c/idempotent_outline.c:84:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !115; c/idempotent_outline.c:83:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !115; c/idempotent_outline.c:83:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 5
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !115; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !115; c/idempotent_outline.c:83:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !115; c/idempotent_outline.c:83:3
  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !115; c/idempotent_outline.c:83:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 5
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !80; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 5, debug-location !81; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !81; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !81; c/idempotent_outline.c:68:14
  $r15 = MOV64rr $rax, debug-location !81; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !80; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !82; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r15, debug-location !82; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !82; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !82; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !83; c/idempotent_outline.c:70:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !83; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !83; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !84; c/idempotent_outline.c:70:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !85; c/idempotent_outline.c:70:20
  $rbx = MOV64rr $rax, debug-location !85; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !85; c/idempotent_outline.c:70:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !85; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !85 :: (store (s64) into %ir.5); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !80; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !87; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !87; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !87 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !92; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !80; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !94; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !94; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !94; c/idempotent_outline.c:74:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !94; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !96; c/idempotent_outline.c:75:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !96; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !96; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:75:10
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !98; c/idempotent_outline.c:75:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 5, debug-location !98; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !98; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !98; c/idempotent_outline.c:75:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !99; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !99; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !99; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r15, debug-location !99; c/idempotent_outline.c:76:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !99; c/idempotent_outline.c:76:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !99 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !100; c/idempotent_outline.c:77:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 5, debug-location !100; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:77:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !100 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $rbx, debug-location !100; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !100; c/idempotent_outline.c:77:19
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !101; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !100; c/idempotent_outline.c:77:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:68
  JMP_1 %bb.12, debug-location !101; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 5, debug-location !102; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !102; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:78:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !102 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !105 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r13, debug-location !106; c/idempotent_outline.c:78:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !106; c/idempotent_outline.c:78:56
  STACKMAP 10, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !107; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !107; c/idempotent_outline.c:78:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !101; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !107; c/idempotent_outline.c:78:5
  $r13 = MOV64rr $rax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !107; c/idempotent_outline.c:78:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !107; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !107; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r12, debug-location !107; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !107; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r13, debug-location !107; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !107; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !107; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !108; c/idempotent_outline.c:79:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 5, debug-location !108; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !108; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !108; c/idempotent_outline.c:79:6
  STACKMAP 11, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !98; c/idempotent_outline.c:75:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !108 :: (load (s64) from %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !108; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !80; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !108 :: (store (s64) into %ir.6, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !97; c/idempotent_outline.c:75:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !98; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !98; c/idempotent_outline.c:75:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !112; c/idempotent_outline.c:81:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 5, debug-location !112; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !112; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !112; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !112 :: (load (s64) from %ir.5); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !112; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !113; c/idempotent_outline.c:82:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 5, debug-location !113; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !113; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r15, debug-location !113; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !113; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !114; c/idempotent_outline.c:84:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !114; c/idempotent_outline.c:84:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 5, debug-location !114; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !114; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !114; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !115; c/idempotent_outline.c:83:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !115; c/idempotent_outline.c:83:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 5
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !115; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !115; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !115; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !115; c/idempotent_outline.c:83:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !115; c/idempotent_outline.c:83:3
  $edi = MOV32ri 5, debug-location !115; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !115; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !115; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !115; c/idempotent_outline.c:83:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_g
# Machine code for function __yk_unopt_g: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14 = MOV64rr $rdi
  $edi = MOV32ri 17, debug-location !218; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !218; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !218; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !218; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r14
  $edi = MOV32ri 17, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $esi = MOV32ri 1, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), debug-location !221; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:57:17 ] line no:50
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), debug-location !221; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:57:17 ] line no:50
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:55
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:55
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $r14, implicit-def dead $eflags, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $r15 = MOV64rr $rbx, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 2, implicit-def dead $eflags, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $rdi = MOV64rr $r15, debug-location !222; c/idempotent_outline.c:57:17
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !222; c/idempotent_outline.c:57:17
  STACKMAP 13, 0, renamable $rbx, 3, killed renamable $r15, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !218; c/idempotent_outline.c:0
  $r14 = MOV64rr $rax, debug-location !222; c/idempotent_outline.c:57:17
  JMP_1 %bb.2, debug-location !218; c/idempotent_outline.c:0

bb.2 (%ir-block.7, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14
  $edi = MOV32ri 17, debug-location !223; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  $esi = MOV32ri 2, debug-location !223; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !223; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  DBG_VALUE $noreg, $noreg, !"y", !DIExpression(DW_OP_plus_uconst, 5, DW_OP_stack_value), debug-location !225; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:58:17 ] line no:50
  DBG_VALUE $noreg, $noreg, !"x", !DIExpression(DW_OP_plus_uconst, 5, DW_OP_stack_value), debug-location !225; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:58:17 ] line no:50
  DBG_VALUE $r14, $noreg, !"a", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:57
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 10, implicit-def dead $eflags, debug-location !223; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  $rdi = MOV64rr $rbx, debug-location !226; c/idempotent_outline.c:58:17
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !226; c/idempotent_outline.c:58:17
  STACKMAP 7, 0, renamable $r14, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !218; c/idempotent_outline.c:0
  $r15 = MOV64rr $rax, debug-location !226; c/idempotent_outline.c:58:17
  JMP_1 %bb.3, debug-location !218; c/idempotent_outline.c:0

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"a", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 17, debug-location !227; c/idempotent_outline.c:59:12
  $esi = MOV32ri 3, debug-location !227; c/idempotent_outline.c:59:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !227; c/idempotent_outline.c:59:12
  DBG_VALUE $r15, $noreg, !"b", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:58
  renamable $r15 = ADD64rr killed renamable $r15(tied-def 0), killed renamable $r14, implicit-def dead $eflags, debug-location !227; c/idempotent_outline.c:59:12
  JMP_1 %bb.5, debug-location !228; c/idempotent_outline.c:59:3

bb.4 (%ir-block.12, bb_id 4):
; predecessors: %bb.5
  liveins: $r15
  DBG_VALUE $r14, $noreg, !"a", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:59:3
  $esi = MOV32ri 4, debug-location !228; c/idempotent_outline.c:59:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:59:3
  $rax = MOV64rr killed $r15, debug-location !228; c/idempotent_outline.c:59:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !228; c/idempotent_outline.c:59:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/idempotent_outline.c:59:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/idempotent_outline.c:59:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/idempotent_outline.c:59:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/idempotent_outline.c:59:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !228; c/idempotent_outline.c:59:3
  RET64 implicit $rax, debug-location !228; c/idempotent_outline.c:59:3

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.3
  successors: %bb.4
  liveins: $r15
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !228; c/idempotent_outline.c:59:3
  DBG_VALUE $r14, $noreg, !"a", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:59:3
  $esi = MOV32ri 5, debug-location !228; c/idempotent_outline.c:59:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:59:3
  JMP_1 %bb.4, debug-location !228; c/idempotent_outline.c:59:3

# End machine code for function __yk_unopt_g.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_g
# Machine code for function __yk_unopt_g: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14 = MOV64rr $rdi
  $edi = MOV32ri 17, debug-location !218; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !218; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !218; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !218; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r14
  $edi = MOV32ri 17, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $esi = MOV32ri 1, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), debug-location !221; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:57:17 ] line no:50
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), debug-location !221; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:57:17 ] line no:50
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:55
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:55
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $r14, implicit-def dead $eflags, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $r15 = MOV64rr $rbx, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 2, implicit-def dead $eflags, debug-location !219; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:57:17 ]
  $rdi = MOV64rr $r15, debug-location !222; c/idempotent_outline.c:57:17
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !222; c/idempotent_outline.c:57:17
  STACKMAP 13, 0, renamable $rbx, 3, killed renamable $r15, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !218; c/idempotent_outline.c:0
  $r14 = MOV64rr $rax, debug-location !222; c/idempotent_outline.c:57:17
  JMP_1 %bb.2, debug-location !218; c/idempotent_outline.c:0

bb.2 (%ir-block.7, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14
  $edi = MOV32ri 17, debug-location !223; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  $esi = MOV32ri 2, debug-location !223; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !223; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  DBG_VALUE $noreg, $noreg, !"y", !DIExpression(DW_OP_plus_uconst, 5, DW_OP_stack_value), debug-location !225; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:58:17 ] line no:50
  DBG_VALUE $noreg, $noreg, !"x", !DIExpression(DW_OP_plus_uconst, 5, DW_OP_stack_value), debug-location !225; c/idempotent_outline.c:0 @[ c/idempotent_outline.c:58:17 ] line no:50
  DBG_VALUE $r14, $noreg, !"a", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:57
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 10, implicit-def dead $eflags, debug-location !223; c/idempotent_outline.c:51:12 @[ c/idempotent_outline.c:58:17 ]
  $rdi = MOV64rr $rbx, debug-location !226; c/idempotent_outline.c:58:17
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !226; c/idempotent_outline.c:58:17
  STACKMAP 7, 0, renamable $r14, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !218; c/idempotent_outline.c:0
  $r15 = MOV64rr $rax, debug-location !226; c/idempotent_outline.c:58:17
  JMP_1 %bb.3, debug-location !218; c/idempotent_outline.c:0

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"a", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 17, debug-location !227; c/idempotent_outline.c:59:12
  $esi = MOV32ri 3, debug-location !227; c/idempotent_outline.c:59:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !227; c/idempotent_outline.c:59:12
  DBG_VALUE $r15, $noreg, !"b", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:58
  renamable $r15 = ADD64rr killed renamable $r15(tied-def 0), killed renamable $r14, implicit-def dead $eflags, debug-location !227; c/idempotent_outline.c:59:12
  JMP_1 %bb.5, debug-location !228; c/idempotent_outline.c:59:3

bb.4 (%ir-block.12, bb_id 4):
; predecessors: %bb.5
  liveins: $r15
  DBG_VALUE $r14, $noreg, !"a", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:59:3
  $esi = MOV32ri 4, debug-location !228; c/idempotent_outline.c:59:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:59:3
  $rax = MOV64rr killed $r15, debug-location !228; c/idempotent_outline.c:59:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !228; c/idempotent_outline.c:59:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/idempotent_outline.c:59:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/idempotent_outline.c:59:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/idempotent_outline.c:59:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !228; c/idempotent_outline.c:59:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !228; c/idempotent_outline.c:59:3
  RET64 implicit $rax, debug-location !228; c/idempotent_outline.c:59:3

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.3
  successors: %bb.4
  liveins: $r15
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !228; c/idempotent_outline.c:59:3
  DBG_VALUE $r14, $noreg, !"a", !DIExpression(), debug-location !218; c/idempotent_outline.c:0 line no:57
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:59:3
  $esi = MOV32ri 5, debug-location !228; c/idempotent_outline.c:59:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:59:3
  JMP_1 %bb.4, debug-location !228; c/idempotent_outline.c:59:3

# End machine code for function __yk_unopt_g.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_f
# Machine code for function __yk_unopt_f: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $r14 = MOV64rr $rsi
  $r15 = MOV64rr $rdi
  $edi = MOV32ri 18, debug-location !233; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !233; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !233; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !233; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14, $r15
  $edi = MOV32ri 18, debug-location !234; c/idempotent_outline.c:64:10
  $esi = MOV32ri 1, debug-location !234; c/idempotent_outline.c:64:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !234; c/idempotent_outline.c:64:10
  DBG_VALUE $r14, $noreg, !"y", !DIExpression(), debug-location !233; c/idempotent_outline.c:0 line no:63
  DBG_VALUE $r15, $noreg, !"x", !DIExpression(), debug-location !233; c/idempotent_outline.c:0 line no:63
  $rdi = MOV64rr $r15, debug-location !234; c/idempotent_outline.c:64:10
  $rsi = MOV64rr $r14, debug-location !234; c/idempotent_outline.c:64:10
  CALL64pcrel32 @__yk_unopt_g, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !234; c/idempotent_outline.c:64:10
  STACKMAP 12, 0, killed renamable $r15, 3, killed renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !235; c/idempotent_outline.c:64:3
  $rbx = MOV64rr $rax, debug-location !234; c/idempotent_outline.c:64:10
  JMP_1 %bb.2, debug-location !235; c/idempotent_outline.c:64:3

bb.2 (%ir-block.5, bb_id 2):
; predecessors: %bb.1
  successors: %bb.4
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"x", !DIExpression(), debug-location !233; c/idempotent_outline.c:0 line no:63
  DBG_VALUE $r14, $noreg, !"y", !DIExpression(), debug-location !233; c/idempotent_outline.c:0 line no:63
  $edi = MOV32ri 18, debug-location !235; c/idempotent_outline.c:64:3
  $esi = MOV32ri 2, debug-location !235; c/idempotent_outline.c:64:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !235; c/idempotent_outline.c:64:3
  JMP_1 %bb.4, debug-location !235; c/idempotent_outline.c:64:3

bb.3 (%ir-block.6, bb_id 3):
; predecessors: %bb.4
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"x", !DIExpression(), debug-location !233; c/idempotent_outline.c:0 line no:63
  DBG_VALUE $r14, $noreg, !"y", !DIExpression(), debug-location !233; c/idempotent_outline.c:0 line no:63
  $edi = MOV32ri 18, debug-location !235; c/idempotent_outline.c:64:3
  $esi = MOV32ri 3, debug-location !235; c/idempotent_outline.c:64:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !235; c/idempotent_outline.c:64:3
  $rax = MOV64rr killed $rbx, debug-location !235; c/idempotent_outline.c:64:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !235; c/idempotent_outline.c:64:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !235; c/idempotent_outline.c:64:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !235; c/idempotent_outline.c:64:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !235; c/idempotent_outline.c:64:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !235; c/idempotent_outline.c:64:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !235; c/idempotent_outline.c:64:3
  RET64 implicit $rax, debug-location !235; c/idempotent_outline.c:64:3

bb.4 (%ir-block.7, bb_id 4):
; predecessors: %bb.2
  successors: %bb.3
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !235; c/idempotent_outline.c:64:3
  DBG_VALUE $r15, $noreg, !"x", !DIExpression(), debug-location !233; c/idempotent_outline.c:0 line no:63
  DBG_VALUE $r14, $noreg, !"y", !DIExpression(), debug-location !233; c/idempotent_outline.c:0 line no:63
  $edi = MOV32ri 18, debug-location !235; c/idempotent_outline.c:64:3
  $esi = MOV32ri 4, debug-location !235; c/idempotent_outline.c:64:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !235; c/idempotent_outline.c:64:3
  JMP_1 %bb.3, debug-location !235; c/idempotent_outline.c:64:3

# End machine code for function __yk_unopt_f.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 19
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !245; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 19, debug-location !246; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:68:14
  $r13 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !245; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !247; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r13, debug-location !247; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !248; c/idempotent_outline.c:70:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !248; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !248; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !248; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !249; c/idempotent_outline.c:70:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !250; c/idempotent_outline.c:70:20
  $r14 = MOV64rr $rax, debug-location !250; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !250; c/idempotent_outline.c:70:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !250 :: (store (s64) into %ir.4); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !245; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !252; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !252 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !253; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !245; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !254; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !254; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !254; c/idempotent_outline.c:74:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !254; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !255; c/idempotent_outline.c:75:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !255; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !255; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !255; c/idempotent_outline.c:75:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !255 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !257; c/idempotent_outline.c:75:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !257; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !257; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !257; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !257; c/idempotent_outline.c:75:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !258; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !258; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !258; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !258; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r13, debug-location !258; c/idempotent_outline.c:76:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !258; c/idempotent_outline.c:76:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !258 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !259; c/idempotent_outline.c:77:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !259; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !259; c/idempotent_outline.c:77:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !259 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r14, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !259; c/idempotent_outline.c:77:19
  STACKMAP 14, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !260; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !259; c/idempotent_outline.c:77:19
  JMP_1 %bb.12, debug-location !260; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !261; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !261; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !261; c/idempotent_outline.c:78:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !261 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !262 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !263; c/idempotent_outline.c:78:56
  STACKMAP 15, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !264; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !264; c/idempotent_outline.c:78:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !264; c/idempotent_outline.c:78:5
  $r12 = MOV64rr $rax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !264; c/idempotent_outline.c:78:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r14, debug-location !264; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !264; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r12, debug-location !264; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !265; c/idempotent_outline.c:79:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !265; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !265; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !265; c/idempotent_outline.c:79:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !265 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !265; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !265 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !257; c/idempotent_outline.c:75:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !268; c/idempotent_outline.c:81:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !268 :: (load (s64) from %ir.4); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !269; c/idempotent_outline.c:82:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 19, debug-location !269; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !269; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r13, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !269; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !270; c/idempotent_outline.c:84:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !270; c/idempotent_outline.c:84:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !271; c/idempotent_outline.c:83:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !271; c/idempotent_outline.c:83:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 19
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !271; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !271; c/idempotent_outline.c:83:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !271; c/idempotent_outline.c:83:3
  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !271; c/idempotent_outline.c:83:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 19
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !245; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 19, debug-location !246; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:68:14
  $r13 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !245; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !247; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r13, debug-location !247; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !248; c/idempotent_outline.c:70:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !248; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !248; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !248; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !249; c/idempotent_outline.c:70:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !250; c/idempotent_outline.c:70:20
  $r14 = MOV64rr $rax, debug-location !250; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !250; c/idempotent_outline.c:70:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !250 :: (store (s64) into %ir.4); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !245; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !252; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !252 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !253; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !245; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !254; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !254; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !254; c/idempotent_outline.c:74:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !254; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !255; c/idempotent_outline.c:75:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !255; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !255; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !255; c/idempotent_outline.c:75:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !255 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !257; c/idempotent_outline.c:75:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !257; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !257; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !257; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !257; c/idempotent_outline.c:75:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !258; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !258; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !258; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !258; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r13, debug-location !258; c/idempotent_outline.c:76:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !258; c/idempotent_outline.c:76:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !258 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !259; c/idempotent_outline.c:77:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !259; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !259; c/idempotent_outline.c:77:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !259 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r14, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !259; c/idempotent_outline.c:77:19
  STACKMAP 14, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !260; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !259; c/idempotent_outline.c:77:19
  JMP_1 %bb.12, debug-location !260; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !261; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !261; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !261; c/idempotent_outline.c:78:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !261 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !262 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !263; c/idempotent_outline.c:78:56
  STACKMAP 15, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !264; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !264; c/idempotent_outline.c:78:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !264; c/idempotent_outline.c:78:5
  $r12 = MOV64rr $rax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !264; c/idempotent_outline.c:78:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r14, debug-location !264; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !264; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r12, debug-location !264; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !265; c/idempotent_outline.c:79:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !265; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !265; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !265; c/idempotent_outline.c:79:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !265 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !265; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !265 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !257; c/idempotent_outline.c:75:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !268; c/idempotent_outline.c:81:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !268 :: (load (s64) from %ir.4); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !269; c/idempotent_outline.c:82:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 19, debug-location !269; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !269; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r13, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !269; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !270; c/idempotent_outline.c:84:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !270; c/idempotent_outline.c:84:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !271; c/idempotent_outline.c:83:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !271; c/idempotent_outline.c:83:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 19
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !271; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !271; c/idempotent_outline.c:83:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !271; c/idempotent_outline.c:83:3
  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !271; c/idempotent_outline.c:83:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 19
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !245; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 19, debug-location !246; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:68:14
  $r13 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !245; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !247; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r13, debug-location !247; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !248; c/idempotent_outline.c:70:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !248; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !248; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !248; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !249; c/idempotent_outline.c:70:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !250; c/idempotent_outline.c:70:20
  $r14 = MOV64rr $rax, debug-location !250; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !250; c/idempotent_outline.c:70:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !250 :: (store (s64) into %ir.4); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !245; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !252; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !252 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !253; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !245; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !254; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !254; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !254; c/idempotent_outline.c:74:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !254; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !255; c/idempotent_outline.c:75:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !255; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !255; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !255; c/idempotent_outline.c:75:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !255 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !257; c/idempotent_outline.c:75:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !257; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !257; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !257; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !257; c/idempotent_outline.c:75:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !258; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !258; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !258; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !258; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r13, debug-location !258; c/idempotent_outline.c:76:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !258; c/idempotent_outline.c:76:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !258 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !259; c/idempotent_outline.c:77:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !259; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !259; c/idempotent_outline.c:77:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !259 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r14, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !259; c/idempotent_outline.c:77:19
  STACKMAP 14, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !260; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !259; c/idempotent_outline.c:77:19
  JMP_1 %bb.12, debug-location !260; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !261; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !261; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !261; c/idempotent_outline.c:78:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !261 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !262 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !263; c/idempotent_outline.c:78:56
  STACKMAP 15, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !264; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !264; c/idempotent_outline.c:78:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !264; c/idempotent_outline.c:78:5
  $r12 = MOV64rr $rax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !264; c/idempotent_outline.c:78:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r14, debug-location !264; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !264; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r12, debug-location !264; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !265; c/idempotent_outline.c:79:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !265; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !265; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !265; c/idempotent_outline.c:79:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !265 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !265; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !265 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !257; c/idempotent_outline.c:75:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !268; c/idempotent_outline.c:81:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !268 :: (load (s64) from %ir.4); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !269; c/idempotent_outline.c:82:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 19, debug-location !269; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !269; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r13, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !269; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !270; c/idempotent_outline.c:84:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !270; c/idempotent_outline.c:84:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !271; c/idempotent_outline.c:83:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !271; c/idempotent_outline.c:83:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 19
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !271; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !271; c/idempotent_outline.c:83:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !271; c/idempotent_outline.c:83:3
  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !271; c/idempotent_outline.c:83:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 19
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !245; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 19, debug-location !246; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:68:14
  $r13 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !245; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !247; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r13, debug-location !247; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !248; c/idempotent_outline.c:70:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !248; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !248; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !248; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !249; c/idempotent_outline.c:70:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !250; c/idempotent_outline.c:70:20
  $r14 = MOV64rr $rax, debug-location !250; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !250; c/idempotent_outline.c:70:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !250 :: (store (s64) into %ir.4); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !245; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !252; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !252 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !253; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !245; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !254; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !254; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !254; c/idempotent_outline.c:74:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !254; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !255; c/idempotent_outline.c:75:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !255; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !255; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !255; c/idempotent_outline.c:75:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !255 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !257; c/idempotent_outline.c:75:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !257; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !257; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !257; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !257; c/idempotent_outline.c:75:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !258; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !258; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !258; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !258; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r13, debug-location !258; c/idempotent_outline.c:76:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !258; c/idempotent_outline.c:76:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !258 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !259; c/idempotent_outline.c:77:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !259; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !259; c/idempotent_outline.c:77:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !259 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r14, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !259; c/idempotent_outline.c:77:19
  STACKMAP 14, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !260; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !259; c/idempotent_outline.c:77:19
  JMP_1 %bb.12, debug-location !260; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !261; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !261; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !261; c/idempotent_outline.c:78:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !261 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !262 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !263; c/idempotent_outline.c:78:56
  STACKMAP 15, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !264; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !264; c/idempotent_outline.c:78:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !264; c/idempotent_outline.c:78:5
  $r12 = MOV64rr $rax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !264; c/idempotent_outline.c:78:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r14, debug-location !264; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !264; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r12, debug-location !264; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !265; c/idempotent_outline.c:79:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !265; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !265; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !265; c/idempotent_outline.c:79:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !265 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !265; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !265 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !257; c/idempotent_outline.c:75:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !268; c/idempotent_outline.c:81:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !268 :: (load (s64) from %ir.4); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !269; c/idempotent_outline.c:82:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 19, debug-location !269; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !269; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r13, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !269; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !270; c/idempotent_outline.c:84:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !270; c/idempotent_outline.c:84:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !271; c/idempotent_outline.c:83:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !271; c/idempotent_outline.c:83:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 19
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !271; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !271; c/idempotent_outline.c:83:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !271; c/idempotent_outline.c:83:3
  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !271; c/idempotent_outline.c:83:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 19
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !245; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 19, debug-location !246; c/idempotent_outline.c:68:14
  $esi = MOV32ri 1, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:68:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:67
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !246; c/idempotent_outline.c:68:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:68:14
  $r13 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:68:14
  JMP_1 %bb.2, debug-location !245; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !247; c/idempotent_outline.c:69:3
  $esi = MOV32ri 2, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $rdi = MOV64rr $r13, debug-location !247; c/idempotent_outline.c:69:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:69:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !247; c/idempotent_outline.c:69:3
  JMP_1 %bb.3, debug-location !248; c/idempotent_outline.c:70:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !248; c/idempotent_outline.c:70:3
  $esi = MOV32ri 3, debug-location !248; c/idempotent_outline.c:70:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !248; c/idempotent_outline.c:70:3
  JMP_1 %bb.4, debug-location !249; c/idempotent_outline.c:70:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 4, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !250; c/idempotent_outline.c:70:20
  $r14 = MOV64rr $rax, debug-location !250; c/idempotent_outline.c:70:20
  JMP_1 %bb.5, debug-location !250; c/idempotent_outline.c:70:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !250; c/idempotent_outline.c:70:20
  $esi = MOV32ri 5, debug-location !250; c/idempotent_outline.c:70:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:70:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !250 :: (store (s64) into %ir.4); c/idempotent_outline.c:70:20
  JMP_1 %bb.6, debug-location !245; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:72:10
  $esi = MOV32ri 6, debug-location !252; c/idempotent_outline.c:72:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:72:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !252 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:72:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !93, debug-location !253; c/idempotent_outline.c:73:3
  JMP_1 %bb.7, debug-location !245; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !254; c/idempotent_outline.c:74:3
  $esi = MOV32ri 7, debug-location !254; c/idempotent_outline.c:74:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !254; c/idempotent_outline.c:74:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !95, debug-location !254; c/idempotent_outline.c:74:3
  JMP_1 %bb.8, debug-location !255; c/idempotent_outline.c:75:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !255; c/idempotent_outline.c:75:10
  $esi = MOV32ri 8, debug-location !255; c/idempotent_outline.c:75:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !255; c/idempotent_outline.c:75:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !255 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:75:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.9, debug-location !257; c/idempotent_outline.c:75:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:68
  $edi = MOV32ri 19, debug-location !257; c/idempotent_outline.c:75:3
  $esi = MOV32ri 9, debug-location !257; c/idempotent_outline.c:75:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !257; c/idempotent_outline.c:75:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !257; c/idempotent_outline.c:75:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !258; c/idempotent_outline.c:76:5
  $esi = MOV32ri 10, debug-location !258; c/idempotent_outline.c:76:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !258; c/idempotent_outline.c:76:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !258; c/idempotent_outline.c:76:5
  $rdi = MOV64rr $r13, debug-location !258; c/idempotent_outline.c:76:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !258; c/idempotent_outline.c:76:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !258 :: (load (s64) from %stack.0); c/idempotent_outline.c:76:5
  JMP_1 %bb.11, debug-location !259; c/idempotent_outline.c:77:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 19, debug-location !259; c/idempotent_outline.c:77:19
  $esi = MOV32ri 11, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !259; c/idempotent_outline.c:77:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !259 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:77:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r14, debug-location !259; c/idempotent_outline.c:77:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !259; c/idempotent_outline.c:77:19
  STACKMAP 14, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !260; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !259; c/idempotent_outline.c:77:19
  JMP_1 %bb.12, debug-location !260; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !261; c/idempotent_outline.c:78:13
  $esi = MOV32ri 12, debug-location !261; c/idempotent_outline.c:78:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !261; c/idempotent_outline.c:78:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !261 :: (load (s64) from @stderr, !tbaa !103); c/idempotent_outline.c:78:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !262 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:78:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $rdi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  $rsi = MOV64rr $r12, debug-location !263; c/idempotent_outline.c:78:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !263; c/idempotent_outline.c:78:56
  STACKMAP 15, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !264; c/idempotent_outline.c:78:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !264; c/idempotent_outline.c:78:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !260; c/idempotent_outline.c:0 line no:77
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 13, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !264; c/idempotent_outline.c:78:5
  $r12 = MOV64rr $rax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.14, debug-location !264; c/idempotent_outline.c:78:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !264; c/idempotent_outline.c:78:5
  $esi = MOV32ri 14, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !264; c/idempotent_outline.c:78:5
  renamable $rsi = MOV64ri @.str, debug-location !264; c/idempotent_outline.c:78:5
  $rdi = MOV64rr killed $r14, debug-location !264; c/idempotent_outline.c:78:5
  $rdx = MOV64rr killed $r15, debug-location !264; c/idempotent_outline.c:78:5
  $rcx = MOV64rr killed $r12, debug-location !264; c/idempotent_outline.c:78:5
  $al = MOV8ri 0, debug-location !264; c/idempotent_outline.c:78:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !264; c/idempotent_outline.c:78:5
  JMP_1 %bb.15, debug-location !265; c/idempotent_outline.c:79:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  $edi = MOV32ri 19, debug-location !265; c/idempotent_outline.c:79:6
  $esi = MOV32ri 15, debug-location !265; c/idempotent_outline.c:79:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !265; c/idempotent_outline.c:79:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !265 :: (load (s64) from %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !265; c/idempotent_outline.c:79:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !245; c/idempotent_outline.c:0 line no:72
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !265 :: (store (s64) into %ir.5, !tbaa !88); c/idempotent_outline.c:79:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !256; c/idempotent_outline.c:75:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !257 :: (load (s64) from %stack.0); c/idempotent_outline.c:75:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !257; c/idempotent_outline.c:75:3
  JMP_1 %bb.22, debug-location !257; c/idempotent_outline.c:75:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 16, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.17, debug-location !268; c/idempotent_outline.c:81:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 19, debug-location !268; c/idempotent_outline.c:81:3
  $esi = MOV32ri 17, debug-location !268; c/idempotent_outline.c:81:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !268; c/idempotent_outline.c:81:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !268 :: (load (s64) from %ir.4); c/idempotent_outline.c:81:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !268; c/idempotent_outline.c:81:3
  JMP_1 %bb.18, debug-location !269; c/idempotent_outline.c:82:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 19, debug-location !269; c/idempotent_outline.c:82:3
  $esi = MOV32ri 18, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !269; c/idempotent_outline.c:82:3
  $rdi = MOV64rr killed $r13, debug-location !269; c/idempotent_outline.c:82:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !269; c/idempotent_outline.c:82:3
  JMP_1 %bb.19, debug-location !270; c/idempotent_outline.c:84:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.20, debug-location !270; c/idempotent_outline.c:84:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 19, debug-location !270; c/idempotent_outline.c:84:1
  $esi = MOV32ri 20, debug-location !270; c/idempotent_outline.c:84:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !270; c/idempotent_outline.c:84:1
  JMP_1 %bb.21, debug-location !271; c/idempotent_outline.c:83:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 21, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.24, debug-location !271; c/idempotent_outline.c:83:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 19
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 23, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !271; c/idempotent_outline.c:83:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !271; c/idempotent_outline.c:83:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !271; c/idempotent_outline.c:83:3
  RET64 implicit $eax, debug-location !271; c/idempotent_outline.c:83:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !271; c/idempotent_outline.c:83:3
  $edi = MOV32ri 19, debug-location !271; c/idempotent_outline.c:83:3
  $esi = MOV32ri 24, debug-location !271; c/idempotent_outline.c:83:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !271; c/idempotent_outline.c:83:3
  JMP_1 %bb.23, debug-location !271; c/idempotent_outline.c:83:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
yk-jit-event: start-tracing
4: 28
yk-jit-event: stop-tracing
--- Begin aot ---
# IR format version: 0
# Num funcs: 27
# Num consts: 34
# Num global decls: 3
# Num types: 24
global_decl tls @shadowstack_0
global_decl @stderr
global_decl @.str

func h(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock_dummy(0i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:51: return x + y;
    call __yk_trace_basicblock_dummy(0i32, 1i32)
    %1_1: i64 = add %0_1, %0_0
    br bb3
  bb2:
    call __yk_trace_basicblock_dummy(0i32, 2i32)
    ret %1_1
  bb3:
    call __yk_trace_basicblock_dummy(0i32, 3i32)
    br bb2
}

func llvm.dbg.value(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

#[yk_outline]
func g(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock_dummy(2i32, 0i32)
    br bb1
  bb1:
    call __yk_trace_basicblock_dummy(2i32, 1i32)
    %1_1: i64 = add %0_1, %0_0
    %1_2: i64 = add %1_1, 2i64
    # idempotent_outline.c:57: uintptr_t a = yk_promote(h(x + 1, y + 1));
    %1_3: i64 = promote %1_2 [safepoint: 5i64, (%1_1, %1_2, %1_3)]
    br bb2
  bb2:
    # idempotent_outline.c:51: return x + y;
    call __yk_trace_basicblock_dummy(2i32, 2i32)
    %2_1: i64 = add %1_1, 10i64
    # idempotent_outline.c:58: uintptr_t b = yk_promote(h(y + 5, x + 5));
    %2_2: i64 = promote %2_1 [safepoint: 6i64, (%1_3, %2_1, %2_2)]
    br bb3
  bb3:
    # idempotent_outline.c:59: return a + b;
    call __yk_trace_basicblock_dummy(2i32, 3i32)
    %3_1: i64 = add %2_2, %1_3
    br bb5
  bb4:
    call __yk_trace_basicblock_dummy(2i32, 4i32)
    ret %3_1
  bb5:
    call __yk_trace_basicblock_dummy(2i32, 5i32)
    br bb4
}

func __yk_promote_usize(%arg0: i64) -> i64;

#[yk_idempotent, yk_outline]
func f(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock_dummy(4i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:64: return g(x, y);
    call __yk_trace_basicblock_dummy(4i32, 1i32)
    %1_1: i64 = call g(%0_0, %0_1) [safepoint: 3i64, (%0_0, %0_1)]
    br bb2
  bb2:
    call __yk_trace_basicblock_dummy(4i32, 2i32)
    br bb4
  bb3:
    call __yk_trace_basicblock_dummy(4i32, 3i32)
    ret %1_1
  bb4:
    call __yk_trace_basicblock_dummy(4i32, 4i32)
    br bb3
}

#[yk_outline]
func main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock_dummy(5i32, 0i32)
    %0_3: ptr = call malloc(1000000i64)
    %0_4: ptr = ptr_add %0_3, 16
    *@shadowstack_0 = %0_4
    %0_6: ptr = alloca {0: i64}, 1, 8
    %0_7: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # idempotent_outline.c:68: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock_dummy(5i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # idempotent_outline.c:69: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock_dummy(5i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # idempotent_outline.c:70: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(5i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_6)
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(5i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(5i32, 5i32)
    *%0_6 = %4_1
    # idempotent_outline.c:72: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_7)
    br bb6
  bb6:
    call __yk_trace_basicblock_dummy(5i32, 6i32)
    *%0_7 = 4i64
    br bb7
  bb7:
    # idempotent_outline.c:74: NOOPT_VAL(i);
    call __yk_trace_basicblock_dummy(5i32, 7i32)
    # idempotent_outline.c:75: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock_dummy(5i32, 8i32)
    %8_1: i64 = load %0_7
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb17, bb9 [safepoint: 8i64, (%0_6, %0_7, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock_dummy(5i32, 9i32)
    br bb10
  bb10:
    # idempotent_outline.c:76: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock_dummy(5i32, 10i32)
    call llvm.experimental.patchpoint.void(0i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_6, 0i64, %0_6, %0_7, %1_1) [safepoint: 0i64, (%0_6, %0_7, %1_1)]
    # idempotent_outline.c:77: uintptr_t k = yk_promote(i);
    br bb11
  bb11:
    call __yk_trace_basicblock_dummy(5i32, 11i32)
    %11_1: i64 = load %0_7
    %11_2: i64 = promote %11_1 [safepoint: 9i64, (%0_6, %0_7, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    # idempotent_outline.c:78: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, f(k, k));
    call __yk_trace_basicblock_dummy(5i32, 12i32)
    %12_1: ptr = load @stderr
    %12_2: i64 = load %0_7
    %12_3: i64 = call f(%11_2, %11_2) [safepoint: 10i64, (%0_6, %0_7, %1_1, %11_2, %12_1, %12_2)]
    br bb13
  bb13:
    call __yk_trace_basicblock_dummy(5i32, 13i32)
    %13_1: i64 = idempotent_promote %12_3
    br bb14
  bb14:
    call __yk_trace_basicblock_dummy(5i32, 14i32)
    %14_1: i32 = call fprintf(%12_1, @.str, %12_2, %13_1)
    # idempotent_outline.c:79: i--;
    br bb15
  bb15:
    call __yk_trace_basicblock_dummy(5i32, 15i32)
    %15_1: i64 = load %0_7
    %15_2: i64 = add %15_1, -1i64
    *%0_7 = %15_2
    # idempotent_outline.c:75: while (i > 0) {
    %15_4: i1 = eq %15_2, 0i64
    condbr %15_4, bb16, bb22 [safepoint: 11i64, (%0_6, %0_7, %1_1, %15_4)]
  bb16:
    # idempotent_outline.c:81: yk_location_drop(loc);
    call __yk_trace_basicblock_dummy(5i32, 16i32)
    br bb17
  bb17:
    call __yk_trace_basicblock_dummy(5i32, 17i32)
    %17_1: i64 = load %0_6
    call yk_location_drop(%17_1)
    # idempotent_outline.c:82: yk_mt_shutdown(mt);
    br bb18
  bb18:
    call __yk_trace_basicblock_dummy(5i32, 18i32)
    call yk_mt_shutdown(%1_1)
    # idempotent_outline.c:84: }
    br bb19
  bb19:
    call __yk_trace_basicblock_dummy(5i32, 19i32)
    call llvm.lifetime.end.p0(8i64, %0_7)
    br bb20
  bb20:
    call __yk_trace_basicblock_dummy(5i32, 20i32)
    call llvm.lifetime.end.p0(8i64, %0_6)
    # idempotent_outline.c:83: return (EXIT_SUCCESS);
    br bb21
  bb21:
    call __yk_trace_basicblock_dummy(5i32, 21i32)
    br bb24
  bb22:
    call __yk_trace_basicblock_dummy(5i32, 22i32)
    br bb10
  bb23:
    call __yk_trace_basicblock_dummy(5i32, 23i32)
    ret 0i32
  bb24:
    call __yk_trace_basicblock_dummy(5i32, 24i32)
    br bb23
}

func yk_mt_new(%arg0: ptr) -> ptr;

func yk_mt_hot_threshold_set(%arg0: ptr, %arg1: i32);

func llvm.lifetime.start.p0(%arg0: i64, %arg1: ptr);

func llvm.dbg.declare(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

func yk_location_new() -> i64;

func yk_mt_control_point(%arg0: ptr, %arg1: ptr);

func fprintf(%arg0: ptr, %arg1: ptr, ...) -> i32;

func yk_location_drop(%arg0: i64);

func yk_mt_shutdown(%arg0: ptr);

func llvm.lifetime.end.p0(%arg0: i64, %arg1: ptr);

func __yk_unopt_h(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock(16i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:51: return x + y;
    call __yk_trace_basicblock(16i32, 1i32)
    %1_1: i64 = add %0_1, %0_0
    br bb3
  bb2:
    call __yk_trace_basicblock(16i32, 2i32)
    ret %1_1
  bb3:
    call __yk_trace_basicblock(16i32, 3i32)
    br bb2
}

#[yk_outline]
func __yk_unopt_g(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock(17i32, 0i32)
    br bb1
  bb1:
    call __yk_trace_basicblock(17i32, 1i32)
    %1_1: i64 = add %0_1, %0_0
    %1_2: i64 = add %1_1, 2i64
    # idempotent_outline.c:57: uintptr_t a = yk_promote(h(x + 1, y + 1));
    %1_3: i64 = promote %1_2 [safepoint: 13i64, (%1_1, %1_2, %1_3)]
    br bb2
  bb2:
    # idempotent_outline.c:51: return x + y;
    call __yk_trace_basicblock(17i32, 2i32)
    %2_1: i64 = add %1_1, 10i64
    # idempotent_outline.c:58: uintptr_t b = yk_promote(h(y + 5, x + 5));
    %2_2: i64 = promote %2_1 [safepoint: 7i64, (%1_3, %2_1, %2_2)]
    br bb3
  bb3:
    # idempotent_outline.c:59: return a + b;
    call __yk_trace_basicblock(17i32, 3i32)
    %3_1: i64 = add %2_2, %1_3
    br bb5
  bb4:
    call __yk_trace_basicblock(17i32, 4i32)
    ret %3_1
  bb5:
    call __yk_trace_basicblock(17i32, 5i32)
    br bb4
}

#[yk_idempotent, yk_outline]
func __yk_unopt_f(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock(18i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:64: return g(x, y);
    call __yk_trace_basicblock(18i32, 1i32)
    %1_1: i64 = call __yk_unopt_g(%0_0, %0_1) [safepoint: 12i64, (%0_0, %0_1)]
    br bb2
  bb2:
    call __yk_trace_basicblock(18i32, 2i32)
    br bb4
  bb3:
    call __yk_trace_basicblock(18i32, 3i32)
    ret %1_1
  bb4:
    call __yk_trace_basicblock(18i32, 4i32)
    br bb3
}

#[yk_outline]
func __yk_unopt_main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock(19i32, 0i32)
    %0_3: ptr = load @shadowstack_0
    %0_4: ptr = alloca {0: i64}, 1, 8
    %0_5: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # idempotent_outline.c:68: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock(19i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # idempotent_outline.c:69: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock(19i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # idempotent_outline.c:70: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock(19i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_4)
    br bb4
  bb4:
    call __yk_trace_basicblock(19i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock(19i32, 5i32)
    *%0_4 = %4_1
    # idempotent_outline.c:72: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb6
  bb6:
    call __yk_trace_basicblock(19i32, 6i32)
    *%0_5 = 4i64
    br bb7
  bb7:
    # idempotent_outline.c:74: NOOPT_VAL(i);
    call __yk_trace_basicblock(19i32, 7i32)
    # idempotent_outline.c:75: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock(19i32, 8i32)
    %8_1: i64 = load %0_5
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb17, bb9 [safepoint: 4i64, (%0_4, %0_5, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock(19i32, 9i32)
    br bb10
  bb10:
    # idempotent_outline.c:76: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock(19i32, 10i32)
    call llvm.experimental.patchpoint.void(1i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_4, 1i64, %0_4, %0_5, %1_1) [safepoint: 1i64, (%0_4, %0_5, %1_1)]
    # idempotent_outline.c:77: uintptr_t k = yk_promote(i);
    br bb11
  bb11:
    call __yk_trace_basicblock(19i32, 11i32)
    %11_1: i64 = load %0_5
    %11_2: i64 = promote %11_1 [safepoint: 14i64, (%0_4, %0_5, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    # idempotent_outline.c:78: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, f(k, k));
    call __yk_trace_basicblock(19i32, 12i32)
    %12_1: ptr = load @stderr
    %12_2: i64 = load %0_5
    %12_3: i64 = call __yk_unopt_f(%11_2, %11_2) [safepoint: 15i64, (%0_4, %0_5, %1_1, %11_2, %12_1, %12_2)]
    br bb13
  bb13:
    call __yk_trace_basicblock(19i32, 13i32)
    %13_1: i64 = idempotent_promote %12_3
    br bb14
  bb14:
    call __yk_trace_basicblock(19i32, 14i32)
    %14_1: i32 = call fprintf(%12_1, @.str, %12_2, %13_1)
    # idempotent_outline.c:79: i--;
    br bb15
  bb15:
    call __yk_trace_basicblock(19i32, 15i32)
    %15_1: i64 = load %0_5
    %15_2: i64 = add %15_1, -1i64
    *%0_5 = %15_2
    # idempotent_outline.c:75: while (i > 0) {
    %15_4: i1 = eq %15_2, 0i64
    condbr %15_4, bb16, bb22 [safepoint: 2i64, (%0_4, %0_5, %1_1, %15_4)]
  bb16:
    # idempotent_outline.c:81: yk_location_drop(loc);
    call __yk_trace_basicblock(19i32, 16i32)
    br bb17
  bb17:
    call __yk_trace_basicblock(19i32, 17i32)
    %17_1: i64 = load %0_4
    call yk_location_drop(%17_1)
    # idempotent_outline.c:82: yk_mt_shutdown(mt);
    br bb18
  bb18:
    call __yk_trace_basicblock(19i32, 18i32)
    call yk_mt_shutdown(%1_1)
    # idempotent_outline.c:84: }
    br bb19
  bb19:
    call __yk_trace_basicblock(19i32, 19i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    br bb20
  bb20:
    call __yk_trace_basicblock(19i32, 20i32)
    call llvm.lifetime.end.p0(8i64, %0_4)
    # idempotent_outline.c:83: return (EXIT_SUCCESS);
    br bb21
  bb21:
    call __yk_trace_basicblock(19i32, 21i32)
    br bb24
  bb22:
    call __yk_trace_basicblock(19i32, 22i32)
    br bb10
  bb23:
    call __yk_trace_basicblock(19i32, 23i32)
    ret 0i32
  bb24:
    call __yk_trace_basicblock(19i32, 24i32)
    br bb23
}

func malloc(%arg0: i64) -> ptr;

func __ykrt_control_point(%arg0: ptr, %arg1: ptr, %arg2: i64);

func llvm.experimental.patchpoint.void(%arg0: i64, %arg1: i32, %arg2: ptr, %arg3: i32, ...);

func __yk_idempotent_promote_i64(%arg0: i64) -> i64;

func llvm.experimental.stackmap(%arg0: i64, %arg1: i32, ...);

func __yk_trace_basicblock(%arg0: i32, %arg1: i32);

func __yk_trace_basicblock_dummy(%arg0: i32, %arg1: i32);

--- End aot ---
--- Begin jit-pre-opt ---
; compiled trace ID #0

func_decl __yk_unopt_f (i64, i64) -> i64
func_decl fprintf (ptr, ptr, ...) -> i32
global_decl @stderr
global_decl @.str

entry:
    %0: ptr = param Direct(6, -48, 8)
    %1: ptr = param Register(3, 8, [])
    %2: ptr = param Register(13, 8, [])
    header_start [%0, %1, %2]
    %4: i64 = load %1
    %6: i1 = eq %4, 4i64
    guard true, %6, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%11_1: %4, 19:%11_2: %4] ; trace_gidx 0 safepoint_id 14
    %8: ptr = lookup_global @stderr
    %9: ptr = load %8
    %10: i64 = load %1
    %11: i64 = call @__yk_unopt_f(%4, %4) <idem_const 28i64>
    %13: ptr = lookup_global @.str
    %14: i32 = call @fprintf(%9, %13, %10, %11)
    %15: i64 = load %1
    %16: i64 = add %15, 18446744073709551615i64
    *%1 = %16
    %18: i1 = eq %16, 0i64
    guard false, %18, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
    header_end [%0, %1, %2]
--- End jit-pre-opt ---
--- Begin jit-post-opt ---
; compiled trace ID #0

func_decl __yk_unopt_f (i64, i64) -> i64
func_decl fprintf (ptr, ptr, ...) -> i32
global_decl @stderr
global_decl @.str

entry:
    %0: ptr = param Direct(6, -48, 8)
    %1: ptr = param Register(3, 8, [])
    %2: ptr = param Register(13, 8, [])
    header_start [%0, %1, %2]
    %4: i64 = load %1
    %6: i1 = eq %4, 4i64
    guard true, %6, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%11_1: %4, 19:%11_2: %4] ; trace_gidx 0 safepoint_id 14
    %8: ptr = lookup_global @stderr
    %9: ptr = load %8
    %13: ptr = lookup_global @.str
    %14: i32 = call @fprintf(%9, %13, 4i64, 28i64)
    %15: i64 = load %1
    %16: i64 = add %15, 18446744073709551615i64
    *%1 = %16
    %18: i1 = eq %16, 0i64
    guard false, %18, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
    header_end [%0, %1, %2]
    %21: ptr = param Direct(6, -48, 8)
    %22: ptr = param Register(3, 8, [])
    %23: ptr = param Register(13, 8, [])
    body_start [%21, %22, %23]
    %25: i64 = load %22
    %26: i1 = eq %25, 4i64
    guard true, %26, [19:%0_4: %21, 19:%0_5: %22, 19:%1_1: %23, 19:%11_1: %25, 19:%11_2: %25] ; trace_gidx 2 safepoint_id 14
    %28: ptr = lookup_global @stderr
    %29: ptr = load %28
    %30: ptr = lookup_global @.str
    %31: i32 = call @fprintf(%29, %30, 4i64, 28i64)
    %32: i64 = load %22
    %33: i64 = add %32, 18446744073709551615i64
    *%22 = %33
    %35: i1 = eq %33, 0i64
    guard false, %35, [19:%0_4: %21, 19:%0_5: %22, 19:%1_1: %23, 19:%15_4: 1i1] ; trace_gidx 3 safepoint_id 2
    body_end [%21, %22, %23]
--- End jit-post-opt ---
3: 24
yk-jit-event: enter-jit-code
yk-jit-event: deoptimise
2: 20
yk-jit-event: enter-jit-code
yk-jit-event: deoptimise
4222429319: 16889717288
Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
Transition: UnoptToOpt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(3, 8, []) dst: Register(14, 8, [])
Register2Register - src: Register(13, 8, []) dst: Register(15, 8, [])
Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
[DEOPT] Register(3, 8, []), jitval: 140056308527120
[DEOPT] Register(13, 8, [-64]), jitval: 798406272
[DEOPT] Register(14, 8, [5]), jitval: 2
[DEOPT] Register(0, 8, []), jitval: 2
Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
[DEOPT] Register(3, 8, []), jitval: 140056312358528
[DEOPT] Register(13, 8, [-64]), jitval: 2
[DEOPT] Register(14, 8, [5]), jitval: 4222429319
[DEOPT] Register(0, 8, []), jitval: 4222429319

test lang_tests::idempotent_outline.c ... [0m[31mFAILED[0m

failures:

---- lang_tests::idempotent_outline.c status ----
Exited due to signal: 11

---- lang_tests::idempotent_outline.c stderr ----

Literal text:
   |yk-jit-event: start-tracing
   |4: 28
   |yk-jit-event: stop-tracing
   |--- Begin aot ---
   |# IR format version: 0
   |# Num funcs: 27
   |# Num consts: 34
   |# Num global decls: 3
   |# Num types: 24
   |global_decl tls @shadowstack_0
   |global_decl @stderr
   |global_decl @.str
   |
   |func h(%arg0: i64, %arg1: i64) -> i64 {
   |  bb0:
   |    %0_0: i64 = arg(0)
   |    %0_1: i64 = arg(1)
   |    call __yk_trace_basicblock_dummy(0i32, 0i32)
   |    br bb1
   |  bb1:
   |    # idempotent_outline.c:51: return x + y;
   |    call __yk_trace_basicblock_dummy(0i32, 1i32)
   |    %1_1: i64 = add %0_1, %0_0
   |    br bb3
   |  bb2:
   |    call __yk_trace_basicblock_dummy(0i32, 2i32)
   |    ret %1_1
   |  bb3:
   |    call __yk_trace_basicblock_dummy(0i32, 3i32)
   |    br bb2
   |}
   |
   |func llvm.dbg.value(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);
   |
   |#[yk_outline]
   |func g(%arg0: i64, %arg1: i64) -> i64 {
   |  bb0:
   |    %0_0: i64 = arg(0)
   |    %0_1: i64 = arg(1)
   |    call __yk_trace_basicblock_dummy(2i32, 0i32)
   |    br bb1
   |  bb1:
   |    call __yk_trace_basicblock_dummy(2i32, 1i32)
   |    %1_1: i64 = add %0_1, %0_0
   |    %1_2: i64 = add %1_1, 2i64
   |    # idempotent_outline.c:57: uintptr_t a = yk_promote(h(x + 1, y + 1));
   |    %1_3: i64 = promote %1_2 [safepoint: 5i64, (%1_1, %1_2, %1_3)]
   |    br bb2
   |  bb2:
   |    # idempotent_outline.c:51: return x + y;
   |    call __yk_trace_basicblock_dummy(2i32, 2i32)
   |    %2_1: i64 = add %1_1, 10i64
   |    # idempotent_outline.c:58: uintptr_t b = yk_promote(h(y + 5, x + 5));
   |    %2_2: i64 = promote %2_1 [safepoint: 6i64, (%1_3, %2_1, %2_2)]
   |    br bb3
   |  bb3:
   |    # idempotent_outline.c:59: return a + b;
   |    call __yk_trace_basicblock_dummy(2i32, 3i32)
   |    %3_1: i64 = add %2_2, %1_3
   |    br bb5
   |  bb4:
   |    call __yk_trace_basicblock_dummy(2i32, 4i32)
   |    ret %3_1
   |  bb5:
   |    call __yk_trace_basicblock_dummy(2i32, 5i32)
   |    br bb4
   |}
   |
   |func __yk_promote_usize(%arg0: i64) -> i64;
   |
   |#[yk_idempotent, yk_outline]
   |func f(%arg0: i64, %arg1: i64) -> i64 {
   |  bb0:
   |    %0_0: i64 = arg(0)
   |    %0_1: i64 = arg(1)
   |    call __yk_trace_basicblock_dummy(4i32, 0i32)
   |    br bb1
   |  bb1:
   |    # idempotent_outline.c:64: return g(x, y);
   |    call __yk_trace_basicblock_dummy(4i32, 1i32)
   |    %1_1: i64 = call g(%0_0, %0_1) [safepoint: 3i64, (%0_0, %0_1)]
   |    br bb2
   |  bb2:
   |    call __yk_trace_basicblock_dummy(4i32, 2i32)
   |    br bb4
   |  bb3:
   |    call __yk_trace_basicblock_dummy(4i32, 3i32)
   |    ret %1_1
   |  bb4:
   |    call __yk_trace_basicblock_dummy(4i32, 4i32)
   |    br bb3
   |}
   |
   |#[yk_outline]
   |func main(%arg0: i32, %arg1: ptr) -> i32 {
   |  bb0:
   |    %0_0: i32 = arg(0)
   |    %0_1: ptr = arg(1)
   |    call __yk_trace_basicblock_dummy(5i32, 0i32)
   |    %0_3: ptr = call malloc(1000000i64)
   |    %0_4: ptr = ptr_add %0_3, 16
   |    *@shadowstack_0 = %0_4
   |    %0_6: ptr = alloca {0: i64}, 1, 8
   |    %0_7: ptr = ptr_add %0_3, 0
   |    br bb1
   |  bb1:
   |    # idempotent_outline.c:68: YkMT *mt = yk_mt_new(NULL);
   |    call __yk_trace_basicblock_dummy(5i32, 1i32)
   |    %1_1: ptr = call yk_mt_new(0x0)
   |    br bb2
   |  bb2:
   |    # idempotent_outline.c:69: yk_mt_hot_threshold_set(mt, 0);
   |    call __yk_trace_basicblock_dummy(5i32, 2i32)
   |    call yk_mt_hot_threshold_set(%1_1, 0i32)
   |    # idempotent_outline.c:70: YkLocation loc = yk_location_new();
   |    br bb3
   |  bb3:
   |    call __yk_trace_basicblock_dummy(5i32, 3i32)
   |    call llvm.lifetime.start.p0(8i64, %0_6)
   |    br bb4
   |  bb4:
   |    call __yk_trace_basicblock_dummy(5i32, 4i32)
   |    %4_1: i64 = call yk_location_new()
   |    br bb5
   |  bb5:
   |    call __yk_trace_basicblock_dummy(5i32, 5i32)
   |    *%0_6 = %4_1
   |    # idempotent_outline.c:72: size_t i = 4;
   |    call llvm.lifetime.start.p0(8i64, %0_7)
   |    br bb6
   |  bb6:
   |    call __yk_trace_basicblock_dummy(5i32, 6i32)
   |    *%0_7 = 4i64
   |    br bb7
   |  bb7:
   |    # idempotent_outline.c:74: NOOPT_VAL(i);
   |    call __yk_trace_basicblock_dummy(5i32, 7i32)
   |    # idempotent_outline.c:75: while (i > 0) {
   |    br bb8
   |  bb8:
   |    call __yk_trace_basicblock_dummy(5i32, 8i32)
   |    %8_1: i64 = load %0_7
   |    %8_2: i1 = eq %8_1, 0i64
   |    condbr %8_2, bb17, bb9 [safepoint: 8i64, (%0_6, %0_7, %1_1, %8_2)]
   |  bb9:
   |    call __yk_trace_basicblock_dummy(5i32, 9i32)
   |    br bb10
   |  bb10:
   |    # idempotent_outline.c:76: yk_mt_control_point(mt, &loc);
   |    call __yk_trace_basicblock_dummy(5i32, 10i32)
   |    call llvm.experimental.patchpoint.void(0i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_6, 0i64, %0_6, %0_7, %1_1) [safepoint: 0i64, (%0_6, %0_7, %1_1)]
   |    # idempotent_outline.c:77: uintptr_t k = yk_promote(i);
   |    br bb11
   |  bb11:
   |    call __yk_trace_basicblock_dummy(5i32, 11i32)
   |    %11_1: i64 = load %0_7
   |    %11_2: i64 = promote %11_1 [safepoint: 9i64, (%0_6, %0_7, %1_1, %11_1, %11_2)]
   |    br bb12
   |  bb12:
   |    # idempotent_outline.c:78: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, f(k, k));
   |    call __yk_trace_basicblock_dummy(5i32, 12i32)
   |    %12_1: ptr = load @stderr
   |    %12_2: i64 = load %0_7
   |    %12_3: i64 = call f(%11_2, %11_2) [safepoint: 10i64, (%0_6, %0_7, %1_1, %11_2, %12_1, %12_2)]
   |    br bb13
   |  bb13:
   |    call __yk_trace_basicblock_dummy(5i32, 13i32)
   |    %13_1: i64 = idempotent_promote %12_3
   |    br bb14
   |  bb14:
   |    call __yk_trace_basicblock_dummy(5i32, 14i32)
   |    %14_1: i32 = call fprintf(%12_1, @.str, %12_2, %13_1)
   |    # idempotent_outline.c:79: i--;
   |    br bb15
   |  bb15:
   |    call __yk_trace_basicblock_dummy(5i32, 15i32)
   |    %15_1: i64 = load %0_7
   |    %15_2: i64 = add %15_1, -1i64
   |    *%0_7 = %15_2
   |    # idempotent_outline.c:75: while (i > 0) {
   |    %15_4: i1 = eq %15_2, 0i64
   |    condbr %15_4, bb16, bb22 [safepoint: 11i64, (%0_6, %0_7, %1_1, %15_4)]
   |  bb16:
   |    # idempotent_outline.c:81: yk_location_drop(loc);
   |    call __yk_trace_basicblock_dummy(5i32, 16i32)
   |    br bb17
   |  bb17:
   |    call __yk_trace_basicblock_dummy(5i32, 17i32)
   |    %17_1: i64 = load %0_6
   |    call yk_location_drop(%17_1)
   |    # idempotent_outline.c:82: yk_mt_shutdown(mt);
   |    br bb18
   |  bb18:
   |    call __yk_trace_basicblock_dummy(5i32, 18i32)
   |    call yk_mt_shutdown(%1_1)
   |    # idempotent_outline.c:84: }
   |    br bb19
   |  bb19:
   |    call __yk_trace_basicblock_dummy(5i32, 19i32)
   |    call llvm.lifetime.end.p0(8i64, %0_7)
   |    br bb20
   |  bb20:
   |    call __yk_trace_basicblock_dummy(5i32, 20i32)
   |    call llvm.lifetime.end.p0(8i64, %0_6)
   |    # idempotent_outline.c:83: return (EXIT_SUCCESS);
   |    br bb21
   |  bb21:
   |    call __yk_trace_basicblock_dummy(5i32, 21i32)
   |    br bb24
   |  bb22:
   |    call __yk_trace_basicblock_dummy(5i32, 22i32)
   |    br bb10
   |  bb23:
   |    call __yk_trace_basicblock_dummy(5i32, 23i32)
   |    ret 0i32
   |  bb24:
   |    call __yk_trace_basicblock_dummy(5i32, 24i32)
   |    br bb23
   |}
   |
   |func yk_mt_new(%arg0: ptr) -> ptr;
   |
   |func yk_mt_hot_threshold_set(%arg0: ptr, %arg1: i32);
   |
   |func llvm.lifetime.start.p0(%arg0: i64, %arg1: ptr);
   |
   |func llvm.dbg.declare(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);
   |
   |func yk_location_new() -> i64;
   |
   |func yk_mt_control_point(%arg0: ptr, %arg1: ptr);
   |
   |func fprintf(%arg0: ptr, %arg1: ptr, ...) -> i32;
   |
   |func yk_location_drop(%arg0: i64);
   |
   |func yk_mt_shutdown(%arg0: ptr);
   |
   |func llvm.lifetime.end.p0(%arg0: i64, %arg1: ptr);
   |
   |func __yk_unopt_h(%arg0: i64, %arg1: i64) -> i64 {
   |  bb0:
   |    %0_0: i64 = arg(0)
   |    %0_1: i64 = arg(1)
   |    call __yk_trace_basicblock(16i32, 0i32)
   |    br bb1
   |  bb1:
   |    # idempotent_outline.c:51: return x + y;
   |    call __yk_trace_basicblock(16i32, 1i32)
   |    %1_1: i64 = add %0_1, %0_0
   |    br bb3
   |  bb2:
   |    call __yk_trace_basicblock(16i32, 2i32)
   |    ret %1_1
   |  bb3:
   |    call __yk_trace_basicblock(16i32, 3i32)
   |    br bb2
   |}
   |
   |#[yk_outline]
   |func __yk_unopt_g(%arg0: i64, %arg1: i64) -> i64 {
   |  bb0:
   |    %0_0: i64 = arg(0)
   |    %0_1: i64 = arg(1)
   |    call __yk_trace_basicblock(17i32, 0i32)
   |    br bb1
   |  bb1:
   |    call __yk_trace_basicblock(17i32, 1i32)
   |    %1_1: i64 = add %0_1, %0_0
   |    %1_2: i64 = add %1_1, 2i64
   |    # idempotent_outline.c:57: uintptr_t a = yk_promote(h(x + 1, y + 1));
   |    %1_3: i64 = promote %1_2 [safepoint: 13i64, (%1_1, %1_2, %1_3)]
   |    br bb2
   |  bb2:
   |    # idempotent_outline.c:51: return x + y;
   |    call __yk_trace_basicblock(17i32, 2i32)
   |    %2_1: i64 = add %1_1, 10i64
   |    # idempotent_outline.c:58: uintptr_t b = yk_promote(h(y + 5, x + 5));
   |    %2_2: i64 = promote %2_1 [safepoint: 7i64, (%1_3, %2_1, %2_2)]
   |    br bb3
   |  bb3:
   |    # idempotent_outline.c:59: return a + b;
   |    call __yk_trace_basicblock(17i32, 3i32)
   |    %3_1: i64 = add %2_2, %1_3
   |    br bb5
   |  bb4:
   |    call __yk_trace_basicblock(17i32, 4i32)
   |    ret %3_1
   |  bb5:
   |    call __yk_trace_basicblock(17i32, 5i32)
   |    br bb4
   |}
   |
   |#[yk_idempotent, yk_outline]
   |func __yk_unopt_f(%arg0: i64, %arg1: i64) -> i64 {
   |  bb0:
   |    %0_0: i64 = arg(0)
   |    %0_1: i64 = arg(1)
   |    call __yk_trace_basicblock(18i32, 0i32)
   |    br bb1
   |  bb1:
   |    # idempotent_outline.c:64: return g(x, y);
   |    call __yk_trace_basicblock(18i32, 1i32)
   |    %1_1: i64 = call __yk_unopt_g(%0_0, %0_1) [safepoint: 12i64, (%0_0, %0_1)]
   |    br bb2
   |  bb2:
   |    call __yk_trace_basicblock(18i32, 2i32)
   |    br bb4
   |  bb3:
   |    call __yk_trace_basicblock(18i32, 3i32)
   |    ret %1_1
   |  bb4:
   |    call __yk_trace_basicblock(18i32, 4i32)
   |    br bb3
   |}
   |
   |#[yk_outline]
   |func __yk_unopt_main(%arg0: i32, %arg1: ptr) -> i32 {
   |  bb0:
   |    %0_0: i32 = arg(0)
   |    %0_1: ptr = arg(1)
   |    call __yk_trace_basicblock(19i32, 0i32)
   |    %0_3: ptr = load @shadowstack_0
   |    %0_4: ptr = alloca {0: i64}, 1, 8
   |    %0_5: ptr = ptr_add %0_3, 0
   |    br bb1
   |  bb1:
   |    # idempotent_outline.c:68: YkMT *mt = yk_mt_new(NULL);
   |    call __yk_trace_basicblock(19i32, 1i32)
   |    %1_1: ptr = call yk_mt_new(0x0)
   |    br bb2
   |  bb2:
   |    # idempotent_outline.c:69: yk_mt_hot_threshold_set(mt, 0);
   |    call __yk_trace_basicblock(19i32, 2i32)
   |    call yk_mt_hot_threshold_set(%1_1, 0i32)
   |    # idempotent_outline.c:70: YkLocation loc = yk_location_new();
   |    br bb3
   |  bb3:
   |    call __yk_trace_basicblock(19i32, 3i32)
   |    call llvm.lifetime.start.p0(8i64, %0_4)
   |    br bb4
   |  bb4:
   |    call __yk_trace_basicblock(19i32, 4i32)
   |    %4_1: i64 = call yk_location_new()
   |    br bb5
   |  bb5:
   |    call __yk_trace_basicblock(19i32, 5i32)
   |    *%0_4 = %4_1
   |    # idempotent_outline.c:72: size_t i = 4;
   |    call llvm.lifetime.start.p0(8i64, %0_5)
   |    br bb6
   |  bb6:
   |    call __yk_trace_basicblock(19i32, 6i32)
   |    *%0_5 = 4i64
   |    br bb7
   |  bb7:
   |    # idempotent_outline.c:74: NOOPT_VAL(i);
   |    call __yk_trace_basicblock(19i32, 7i32)
   |    # idempotent_outline.c:75: while (i > 0) {
   |    br bb8
   |  bb8:
   |    call __yk_trace_basicblock(19i32, 8i32)
   |    %8_1: i64 = load %0_5
   |    %8_2: i1 = eq %8_1, 0i64
   |    condbr %8_2, bb17, bb9 [safepoint: 4i64, (%0_4, %0_5, %1_1, %8_2)]
   |  bb9:
   |    call __yk_trace_basicblock(19i32, 9i32)
   |    br bb10
   |  bb10:
   |    # idempotent_outline.c:76: yk_mt_control_point(mt, &loc);
   |    call __yk_trace_basicblock(19i32, 10i32)
   |    call llvm.experimental.patchpoint.void(1i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_4, 1i64, %0_4, %0_5, %1_1) [safepoint: 1i64, (%0_4, %0_5, %1_1)]
   |    # idempotent_outline.c:77: uintptr_t k = yk_promote(i);
   |    br bb11
   |  bb11:
   |    call __yk_trace_basicblock(19i32, 11i32)
   |    %11_1: i64 = load %0_5
   |    %11_2: i64 = promote %11_1 [safepoint: 14i64, (%0_4, %0_5, %1_1, %11_1, %11_2)]
   |    br bb12
   |  bb12:
   |    # idempotent_outline.c:78: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, f(k, k));
   |    call __yk_trace_basicblock(19i32, 12i32)
   |    %12_1: ptr = load @stderr
   |    %12_2: i64 = load %0_5
   |    %12_3: i64 = call __yk_unopt_f(%11_2, %11_2) [safepoint: 15i64, (%0_4, %0_5, %1_1, %11_2, %12_1, %12_2)]
   |    br bb13
   |  bb13:
   |    call __yk_trace_basicblock(19i32, 13i32)
   |    %13_1: i64 = idempotent_promote %12_3
   |    br bb14
   |  bb14:
   |    call __yk_trace_basicblock(19i32, 14i32)
   |    %14_1: i32 = call fprintf(%12_1, @.str, %12_2, %13_1)
   |    # idempotent_outline.c:79: i--;
   |    br bb15
   |  bb15:
   |    call __yk_trace_basicblock(19i32, 15i32)
   |    %15_1: i64 = load %0_5
   |    %15_2: i64 = add %15_1, -1i64
   |    *%0_5 = %15_2
   |    # idempotent_outline.c:75: while (i > 0) {
   |    %15_4: i1 = eq %15_2, 0i64
   |    condbr %15_4, bb16, bb22 [safepoint: 2i64, (%0_4, %0_5, %1_1, %15_4)]
   |  bb16:
   |    # idempotent_outline.c:81: yk_location_drop(loc);
   |    call __yk_trace_basicblock(19i32, 16i32)
   |    br bb17
   |  bb17:
   |    call __yk_trace_basicblock(19i32, 17i32)
   |    %17_1: i64 = load %0_4
   |    call yk_location_drop(%17_1)
   |    # idempotent_outline.c:82: yk_mt_shutdown(mt);
   |    br bb18
   |  bb18:
   |    call __yk_trace_basicblock(19i32, 18i32)
   |    call yk_mt_shutdown(%1_1)
   |    # idempotent_outline.c:84: }
   |    br bb19
   |  bb19:
   |    call __yk_trace_basicblock(19i32, 19i32)
   |    call llvm.lifetime.end.p0(8i64, %0_5)
   |    br bb20
   |  bb20:
   |    call __yk_trace_basicblock(19i32, 20i32)
   |    call llvm.lifetime.end.p0(8i64, %0_4)
   |    # idempotent_outline.c:83: return (EXIT_SUCCESS);
   |    br bb21
   |  bb21:
   |    call __yk_trace_basicblock(19i32, 21i32)
   |    br bb24
   |  bb22:
   |    call __yk_trace_basicblock(19i32, 22i32)
   |    br bb10
   |  bb23:
   |    call __yk_trace_basicblock(19i32, 23i32)
   |    ret 0i32
   |  bb24:
   |    call __yk_trace_basicblock(19i32, 24i32)
   |    br bb23
   |}
   |
   |func malloc(%arg0: i64) -> ptr;
   |
   |func __ykrt_control_point(%arg0: ptr, %arg1: ptr, %arg2: i64);
   |
   |func llvm.experimental.patchpoint.void(%arg0: i64, %arg1: i32, %arg2: ptr, %arg3: i32, ...);
   |
   |func __yk_idempotent_promote_i64(%arg0: i64) -> i64;
   |
   |func llvm.experimental.stackmap(%arg0: i64, %arg1: i32, ...);
   |
   |func __yk_trace_basicblock(%arg0: i32, %arg1: i32);
   |
   |func __yk_trace_basicblock_dummy(%arg0: i32, %arg1: i32);
   |
   |--- End aot ---
   |--- Begin jit-pre-opt ---
   |; compiled trace ID #0
   |
   |func_decl __yk_unopt_f (i64, i64) -> i64
   |func_decl fprintf (ptr, ptr, ...) -> i32
   |global_decl @stderr
   |global_decl @.str
   |
   |entry:
   |    %0: ptr = param Direct(6, -48, 8)
   |    %1: ptr = param Register(3, 8, [])
   |    %2: ptr = param Register(13, 8, [])
   |    header_start [%0, %1, %2]
   |    %4: i64 = load %1
   |    %6: i1 = eq %4, 4i64
   |    guard true, %6, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%11_1: %4, 19:%11_2: %4] ; trace_gidx 0 safepoint_id 14
   |    %8: ptr = lookup_global @stderr
   |    %9: ptr = load %8
   |    %10: i64 = load %1
   |    %11: i64 = call @__yk_unopt_f(%4, %4) <idem_const 28i64>
   |    %13: ptr = lookup_global @.str
   |    %14: i32 = call @fprintf(%9, %13, %10, %11)
   |    %15: i64 = load %1
   |    %16: i64 = add %15, 18446744073709551615i64
   |    *%1 = %16
   |    %18: i1 = eq %16, 0i64
   |    guard false, %18, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
   |    header_end [%0, %1, %2]
   |--- End jit-pre-opt ---
   |--- Begin jit-post-opt ---
   |; compiled trace ID #0
   |
   |func_decl __yk_unopt_f (i64, i64) -> i64
   |func_decl fprintf (ptr, ptr, ...) -> i32
   |global_decl @stderr
   |global_decl @.str
   |
   |entry:
   |    %0: ptr = param Direct(6, -48, 8)
   |    %1: ptr = param Register(3, 8, [])
   |    %2: ptr = param Register(13, 8, [])
   |    header_start [%0, %1, %2]
   |    %4: i64 = load %1
   |    %6: i1 = eq %4, 4i64
   |    guard true, %6, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%11_1: %4, 19:%11_2: %4] ; trace_gidx 0 safepoint_id 14
   |    %8: ptr = lookup_global @stderr
   |    %9: ptr = load %8
   |    %13: ptr = lookup_global @.str
   |    %14: i32 = call @fprintf(%9, %13, 4i64, 28i64)
   |    %15: i64 = load %1
   |    %16: i64 = add %15, 18446744073709551615i64
   |    *%1 = %16
   |    %18: i1 = eq %16, 0i64
   |    guard false, %18, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
   |    header_end [%0, %1, %2]
   |    %21: ptr = param Direct(6, -48, 8)
   |    %22: ptr = param Register(3, 8, [])
   |    %23: ptr = param Register(13, 8, [])
   |    body_start [%21, %22, %23]
   |    %25: i64 = load %22
   |    %26: i1 = eq %25, 4i64
   |    guard true, %26, [19:%0_4: %21, 19:%0_5: %22, 19:%1_1: %23, 19:%11_1: %25, 19:%11_2: %25] ; trace_gidx 2 safepoint_id 14
   |    %28: ptr = lookup_global @stderr
   |    %29: ptr = load %28
   |    %30: ptr = lookup_global @.str
   |    %31: i32 = call @fprintf(%29, %30, 4i64, 28i64)
   |    %32: i64 = load %22
   |    %33: i64 = add %32, 18446744073709551615i64
   |    *%22 = %33
   |    %35: i1 = eq %33, 0i64
   |    guard false, %35, [19:%0_4: %21, 19:%0_5: %22, 19:%1_1: %23, 19:%15_4: 1i1] ; trace_gidx 3 safepoint_id 2
   |    body_end [%21, %22, %23]
   |--- End jit-post-opt ---
   |3: 24
   |yk-jit-event: enter-jit-code
   |yk-jit-event: deoptimise
   |2: 20
   |yk-jit-event: enter-jit-code
   |yk-jit-event: deoptimise
   |4222429319: 16889717288
   |

Pattern (error at line 31):
   ...
   |2: 20
   |yk-jit-event: enter-jit-code
   |yk-jit-event: deoptimise
>> |1: 16

Names at point of failure:
  {{size}}: 64
  {{v}}: 4

Text (error at line 536):
   ...
   |2: 20
   |yk-jit-event: enter-jit-code
   |yk-jit-event: deoptimise
>> |4222429319: 16889717288

---- lang_tests::idempotent_outline.c stdout ----

Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
Transition: UnoptToOpt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(3, 8, []) dst: Register(14, 8, [])
Register2Register - src: Register(13, 8, []) dst: Register(15, 8, [])
Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
[DEOPT] Register(3, 8, []), jitval: 140056308527120
[DEOPT] Register(13, 8, [-64]), jitval: 798406272
[DEOPT] Register(14, 8, [5]), jitval: 2
[DEOPT] Register(0, 8, []), jitval: 2
Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
[DEOPT] Register(3, 8, []), jitval: 140056312358528
[DEOPT] Register(13, 8, [-64]), jitval: 2
[DEOPT] Register(14, 8, [5]), jitval: 4222429319
[DEOPT] Register(0, 8, []), jitval: 4222429319

failures:
    lang_tests::idempotent_outline.c

test result: [0m[31mFAILED[0m. 0 passed; 1 failed; 0 ignored; 0 measured; 155 filtered out

[1m[31merror[0m[1m:[0m test failed, to rerun pass `-p tests --test c_tests`

Caused by:
  process didn't exit successfully: `/home/pd/yk-fork/target/debug/deps/c_tests-311eca720dce6708 '::idempotent_outline.c' --nocapture` (exit status: 1)
Shared connection to bencher16.soft-dev.org closed.
CompletedProcess(args=['ssh', '-t', 'bencher16.soft-dev.org', 'cd', 'yk-fork', '&&', 'CP_PRINT_MACHINE_CODE=1', 'CP_CP_PATCHPOINT=1', 'CP_VERBOSE=1', 'YKB_TRACER=swt', '/home/pd/.cargo/bin/cargo', 'test', '::idempotent_outline.c', '--', '--nocapture'], returncode=1)
 %2]
   |    %4: i64 = load %1
   |    %6: i1 = eq %4, 4i64
   |    guard true, %6, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%11_1: %4, 19:%11_2: %4] ; trace_gidx 0 safepoint_id 14
   |    %8: ptr = lookup_global @stderr
   |    %9: ptr = load %8
   |    %10: i64 = load %1
   |    %11: i64 = call @__yk_unopt_f(%4, %4) <idem_const 28i64>
   |    %13: ptr = lookup_global @.str
   |    %14: i32 = call @fprintf(%9, %13, %10, %11)
   |    %15: i64 = load %1
   |    %16: i64 = add %15, 18446744073709551615i64
   |    *%1 = %16
   |    %18: i1 = eq %16, 0i64
   |    guard false, %18, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
   |    header_end [%0, %1, %2]
   |--- End jit-pre-opt ---
   |--- Begin jit-post-opt ---
   |; compiled trace ID #0
   |
   |func_decl __yk_unopt_f (i64, i64) -> i64
   |func_decl fprintf (ptr, ptr, ...) -> i32
   |global_decl @stderr
   |global_decl @.str
   |
   |entry:
   |    %0: ptr = param Direct(6, -48, 8)
   |    %1: ptr = param Register(3, 8, [])
   |    %2: ptr = param Register(13, 8, [])
   |    header_start [%0, %1, %2]
   |    %4: i64 = load %1
   |    %6: i1 = eq %4, 4i64
   |    guard true, %6, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%11_1: %4, 19:%11_2: %4] ; trace_gidx 0 safepoint_id 14
   |    %8: ptr = lookup_global @stderr
   |    %9: ptr = load %8
   |    %13: ptr = lookup_global @.str
   |    %14: i32 = call @fprintf(%9, %13, 4i64, 28i64)
   |    %15: i64 = load %1
   |    %16: i64 = add %15, 18446744073709551615i64
   |    *%1 = %16
   |    %18: i1 = eq %16, 0i64
   |    guard false, %18, [19:%0_4: %0, 19:%0_5: %1, 19:%1_1: %2, 19:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
   |    header_end [%0, %1, %2]
   |    %21: ptr = param Direct(6, -48, 8)
   |    %22: ptr = param Register(3, 8, [])
   |    %23: ptr = param Register(13, 8, [])
   |    body_start [%21, %22, %23]
   |    %25: i64 = load %22
   |    %26: i1 = eq %25, 4i64
   |    guard true, %26, [19:%0_4: %21, 19:%0_5: %22, 19:%1_1: %23, 19:%11_1: %25, 19:%11_2: %25] ; trace_gidx 2 safepoint_id 14
   |    %28: ptr = lookup_global @stderr
   |    %29: ptr = load %28
   |    %30: ptr = lookup_global @.str
   |    %31: i32 = call @fprintf(%29, %30, 4i64, 28i64)
   |    %32: i64 = load %22
   |    %33: i64 = add %32, 18446744073709551615i64
   |    *%22 = %33
   |    %35: i1 = eq %33, 0i64
   |    guard false, %35, [19:%0_4: %21, 19:%0_5: %22, 19:%1_1: %23, 19:%15_4: 1i1] ; trace_gidx 3 safepoint_id 2
   |    body_end [%21, %22, %23]
   |--- End jit-post-opt ---
   |3: 24
   |yk-jit-event: enter-jit-code
   |yk-jit-event: deoptimise
   |2: 20
   |yk-jit-event: enter-jit-code
   |yk-jit-event: deoptimise
   |4222429319: 16889717288
   |

Pattern (error at line 31):
   ...
   |2: 20
   |yk-jit-event: enter-jit-code
   |yk-jit-event: deoptimise
>> |1: 16

Names at point of failure:
  {{size}}: 64
  {{v}}: 4

Text (error at line 536):
   ...
   |2: 20
   |yk-jit-event: enter-jit-code
   |yk-jit-event: deoptimise
>> |4222429319: 16889717288

---- lang_tests::idempotent_outline.c stdout ----

Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
Transition: UnoptToOpt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(3, 8, []) dst: Register(14, 8, [])
Register2Register - src: Register(13, 8, []) dst: Register(15, 8, [])
Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
[DEOPT] Register(3, 8, []), jitval: 140056308527120
[DEOPT] Register(13, 8, [-64]), jitval: 798406272
[DEOPT] Register(14, 8, [5]), jitval: 2
[DEOPT] Register(0, 8, []), jitval: 2
Transition: OptToUnopt
src_rbp: 0x7fff3c99b5c0, reg_store: 0x7fff3c99b510, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
[DEOPT] Register(3, 8, []), jitval: 140056312358528
[DEOPT] Register(13, 8, [-64]), jitval: 2
[DEOPT] Register(14, 8, [5]), jitval: 4222429319
[DEOPT] Register(0, 8, []), jitval: 4222429319

failures:
    lang_tests::idempotent_outline.c

test result: [0m[31mFAILED[0m. 0 passed; 1 failed; 0 ignored; 0 measured; 155 filtered out

[1m[31merror[0m[1m:[0m test failed, to rerun pass `-p tests --test c_tests`

Caused by:
  process didn't exit successfully: `/home/pd/yk-fork/target/debug/deps/c_tests-311eca720dce6708 '::idempotent_outline.c' --nocapture` (exit status: 1)
Shared connection to bencher16.soft-dev.org closed.
CompletedProcess(args=['ssh', '-t', 'bencher16.soft-dev.org', 'cd', 'yk-fork', '&&', 'CP_PRINT_MACHINE_CODE=1', 'CP_CP_PATCHPOINT=1', 'CP_VERBOSE=1', 'YKB_TRACER=swt', '/home/pd/.cargo/bin/cargo', 'test', '::idempotent_outline.c', '--', '--nocapture'], returncode=1)
