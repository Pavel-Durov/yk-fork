[1m[32m   Compiling[0m ykrt v0.1.0 (/home/pd/yk-fork/ykrt)
[1m[36m    Building[0m [======================>  ] 273/286: ykrt, ykrt(test)                                                                          [K[0m[1m[33mwarning[0m[0m[1m: unused import: `marker::PhantomData`[0m
[0m  [0m[0m[1m[38;5;12m--> [0m[0mykrt/src/compile/jitc_yk/trace_builder.rs:21:47[0m
[0m   [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m21[0m[0m [0m[0m[1m[38;5;12m|[0m[0m [0m[0muse std::{collections::HashMap, ffi::CString, marker::PhantomData, sync::Arc};[0m
[0m   [0m[0m[1m[38;5;12m|[0m[0m                                               [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^[0m
[0m   [0m[0m[1m[38;5;12m|[0m
[0m   [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_imports)]` on by default[0m

[1m[36m    Building[0m [======================>  ] 273/286: ykrt, ykrt(test)                                                                          [K[0m[1m[33mwarning[0m[0m[1m: unused variable: `skip_next_call`[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0mykrt/src/trace/swt/cp.rs:518:13[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m518[0m[0m [0m[0m[1m[38;5;12m|[0m[0m [0m[0m    let mut skip_next_call = false;[0m
[0m    [0m[0m[1m[38;5;12m|[0m[0m             [0m[0m[1m[33m^^^^^^^^^^^^^^[0m[0m [0m[0m[1m[33mhelp: if this is intentional, prefix it with an underscore: `_skip_next_call`[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_variables)]` on by default[0m

[1m[36m    Building[0m [======================>  ] 273/286: ykrt, ykrt(test)                                                                          [K[0m[1m[33mwarning[0m[0m[1m: variable does not need to be mutable[0m
[0m   [0m[0m[1m[38;5;12m--> [0m[0mykrt/src/trace/swt/cp.rs:518:9[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m518[0m[0m [0m[0m[1m[38;5;12m|[0m[0m [0m[0m    let mut skip_next_call = false;[0m
[0m    [0m[0m[1m[38;5;12m|[0m[0m         [0m[0m[1m[38;5;12m----[0m[0m[1m[33m^^^^^^^^^^^^^^[0m
[0m    [0m[0m[1m[38;5;12m|[0m[0m         [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m|[0m[0m         [0m[0m[1m[38;5;12mhelp: remove this `mut`[0m
[0m    [0m[0m[1m[38;5;12m|[0m
[0m    [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: `#[warn(unused_mut)]` on by default[0m

[1m[36m    Building[0m [======================>  ] 273/286: ykrt, ykrt(test)                                                                          [K[1m[33mwarning[0m[1m:[0m `ykrt` (lib) generated 3 warnings (run `cargo fix --lib -p ykrt` to apply 2 suggestions)
[1m[32m   Compiling[0m ykcapi v0.1.0 (/home/pd/yk-fork/ykcapi)
[1m[36m    Building[0m [======================>  ] 274/286: ykcapi(test), ykrt(test), ykcapi                                                          [1m[36m    Building[0m [=======================> ] 275/286: ykrt(test), ykcapi                                                                        [K[1m[32m   Compiling[0m tests v0.1.0 (/home/pd/yk-fork/tests)
[1m[36m    Building[0m [=======================> ] 276/286: tests, ykrt(test), tests(test)                                                            [1m[36m    Building[0m [=======================> ] 277/286: tests, ykrt(test)                                                                         [1m[36m    Building[0m [=======================> ] 278/286: c_tests(test), gdb_c_test(bin), ykrt(test), dump_ir(bin), ir_lowering_tests(test), dump...[K[1m[33mwarning[0m[1m:[0m `ykrt` (lib test) generated 3 warnings (3 duplicates)
[1m[36m    Building[0m [=======================> ] 279/286: c_tests(test), gdb_c_test(bin), dump_ir(bin), ir_lowering_tests(test), dump_ir(bin test...[1m[36m    Building[0m [=======================> ] 280/286: c_tests(test), gdb_c_test(bin), dump_ir(bin), ir_lowering_tests(test), dump_ir(bin test...[1m[36m    Building[0m [=======================> ] 281/286: c_tests(test), gdb_c_test(bin), dump_ir(bin), ir_lowering_tests(test), dump_ir(bin test)  [1m[36m    Building[0m [=======================> ] 282/286: c_tests(test), gdb_c_test(bin), dump_ir(bin), dump_ir(bin test)                           [1m[36m    Building[0m [=======================> ] 283/286: c_tests(test), gdb_c_test(bin), dump_ir(bin)                                              [1m[36m    Building[0m [=======================> ] 284/286: gdb_c_test(bin), dump_ir(bin)                                                             [1m[36m    Building[0m [=======================> ] 285/286: gdb_c_test(bin)                                                                           [K[1m[32m    Finished[0m `test` profile [unoptimized + debuginfo] target(s) in 3.02s
[1m[32m     Running[0m unittests src/lib.rs (target/debug/deps/hwtracer-a535f5feb18f782c)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 13 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/lib.rs (target/debug/deps/tests-c1b84d434960c791)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/bin/dump_ir.rs (target/debug/deps/dump_ir-d9ba60a5171b214f)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/bin/gdb_c_test.rs (target/debug/deps/gdb_c_test-d506696128bf7844)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m langtest_c.rs (target/debug/deps/c_tests-94e76f2b45a7c7c6)
Running C tests...

running 1 tests********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-48]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -48
  CFI_INSTRUCTION offset $r12, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14d = MOV32rr $edi
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
  renamable $rdx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_head, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rdx, 1, $noreg, 0, $fs, renamable $rax :: (store (s64) into @shadowstack_head)
  renamable $rdx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rdx, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  $rcx = MOV64rr $rax
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 8, implicit-def dead $eflags
  $r15 = MOV64rr $rax
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 16, implicit-def dead $eflags
  $r12 = MOV64rr $rax
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 20, implicit-def dead $eflags
  MOV32mi renamable $rax, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)
  MOV32mr killed renamable $rax, 1, $noreg, 4, $noreg, killed renamable $r14d :: (store (s32) into %ir.6)
  JMP_1 %bb.1, debug-location !30; c/simple.c:36:14

bb.1 (%ir-block.12, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $rcx, $r12, $r15
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !30; c/simple.c:36:14 line no:36
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.7)
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !33; c/simple.c:36:27 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !40; c/simple.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !40; c/simple.c:37:14
  JMP_1 %bb.2, debug-location !39; c/simple.c:37:9

bb.2 (%ir-block.14, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rax, $r12, $r15
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax, debug-location !39 :: (store (s64) into %ir.8); c/simple.c:37:9
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !41 :: (load (s64) from %ir.8); c/simple.c:38:27
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !42; c/simple.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !42; c/simple.c:38:3
  JMP_1 %bb.3, debug-location !43; c/simple.c:39:14

bb.3 (%ir-block.16, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r12, $r15
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !52; c/simple.c:39:20
  JMP_1 %bb.4, debug-location !52; c/simple.c:39:20

bb.4 (%ir-block.18, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rax, $r12, $r15
  MOV64mr $rbp, 1, $noreg, -40, $noreg, killed renamable $rax, debug-location !52 :: (store (s64) into %ir.19); c/simple.c:39:20
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  MOV32mi renamable $r15, 1, $noreg, 0, $noreg, 9998, debug-location !54 :: (store (s32) into %ir.10); c/simple.c:41:7
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  MOV32mi renamable $r12, 1, $noreg, 0, $noreg, 4, debug-location !56 :: (store (s32) into %ir.11); c/simple.c:42:7
  dead renamable $rax = MOV64rm $rbp, 1, $noreg, -40, $noreg, debug-location !57 :: (load (s64) from %ir.9); c/simple.c:43:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -40, $noreg, $1:[mem:m], $rbp, 1, $noreg, -40, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !58, debug-location !57; c/simple.c:43:3
  JMP_1 %bb.5, debug-location !59; c/simple.c:44:3

bb.5 (%ir-block.21, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  dead renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !59 :: (load (s32) from %ir.10); c/simple.c:44:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !60, debug-location !59; c/simple.c:44:3
  JMP_1 %bb.6, debug-location !61; c/simple.c:45:3

bb.6 (%ir-block.23, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  dead renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !61 :: (load (s32) from %ir.11); c/simple.c:45:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r12, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r12, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !62, debug-location !61; c/simple.c:45:3
  JMP_1 %bb.7, debug-location !63; c/simple.c:46:3

bb.7 (%ir-block.25, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  JMP_1 %bb.8, debug-location !63; c/simple.c:46:3

bb.8 (%ir-block.26, bb_id 8):
; predecessors: %bb.7, %bb.11
  successors: %bb.9, %bb.12
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !65 :: (load (s32) from %ir.11); c/simple.c:46:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !65; c/simple.c:46:12
  STACKMAP 2, 0, 0, $rbp, -48, 3, 0, $rbp, -40, 3, renamable $r15, 3, renamable $r12, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !63 :: (load (s64) from %stack.0), (load (s64) from %stack.1); c/simple.c:46:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !63; c/simple.c:46:3
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !63; c/simple.c:46:3
  JMP_1 %bb.12, debug-location !63; c/simple.c:46:3

bb.9 (%ir-block.29, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !66 :: (load (s64) from %ir.8); c/simple.c:47:25
  renamable $rsi = LEA64r $rbp, 1, $noreg, -40, $noreg, debug-location !68; c/simple.c:47:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !68; c/simple.c:47:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, 0, $rbp, -40, 3, renamable $r15, 3, renamable $r12, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r12, $r15, $r12b, $r15b, $r12bh, $r15bh, $r12d, $r15d, $r12w, $r15w, $r12wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !68 :: (load (s64) from %stack.0), (load (s64) from %stack.1); c/simple.c:47:5
  JMP_1 %bb.10, debug-location !69; c/simple.c:48:13

bb.10 (%ir-block.31, bb_id 10):
; predecessors: %bb.9
  successors: %bb.11
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !69 :: (load (s64) from @stderr); c/simple.c:48:13
  renamable $edx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !70 :: (load (s32) from %ir.11); c/simple.c:48:29
  renamable $rsi = MOV64ri @.str, debug-location !71; c/simple.c:48:5
  $al = MOV8ri 0, debug-location !71; c/simple.c:48:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit-def $eax, debug-location !71; c/simple.c:48:5
  JMP_1 %bb.11, debug-location !72; c/simple.c:49:6

bb.11 (%ir-block.35, bb_id 11):
; predecessors: %bb.10
  successors: %bb.8
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !72 :: (load (s32) from %ir.11); c/simple.c:49:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !72; c/simple.c:49:6
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !72 :: (store (s32) into %ir.11); c/simple.c:49:6
  JMP_1 %bb.8, debug-location !63; c/simple.c:46:3

bb.12 (%ir-block.38, bb_id 12):
; predecessors: %bb.8
  successors: %bb.13
  liveins: $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !76 :: (load (s64) from @stderr); c/simple.c:51:11
  renamable $rsi = MOV64ri @.str.1, debug-location !77; c/simple.c:51:3
  $al = MOV8ri 0, debug-location !77; c/simple.c:51:3
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax, debug-location !77; c/simple.c:51:3
  JMP_1 %bb.13, debug-location !78; c/simple.c:52:3

bb.13 (%ir-block.41, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  dead renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !78 :: (load (s32) from %ir.10); c/simple.c:52:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], killed renamable $r15, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !79, debug-location !78; c/simple.c:52:3
  JMP_1 %bb.14, debug-location !80; c/simple.c:53:3

bb.14 (%ir-block.43, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15

  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -40, $noreg, debug-location !80 :: (load (s64) from %ir.44); c/simple.c:53:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !80; c/simple.c:53:3
  JMP_1 %bb.15, debug-location !81; c/simple.c:54:18

bb.15 (%ir-block.46, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16

  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !81 :: (load (s64) from %ir.8); c/simple.c:54:18
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !82; c/simple.c:54:3
  JMP_1 %bb.16, debug-location !83; c/simple.c:55:3

bb.16 (%ir-block.48, bb_id 16):
; predecessors: %bb.15
  successors: %bb.18

  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  JMP_1 %bb.18, debug-location !83; c/simple.c:55:3

bb.17 (%ir-block.49, bb_id 17):
; predecessors: %bb.18

  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !83; c/simple.c:55:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags, debug-location !83; c/simple.c:55:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !83; c/simple.c:55:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !83; c/simple.c:55:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !83; c/simple.c:55:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !83; c/simple.c:55:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !83; c/simple.c:55:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !83; c/simple.c:55:3
  RET64 implicit $eax, debug-location !83; c/simple.c:55:3

bb.18 (%ir-block.50, bb_id 18):
; predecessors: %bb.16
  successors: %bb.17

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !83; c/simple.c:55:3
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !56; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !54; c/simple.c:41:7 line no:41 indirect
  JMP_1 %bb.17, debug-location !83; c/simple.c:55:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-64]
  fi#1: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14d = MOV32rr $edi
  $edi = MOV32ri 9
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $r13 = MOV64rr $rax
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 8, implicit-def dead $eflags
  $r15 = MOV64rr $rax
  renamable $r15 = ADD64ri32 killed renamable $r15(tied-def 0), 16, implicit-def dead $eflags
  $r12 = MOV64rr $rax
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 20, implicit-def dead $eflags
  MOV32mi renamable $rax, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)
  MOV32mr killed renamable $rax, 1, $noreg, 4, $noreg, killed renamable $r14d :: (store (s32) into %ir.5)
  JMP_1 %bb.1, debug-location !85; c/simple.c:36:14

bb.1 (%ir-block.11, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r12, $r13, $r15
  $edi = MOV32ri 9
  $esi = MOV32ri 1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !85; c/simple.c:36:14 line no:36
  MOV64mr killed renamable $r13, 1, $noreg, 0, $noreg, killed renamable $rbx :: (store (s64) into %ir.6)
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !88; c/simple.c:36:27 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !91; c/simple.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !91; c/simple.c:37:14
  $rbx = MOV64rr $rax, debug-location !91; c/simple.c:37:14
  JMP_1 %bb.2, debug-location !90; c/simple.c:37:9

bb.2 (%ir-block.13, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r15
  $edi = MOV32ri 9, debug-location !90; c/simple.c:37:9
  $esi = MOV32ri 2, debug-location !90; c/simple.c:37:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !90; c/simple.c:37:9
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rbx, debug-location !90 :: (store (s64) into %ir.7); c/simple.c:37:9
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg, debug-location !92 :: (load (s64) from %ir.7); c/simple.c:38:27
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !93; c/simple.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !93; c/simple.c:38:3
  JMP_1 %bb.3, debug-location !94; c/simple.c:39:14

bb.3 (%ir-block.15, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r12, $r15
  $edi = MOV32ri 9, debug-location !95; c/simple.c:39:20
  $esi = MOV32ri 3, debug-location !95; c/simple.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/simple.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !95; c/simple.c:39:20
  $rbx = MOV64rr $rax, debug-location !95; c/simple.c:39:20
  JMP_1 %bb.4, debug-location !95; c/simple.c:39:20

bb.4 (%ir-block.17, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r12, $r15
  $edi = MOV32ri 9, debug-location !95; c/simple.c:39:20
  $esi = MOV32ri 4, debug-location !95; c/simple.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/simple.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !95 :: (store (s64) into %ir.18); c/simple.c:39:20
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  MOV32mi renamable $r15, 1, $noreg, 0, $noreg, 9998, debug-location !98 :: (store (s32) into %ir.9); c/simple.c:41:7
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  MOV32mi renamable $r12, 1, $noreg, 0, $noreg, 4, debug-location !100 :: (store (s32) into %ir.10); c/simple.c:42:7
  dead renamable $rax = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !101 :: (load (s64) from %ir.8); c/simple.c:43:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !58, debug-location !101; c/simple.c:43:3
  JMP_1 %bb.5, debug-location !102; c/simple.c:44:3

bb.5 (%ir-block.20, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !102; c/simple.c:44:3
  $esi = MOV32ri 5, debug-location !102; c/simple.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/simple.c:44:3
  dead renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !102 :: (load (s32) from %ir.9); c/simple.c:44:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !60, debug-location !102; c/simple.c:44:3
  JMP_1 %bb.6, debug-location !103; c/simple.c:45:3

bb.6 (%ir-block.22, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !103; c/simple.c:45:3
  $esi = MOV32ri 6, debug-location !103; c/simple.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/simple.c:45:3
  dead renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !103 :: (load (s32) from %ir.10); c/simple.c:45:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r12, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r12, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !62, debug-location !103; c/simple.c:45:3
  JMP_1 %bb.7, debug-location !104; c/simple.c:46:3

bb.7 (%ir-block.24, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !104; c/simple.c:46:3
  $esi = MOV32ri 7, debug-location !104; c/simple.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !104; c/simple.c:46:3
  JMP_1 %bb.8, debug-location !104; c/simple.c:46:3

bb.8 (%ir-block.25, bb_id 8):
; predecessors: %bb.7, %bb.11
  successors: %bb.9, %bb.12
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !105; c/simple.c:46:10
  $esi = MOV32ri 8, debug-location !105; c/simple.c:46:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !105; c/simple.c:46:10
  CMP32mi renamable $r12, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !106 :: (load (s32) from %ir.10); c/simple.c:46:12
  renamable $al = SETCCr 15, implicit killed $eflags, debug-location !106; c/simple.c:46:12
  STACKMAP 3, 0, 0, $rbp, -56, 3, 0, $rbp, -48, 3, renamable $r15, 3, renamable $r12, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !104 :: (load (s64) from %stack.0), (load (s64) from %stack.1); c/simple.c:46:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !104; c/simple.c:46:3
  JCC_1 %bb.9, 5, implicit killed $eflags, debug-location !104; c/simple.c:46:3
  JMP_1 %bb.12, debug-location !104; c/simple.c:46:3

bb.9 (%ir-block.28, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !107; c/simple.c:47:25
  $esi = MOV32ri 9, debug-location !107; c/simple.c:47:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !107; c/simple.c:47:25
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg, debug-location !107 :: (load (s64) from %ir.7); c/simple.c:47:25
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !109; c/simple.c:47:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !109; c/simple.c:47:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -56, 3, 0, $rbp, -48, 3, renamable $r15, 3, renamable $r12, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r12, $r15, $r12b, $r15b, $r12bh, $r15bh, $r12d, $r15d, $r12w, $r15w, $r12wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !109 :: (load (s64) from %stack.0), (load (s64) from %stack.1); c/simple.c:47:5
  JMP_1 %bb.10, debug-location !110; c/simple.c:48:13

bb.10 (%ir-block.30, bb_id 10):
; predecessors: %bb.9
  successors: %bb.11
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !110; c/simple.c:48:13
  $esi = MOV32ri 10, debug-location !110; c/simple.c:48:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !110; c/simple.c:48:13
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !110 :: (load (s64) from @stderr); c/simple.c:48:13
  renamable $edx = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !111 :: (load (s32) from %ir.10); c/simple.c:48:29
  renamable $rsi = MOV64ri @.str, debug-location !112; c/simple.c:48:5
  $al = MOV8ri 0, debug-location !112; c/simple.c:48:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $edx, implicit-def $eax, debug-location !112; c/simple.c:48:5
  JMP_1 %bb.11, debug-location !113; c/simple.c:49:6

bb.11 (%ir-block.34, bb_id 11):
; predecessors: %bb.10
  successors: %bb.8
  liveins: $r12, $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !113; c/simple.c:49:6
  $esi = MOV32ri 11, debug-location !113; c/simple.c:49:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !113; c/simple.c:49:6
  renamable $eax = MOV32rm renamable $r12, 1, $noreg, 0, $noreg, debug-location !113 :: (load (s32) from %ir.10); c/simple.c:49:6
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -1, implicit-def dead $eflags, debug-location !113; c/simple.c:49:6
  MOV32mr renamable $r12, 1, $noreg, 0, $noreg, killed renamable $eax, debug-location !113 :: (store (s32) into %ir.10); c/simple.c:49:6
  JMP_1 %bb.8, debug-location !104; c/simple.c:46:3

bb.12 (%ir-block.37, bb_id 12):
; predecessors: %bb.8
  successors: %bb.13
  liveins: $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !116; c/simple.c:51:11
  $esi = MOV32ri 12, debug-location !116; c/simple.c:51:11
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !116; c/simple.c:51:11
  renamable $rdi = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !116 :: (load (s64) from @stderr); c/simple.c:51:11
  renamable $rsi = MOV64ri @.str.1, debug-location !117; c/simple.c:51:3
  $al = MOV8ri 0, debug-location !117; c/simple.c:51:3
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax, debug-location !117; c/simple.c:51:3
  JMP_1 %bb.13, debug-location !118; c/simple.c:52:3

bb.13 (%ir-block.40, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r15
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !118; c/simple.c:52:3
  $esi = MOV32ri 13, debug-location !118; c/simple.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !118; c/simple.c:52:3
  dead renamable $eax = MOV32rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !118 :: (load (s32) from %ir.9); c/simple.c:52:3
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], killed renamable $r15, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !79, debug-location !118; c/simple.c:52:3
  JMP_1 %bb.14, debug-location !119; c/simple.c:53:3

bb.14 (%ir-block.42, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15

  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !119; c/simple.c:53:3
  $esi = MOV32ri 14, debug-location !119; c/simple.c:53:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !119; c/simple.c:53:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !119 :: (load (s64) from %ir.43); c/simple.c:53:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !119; c/simple.c:53:3
  JMP_1 %bb.15, debug-location !120; c/simple.c:54:18

bb.15 (%ir-block.45, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16

  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !120; c/simple.c:54:18
  $esi = MOV32ri 15, debug-location !120; c/simple.c:54:18
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !120; c/simple.c:54:18
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg, debug-location !120 :: (load (s64) from %ir.7); c/simple.c:54:18
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !121; c/simple.c:54:3
  JMP_1 %bb.16, debug-location !122; c/simple.c:55:3

bb.16 (%ir-block.47, bb_id 16):
; predecessors: %bb.15
  successors: %bb.18

  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !122; c/simple.c:55:3
  $esi = MOV32ri 16, debug-location !122; c/simple.c:55:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !122; c/simple.c:55:3
  JMP_1 %bb.18, debug-location !122; c/simple.c:55:3

bb.17 (%ir-block.48, bb_id 17):
; predecessors: %bb.18

  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !122; c/simple.c:55:3
  $esi = MOV32ri 17, debug-location !122; c/simple.c:55:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !122; c/simple.c:55:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !122; c/simple.c:55:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !122; c/simple.c:55:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !122; c/simple.c:55:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !122; c/simple.c:55:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !122; c/simple.c:55:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !122; c/simple.c:55:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !122; c/simple.c:55:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !122; c/simple.c:55:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !122; c/simple.c:55:3
  RET64 implicit $eax, debug-location !122; c/simple.c:55:3

bb.18 (%ir-block.49, bb_id 18):
; predecessors: %bb.16
  successors: %bb.17

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !122; c/simple.c:55:3
  DBG_VALUE $r12, 0, !"i", !DIExpression(), debug-location !100; c/simple.c:42:7 line no:42 indirect
  DBG_VALUE $r15, 0, !"res", !DIExpression(), debug-location !98; c/simple.c:41:7 line no:41 indirect
  $edi = MOV32ri 9, debug-location !122; c/simple.c:55:3
  $esi = MOV32ri 18, debug-location !122; c/simple.c:55:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !122; c/simple.c:55:3
  JMP_1 %bb.17, debug-location !122; c/simple.c:55:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
yk-tracing: start-tracing
Transition: OptToUnopt ExecTrace: false
src_rbp: 0x7ffc3bdabd20, reg_store: 0x7ffc3bdabc80, src_frame_size: 0x30, dst_frame_size: 0x40, rbp_offset_reg_store: 0xa0
Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
Register2Register - src: Register(12, 8, []) dst: Register(12, 8, [])
ASM DUMP:
  0: movabs rbp, 0x7ffc3bdabd20
  a: movabs rsp, 0x7ffc3bdabd20
  14: sub rsp, 0x40
  1b: mov r15, qword ptr [rbp - 0xa0]
  22: mov r12, qword ptr [rbp - 0x88]
  29: mov rax, qword ptr [rbp - 0x40]
  30: mov rcx, qword ptr [rbp - 0x48]
  37: mov rbx, qword ptr [rbp - 0x50]
  3e: mov rdi, qword ptr [rbp - 0x58]
  45: mov rsi, qword ptr [rbp - 0x60]
  4c: mov r8, qword ptr [rbp - 0x68]
  53: mov r9, qword ptr [rbp - 0x70]
  5a: mov r10, qword ptr [rbp - 0x78]
  61: mov r11, qword ptr [rbp - 0x80]
  68: mov r13, qword ptr [rbp - 0x90]
  6f: mov r14, qword ptr [rbp - 0x98]
  76: sub rsp, 0x10
  7a: mov qword ptr [rsp], rax
  7e: movabs rax, 0x20329f
  88: mov qword ptr [rsp + 8], rax
  8d: pop rax
  8e: ret 
4
Transition: UnoptToOpt ExecTrace: false
src_rbp: 0x7ffc3bdabd20, reg_store: 0x7ffc3bdabc70, src_frame_size: 0x40, dst_frame_size: 0x30, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
Register2Register - src: Register(12, 8, []) dst: Register(12, 8, [])
ASM DUMP:
  0: movabs rbp, 0x7ffc3bdabd20
  a: movabs rsp, 0x7ffc3bdabd20
  14: sub rsp, 0x30
  1b: mov r15, qword ptr [rbp - 0xb0]
  22: mov r12, qword ptr [rbp - 0x98]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rbx, qword ptr [rbp - 0x60]
  3e: mov rdi, qword ptr [rbp - 0x68]
  45: mov rsi, qword ptr [rbp - 0x70]
  4c: mov r8, qword ptr [rbp - 0x78]
  53: mov r9, qword ptr [rbp - 0x80]
  5a: mov r10, qword ptr [rbp - 0x88]
  61: mov r11, qword ptr [rbp - 0x90]
  68: mov r13, qword ptr [rbp - 0xa0]
  6f: mov r14, qword ptr [rbp - 0xa8]
  76: sub rsp, 0x10
  7a: mov qword ptr [rsp], rax
  7e: movabs rax, 0x2030cc
  88: mov qword ptr [rsp + 8], rax
  8d: pop rax
  8e: ret 
3
yk-tracing: stop-tracing
--- Begin aot ---
# IR format version: 0
# Num funcs: 15
# Num consts: 25
# Num global decls: 5
# Num types: 21
global_decl tls @shadowstack_head
global_decl tls @shadowstack_0
global_decl @stderr
global_decl @.str
global_decl @.str.1

#[yk_outline]
func main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    %0_2: ptr = call malloc(1000000i64)
    %0_3: ptr = ptr_add %0_2, 32
    *@shadowstack_head = %0_2
    *@shadowstack_0 = %0_3
    %0_6: ptr = ptr_add %0_2, 0
    %0_7: ptr = ptr_add %0_2, 4
    %0_8: ptr = ptr_add %0_2, 8
    %0_9: ptr = alloca ptr, 1, 8
    %0_10: ptr = alloca {0: i64}, 1, 8
    %0_11: ptr = ptr_add %0_2, 16
    %0_12: ptr = ptr_add %0_2, 20
    *%0_6 = 0i32
    *%0_7 = %0_0
    # simple.c:36: int main(int argc, char **argv) {
    br bb1
  bb1:
    *%0_8 = %0_1
    # simple.c:37: YkMT *mt = yk_mt_new(NULL);
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    *%0_9 = %1_1
    # simple.c:38: yk_mt_hot_threshold_set(mt, 0);
    %2_1: ptr = load %0_9
    call yk_mt_hot_threshold_set(%2_1, 0i32)
    # simple.c:39: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    %3_0: i64 = call yk_location_new()
    br bb4
  bb4:
    %4_0: ptr = ptr_add %0_10, 0
    *%4_0 = %3_0
    # simple.c:41: int res = 9998;
    *%0_11 = 9998i32
    # simple.c:42: int i = 4;
    *%0_12 = 4i32
    # simple.c:43: NOOPT_VAL(loc);
    %4_4: i64 = load %0_10
    # simple.c:44: NOOPT_VAL(res);
    br bb5
  bb5:
    %5_0: i32 = load %0_11
    # simple.c:45: NOOPT_VAL(i);
    br bb6
  bb6:
    %6_0: i32 = load %0_12
    # simple.c:46: while (i > 0) {
    br bb7
  bb7:
    br bb8
  bb8:
    %8_0: i32 = load %0_12
    %8_1: i1 = sgt %8_0, 0i32
    condbr %8_1, bb9, bb12 [safepoint: 2i64, (%0_9, %0_10, %0_11, %0_12, %8_1)]
  bb9:
    # simple.c:47: yk_mt_control_point(mt, &loc);
    %9_0: ptr = load %0_9
    call llvm.experimental.patchpoint.void(0i64, 13i32, __ykrt_control_point, 3i32, %9_0, %0_10, 0i64, %0_9, %0_10, %0_11, %0_12) [safepoint: 0i64, (%0_9, %0_10, %0_11, %0_12)]
    # simple.c:48: fprintf(stderr, "%d\n", i);
    br bb10
  bb10:
    %10_0: ptr = load @stderr
    %10_1: i32 = load %0_12
    %10_2: i32 = call fprintf(%10_0, @.str, %10_1)
    # simple.c:49: i--;
    br bb11
  bb11:
    %11_0: i32 = load %0_12
    %11_1: i32 = add %11_0, -1i32
    *%0_12 = %11_1
    # simple.c:46: while (i > 0) {
    br bb8
  bb12:
    # simple.c:51: fprintf(stderr, "exit\n");
    %12_0: ptr = load @stderr
    %12_1: i32 = call fprintf(%12_0, @.str.1)
    # simple.c:52: NOOPT_VAL(res);
    br bb13
  bb13:
    %13_0: i32 = load %0_11
    # simple.c:53: yk_location_drop(loc);
    br bb14
  bb14:
    %14_0: ptr = ptr_add %0_10, 0
    %14_1: i64 = load %14_0
    call yk_location_drop(%14_1)
    # simple.c:54: yk_mt_shutdown(mt);
    br bb15
  bb15:
    %15_0: ptr = load %0_9
    call yk_mt_shutdown(%15_0)
    # simple.c:55: return (EXIT_SUCCESS);
    br bb16
  bb16:
    br bb18
  bb17:
    ret 0i32
  bb18:
    br bb17
}

func llvm.dbg.declare(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

func yk_mt_new(%arg0: ptr) -> ptr;

func yk_mt_hot_threshold_set(%arg0: ptr, %arg1: i32);

func yk_location_new() -> i64;

func yk_mt_control_point(%arg0: ptr, %arg1: ptr);

func fprintf(%arg0: ptr, %arg1: ptr, ...) -> i32;

func yk_location_drop(%arg0: i64);

func yk_mt_shutdown(%arg0: ptr);

#[yk_outline]
func __yk_unopt_main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock(9i32, 0i32)
    %0_3: ptr = load @shadowstack_0
    %0_4: ptr = ptr_add %0_3, 0
    %0_5: ptr = ptr_add %0_3, 4
    %0_6: ptr = ptr_add %0_3, 8
    %0_7: ptr = alloca ptr, 1, 8
    %0_8: ptr = alloca {0: i64}, 1, 8
    %0_9: ptr = ptr_add %0_3, 16
    %0_10: ptr = ptr_add %0_3, 20
    *%0_4 = 0i32
    *%0_5 = %0_0
    # simple.c:36: int main(int argc, char **argv) {
    br bb1
  bb1:
    call __yk_trace_basicblock(9i32, 1i32)
    *%0_6 = %0_1
    # simple.c:37: YkMT *mt = yk_mt_new(NULL);
    %1_2: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    call __yk_trace_basicblock(9i32, 2i32)
    *%0_7 = %1_2
    # simple.c:38: yk_mt_hot_threshold_set(mt, 0);
    %2_2: ptr = load %0_7
    call yk_mt_hot_threshold_set(%2_2, 0i32)
    # simple.c:39: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock(9i32, 3i32)
    %3_1: i64 = call yk_location_new()
    br bb4
  bb4:
    call __yk_trace_basicblock(9i32, 4i32)
    %4_1: ptr = ptr_add %0_8, 0
    *%4_1 = %3_1
    # simple.c:41: int res = 9998;
    *%0_9 = 9998i32
    # simple.c:42: int i = 4;
    *%0_10 = 4i32
    # simple.c:43: NOOPT_VAL(loc);
    %4_5: i64 = load %0_8
    # simple.c:44: NOOPT_VAL(res);
    br bb5
  bb5:
    call __yk_trace_basicblock(9i32, 5i32)
    %5_1: i32 = load %0_9
    # simple.c:45: NOOPT_VAL(i);
    br bb6
  bb6:
    call __yk_trace_basicblock(9i32, 6i32)
    %6_1: i32 = load %0_10
    # simple.c:46: while (i > 0) {
    br bb7
  bb7:
    call __yk_trace_basicblock(9i32, 7i32)
    br bb8
  bb8:
    call __yk_trace_basicblock(9i32, 8i32)
    %8_1: i32 = load %0_10
    %8_2: i1 = sgt %8_1, 0i32
    condbr %8_2, bb9, bb12 [safepoint: 3i64, (%0_7, %0_8, %0_9, %0_10, %8_2)]
  bb9:
    # simple.c:47: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock(9i32, 9i32)
    %9_1: ptr = load %0_7
    call llvm.experimental.patchpoint.void(1i64, 13i32, __ykrt_control_point, 3i32, %9_1, %0_8, 1i64, %0_7, %0_8, %0_9, %0_10) [safepoint: 1i64, (%0_7, %0_8, %0_9, %0_10)]
    # simple.c:48: fprintf(stderr, "%d\n", i);
    br bb10
  bb10:
    call __yk_trace_basicblock(9i32, 10i32)
    %10_1: ptr = load @stderr
    %10_2: i32 = load %0_10
    %10_3: i32 = call fprintf(%10_1, @.str, %10_2)
    # simple.c:49: i--;
    br bb11
  bb11:
    call __yk_trace_basicblock(9i32, 11i32)
    %11_1: i32 = load %0_10
    %11_2: i32 = add %11_1, -1i32
    *%0_10 = %11_2
    # simple.c:46: while (i > 0) {
    br bb8
  bb12:
    # simple.c:51: fprintf(stderr, "exit\n");
    call __yk_trace_basicblock(9i32, 12i32)
    %12_1: ptr = load @stderr
    %12_2: i32 = call fprintf(%12_1, @.str.1)
    # simple.c:52: NOOPT_VAL(res);
    br bb13
  bb13:
    call __yk_trace_basicblock(9i32, 13i32)
    %13_1: i32 = load %0_9
    # simple.c:53: yk_location_drop(loc);
    br bb14
  bb14:
    call __yk_trace_basicblock(9i32, 14i32)
    %14_1: ptr = ptr_add %0_8, 0
    %14_2: i64 = load %14_1
    call yk_location_drop(%14_2)
    # simple.c:54: yk_mt_shutdown(mt);
    br bb15
  bb15:
    call __yk_trace_basicblock(9i32, 15i32)
    %15_1: ptr = load %0_7
    call yk_mt_shutdown(%15_1)
    # simple.c:55: return (EXIT_SUCCESS);
    br bb16
  bb16:
    call __yk_trace_basicblock(9i32, 16i32)
    br bb18
  bb17:
    call __yk_trace_basicblock(9i32, 17i32)
    ret 0i32
  bb18:
    call __yk_trace_basicblock(9i32, 18i32)
    br bb17
}

func malloc(%arg0: i64) -> ptr;

func __ykrt_control_point(%arg0: ptr, %arg1: ptr, %arg2: i64);

func llvm.experimental.patchpoint.void(%arg0: i64, %arg1: i32, %arg2: ptr, %arg3: i32, ...);

func llvm.experimental.stackmap(%arg0: i64, %arg1: i32, ...);

func __yk_trace_basicblock(%arg0: i32, %arg1: i32);

--- End aot ---
--- Begin jit-pre-opt ---
; compiled trace ID #0

func_decl fprintf (ptr, ptr, ...) -> i32
global_decl @stderr
global_decl @.str

entry:
  %0: ptr = param Direct(6, -56, 8)
  %1: ptr = param Direct(6, -48, 8)
  %2: ptr = param Register(15, 8, [])
  %3: ptr = param Register(12, 8, [])
  header_start [%0, %1, %2, %3]
  %5: ptr = lookup_global @stderr
  %6: ptr = load %5
  %7: i32 = load %3
  %8: ptr = lookup_global @.str
  %9: i32 = call @fprintf(%6, %8, %7)
  %10: i32 = load %3
  %11: i32 = add %10, 4294967295i32
  *%3 = %11
  %13: i32 = load %3
  %14: i1 = sgt %13, 0i32
  guard true, %14, [9:%0_7: %0, 9:%0_8: %1, 9:%0_9: %2, 9:%0_10: %3, 9:%8_2: 0i1] ; trace_gidx 0 safepoint_id 3
  %16: ptr = load %0
  header_end [%0, %1, %2, %3]
--- End jit-pre-opt ---
2
yk-execution: enter-jit-code
Transition: OptToUnopt ExecTrace: true
src_rbp: 0x7ffc3bdabd20, reg_store: 0x7ffc3bdabc80, src_frame_size: 0x30, dst_frame_size: 0x40, rbp_offset_reg_store: 0xa0
Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
Register2Register - src: Register(12, 8, []) dst: Register(12, 8, [])
ASM DUMP:
  0: movabs rbp, 0x7ffc3bdabd20
  a: movabs rsp, 0x7ffc3bdabd20
  14: sub rsp, 0x40
  1b: mov r15, qword ptr [rbp - 0xa0]
  22: mov r12, qword ptr [rbp - 0x88]
  29: mov rax, qword ptr [rbp - 0x40]
  30: mov rcx, qword ptr [rbp - 0x48]
  37: mov rbx, qword ptr [rbp - 0x50]
  3e: mov rdi, qword ptr [rbp - 0x58]
  45: mov rsi, qword ptr [rbp - 0x60]
  4c: mov r8, qword ptr [rbp - 0x68]
  53: mov r9, qword ptr [rbp - 0x70]
  5a: mov r10, qword ptr [rbp - 0x78]
  61: mov r11, qword ptr [rbp - 0x80]
  68: mov r13, qword ptr [rbp - 0x90]
  6f: mov r14, qword ptr [rbp - 0x98]
  76: movabs rdi, 0x7ffc3bdabd20
  80: movabs rsi, 0x7ffc3bdabcf0
  8a: movabs rdx, 0x7f2a3c83d000
  94: movabs rcx, 0x7f2a3c29fa00
  9e: call rcx
1
yk-execution: deoptimise TraceId(0) GuardIdx(0)
[DEOPT] Register(15, 8, []), jitval: 0x7f2a3b72a020
[DEOPT] Register(12, 8, []), jitval: 0x7f2a3b72a024
[DEOPT] Register(0, 1, []), jitval: 0x0
exit
^CShared connection to bencher16.soft-dev.org closed.
CompletedProcess(args=['ssh', '-t', 'bencher16.soft-dev.org', 'cd', 'yk-fork', '&&', 'CP_PRINT_MACHINE_CODE=1', 'CP_VERBOSE=1', 'CP_VERBOSE_ASM=1', 'YKB_TRACER=swt', '/home/pd/.cargo/bin/cargo', 'test', '::simple.c', '--', '--nocapture'], returncode=255)
