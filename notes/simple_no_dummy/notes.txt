
# Unopt mt:
   0x00000000002031cd <+125>:	mov    QWORD PTR [rbp-0x38],rbx
   0x00000000002031d1 <+129>:	mov    rdi,QWORD PTR [rbp-0x38]

CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !91; c/simple.c:37:14
  $rbx = MOV64rr $rax, debug-location !91; c/simple.c:37:14
  JMP_1 %bb.2, debug-location !90; c/simple.c:37:9

bb.2 (%ir-block.13, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r12, $r15
  $edi = MOV32ri 9, debug-location !90; c/simple.c:37:9
  $esi = MOV32ri 2, debug-location !90; c/simple.c:37:9
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !90; c/simple.c:37:9
  MOV64mr $rbp, 1, $noreg, -56, $noreg, killed renamable $rbx, debug-location !90 :: (store (s64) into %ir.7); c/simple.c:37:9
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg, debug-location !92 :: (load (s64) from %ir.7); c/simple.c:38:27
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !93; c/simple.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !93; c/simple.c:38:3
  JMP_1 %bb.3, debug-location !94; c/simple.c:39:14



# Opt mt:
   0x000000000020306d <+109>:	mov    rdi,QWORD PTR [rbp-0x30]

 CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !40; c/simple.c:37:14
  JMP_1 %bb.2, debug-location !39; c/simple.c:37:9

bb.2 (%ir-block.14, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rax, $r12, $r15
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rax, debug-location !39 :: (store (s64) into %ir.8); c/simple.c:37:9
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !41 :: (load (s64) from %ir.8); c/simple.c:38:27
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !42; c/simple.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !42; c/simple.c:38:3
  JMP_1 %bb.3, debug-location !43; c/simple.c:39:14




















# Drafts
# With dummy calls

>>> info locals
mt = 0x207660
loc = {
  state = 1
}
res = 9998
i = 4
>>> 

NOTE: the frame of desticiton and source ARE THE SAME!

src_rbp: 0x7fffffffe1f0, reg_store: 0x7fffffffe140, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
Register2Register - src: Register(12, 8, []) dst: Register(12, 8, [])

after jump:
>>> info locals
mt = 0x207660
loc = {
  state = 2135522
}
res = 9998
i = 4

------------------------------------------------------------------------------
# Without dummy calls

0x7fffffffe190:	0x00007fffffffe2f8	0x00007fffffffe1e0
0x7fffffffe1a0:	0x0000000000000000	0x000000000020359f
0x7fffffffe1b0:	0x0000000000000000	0x0000000000000000
0x7fffffffe1c0:	0x00007fffffffe2f8	0x0000000000000000
0x7fffffffe1d0:	0x0000000000204b20	0x00007ffff7ffd020

>>> p&mt
$7 = (YkMT **) 0x7fffffffe1c0
>>> x/gx 0x7fffffffe1c0
0x7fffffffe1c0:	0x0000000000206660


>>> p &mt
$1 = (YkMT **) 0x7fffffffe1c0
>>> p &loc
$2 = (YkLocation *) 0x7fffffffe1c8
>>> p &res
$3 = (int *) 0x7ffff6f0a020
>>> p &i
$4 = (int *) 0x7ffff6f0a024

─ Registers ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
     rax 0x0000000000000001     rbx 0x00007fffffffe308        rcx 0x0000000000000000     rdx 0x0000000000000000     rsi 0x00007fffffffe1c8
     rdi 0x0000000000206660     rbp 0x00007fffffffe1f0        rsp 0x00007fffffffe1c0      r8 0x00007ffff71f1cc0      r9 0x00000000000001b0
     r10 0x00007ffff7201f58     r11 0x0000000000203410        r12 0x00007ffff6f0a024     r13 0x00007fffffffe318     r14 0x0000000000000001
     r15 0x00007ffff6f0a020     rip 0x00000000002030c9     eflags [ PF ZF IF ]            cs 0x00000033              ss 0x0000002b        
      ds 0x00000000              es 0x00000000                 fs 0x00000000              gs 0x00000000              k0 0x00000000c0c0e000
      k1 0x000000000000001f      k2 0x00000000ff7fff7f         k3 0x0000000000000000      k4 0x0000000000000000      k5 0x0000000000000000
      k6 0x0000000000000000      k7 0x0000000000000000


mt = 0x206660
loc = {
  state = 1
}
res = 9998
i = 4

NOTE: the frame of desticiton and source ARE DIFFERENT IN SIZE!

src_rbp: 0x7fffffffe1e0, reg_store: 0x7fffffffe140, src_frame_size: 0x30, dst_frame_size: 0x40, rbp_offset_reg_store: 0xa0
Register2Register - src: Register(15, 8, []) dst: Register(15, 8, [])
Register2Register - src: Register(12, 8, []) dst: Register(12, 8, [])

// return ASM

>>> p $rsp
$1 = (void *) 0x7fffffffe1a0
>>> p $rbp
$2 = (void *) 0x7fffffffe1e0
>>> p $rbp - $rsp
$3 = 64

 0x00007ffff7fba077> ? sub    rsp,0x10
 0x00007ffff7fba07b  ? mov    QWORD PTR [rsp],rax
 0x00007ffff7fba07f  ? movabs rax,0x2038c4

>>> x/gx $rsp+0x8
0x7fffffffe198:	0x0000000000000000

 0x00007ffff7fba089  ? mov    QWORD PTR [rsp+0x8],rax

>>> x/gx $rsp+0x8
0x7fffffffe198:	0x00000000002038c4

 0x00007ffff7fba08e  ? pop    rax
 0x00007ffff7fba08f  ? ret

>>> info locals
// why mt is set to 0x20366f
mt = 0x20366f <main+239>
loc = {
  state = 2123360
}
res = 9998
i = 4

>>> p &mt
$4 = (YkMT **) 0x7fffffffe1a8
>>> p $rbp - 0x7fffffffe1a8
$5 = (void *) 0x38
>>> p 0x38
$6 = 56

>>> x/10gx $rbp
0x7fffffffe1e0:	0x0000000000000001	0x00007ffff704624a
0x7fffffffe1f0:	0x0000000000000000	0x0000000000203580
0x7fffffffe200:	0x0000000100000000	0x00007fffffffe2f8
0x7fffffffe210:	0x00007fffffffe2f8	0x49265ccd9a21ca2f
0x7fffffffe220:	0x0000000000000000	0x00007fffffffe308

>>> x/-10gx $rbp
0x7fffffffe190:	0x0000000000000031	0x00000000002038c4
0x7fffffffe1a0:	0x0000000000000031	0x000000000020366f
0x7fffffffe1b0:	0x0000000000206660	0x00000000002085e2
0x7fffffffe1c0:	0x00007fffffffe2f8	0x0000000000000000
0x7fffffffe1d0:	0x0000000000204b20	0x00007ffff7ffd020

>>> x/gx &loc
0x7fffffffe1b0:	0x0000000000206660
>>> x/gx &mt
0x7fffffffe1a8:	0x000000000020366f
