running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 14 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/lib.rs (target/debug/deps/tests-85b48ad7f40a41cd)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/bin/dump_ir.rs (target/debug/deps/dump_ir-5a75d08e22383257)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m unittests src/bin/gdb_c_test.rs (target/debug/deps/gdb_c_test-7bae41caa2faa194)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[1m[32m     Running[0m langtest_c.rs (target/debug/deps/c_tests-311eca720dce6708)
Running C tests...

running 1 tests********** Machine Code when processing stackmap **********
Function: g
# Machine code for function g: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi

bb.0 (%ir-block.1, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  $r14 = MOV64rr $rdi
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !25; c/yk_outline_dynamic_with_promote.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !25; c/yk_outline_dynamic_with_promote.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !25; c/yk_outline_dynamic_with_promote.c:0
  JMP_1 %bb.1, debug-location !25; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.2, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !26; c/yk_outline_dynamic_with_promote.c:32:10
  $esi = MOV32ri 1, debug-location !26; c/yk_outline_dynamic_with_promote.c:32:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !26; c/yk_outline_dynamic_with_promote.c:32:10
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !25; c/yk_outline_dynamic_with_promote.c:0 line no:31
  $rdi = MOV64rr $r14, debug-location !26; c/yk_outline_dynamic_with_promote.c:32:10
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !26; c/yk_outline_dynamic_with_promote.c:32:10
  STACKMAP 2, 0, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !27; c/yk_outline_dynamic_with_promote.c:32:24
  $rbx = MOV64rr $rax, debug-location !26; c/yk_outline_dynamic_with_promote.c:32:10
  JMP_1 %bb.2, debug-location !27; c/yk_outline_dynamic_with_promote.c:32:24

bb.2 (%ir-block.4, bb_id 2):
; predecessors: %bb.1
  successors: %bb.4
  liveins: $rbx
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !25; c/yk_outline_dynamic_with_promote.c:0 line no:31
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !27; c/yk_outline_dynamic_with_promote.c:32:24
  $esi = MOV32ri 2, debug-location !27; c/yk_outline_dynamic_with_promote.c:32:24
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !27; c/yk_outline_dynamic_with_promote.c:32:24
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 1, implicit-def dead $eflags, debug-location !27; c/yk_outline_dynamic_with_promote.c:32:24
  JMP_1 %bb.4, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3

bb.3 (%ir-block.6, bb_id 3):
; predecessors: %bb.4
  liveins: $rbx
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !25; c/yk_outline_dynamic_with_promote.c:0 line no:31
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  $esi = MOV32ri 3, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  $rax = MOV64rr killed $rbx, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  RET64 implicit $rax, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3

bb.4 (%ir-block.7, bb_id 4):
; predecessors: %bb.2
  successors: %bb.3
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !25; c/yk_outline_dynamic_with_promote.c:0 line no:31
  $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  $esi = MOV32ri 4, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3
  JMP_1 %bb.3, debug-location !28; c/yk_outline_dynamic_with_promote.c:32:3

# End machine code for function g.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: f
# Machine code for function f: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi

bb.0 (%ir-block.1, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $r15, $r14, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -48
  CFI_INSTRUCTION offset $r12, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rdi
  $edi = MOV32ri 3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r15 = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $r15
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !36; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.5, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r15
  $edi = MOV32ri 3, debug-location !37; c/yk_outline_dynamic_with_promote.c:38:3
  $esi = MOV32ri 1, debug-location !37; c/yk_outline_dynamic_with_promote.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !37; c/yk_outline_dynamic_with_promote.c:38:3
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:36
  JMP_1 %bb.2, debug-location !36; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.6, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r15
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 3, debug-location !38; c/yk_outline_dynamic_with_promote.c:38:15
  $esi = MOV32ri 2, debug-location !38; c/yk_outline_dynamic_with_promote.c:38:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !38; c/yk_outline_dynamic_with_promote.c:38:15
  renamable $rax = MOV64ri @g, debug-location !38; c/yk_outline_dynamic_with_promote.c:38:15
  MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !38 :: (store (s64) into %ir.4, !tbaa !39); c/yk_outline_dynamic_with_promote.c:38:15
  DBG_VALUE $r15, $noreg, !"fptr", !DIExpression(DW_OP_deref), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:38
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !44, debug-location !43; c/yk_outline_dynamic_with_promote.c:39:3
  JMP_1 %bb.3, debug-location !45; c/yk_outline_dynamic_with_promote.c:40:10

bb.3 (%ir-block.7, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r15
  DBG_VALUE $r15, $noreg, !"fptr", !DIExpression(DW_OP_deref), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 3, debug-location !45; c/yk_outline_dynamic_with_promote.c:40:10
  $esi = MOV32ri 3, debug-location !45; c/yk_outline_dynamic_with_promote.c:40:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !45; c/yk_outline_dynamic_with_promote.c:40:10
  renamable $r12 = MOV64rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !45 :: (load (s64) from %ir.4, !tbaa !39); c/yk_outline_dynamic_with_promote.c:40:10
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:38
  $rdi = MOV64rr $rbx, debug-location !45; c/yk_outline_dynamic_with_promote.c:40:10
  CALL64r renamable $r12, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !45; c/yk_outline_dynamic_with_promote.c:40:10
  STACKMAP 5, 0, killed renamable $rbx, 3, renamable $r15, 3, renamable $r15, 3, killed renamable $r12, 3, implicit-def dead early-clobber $r11, debug-location !46; c/yk_outline_dynamic_with_promote.c:41:1
  $r14 = MOV64rr $rax, debug-location !45; c/yk_outline_dynamic_with_promote.c:40:10
  JMP_1 %bb.4, debug-location !46; c/yk_outline_dynamic_with_promote.c:41:1

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 3, debug-location !46; c/yk_outline_dynamic_with_promote.c:41:1
  $esi = MOV32ri 4, debug-location !46; c/yk_outline_dynamic_with_promote.c:41:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !46; c/yk_outline_dynamic_with_promote.c:41:1
  JMP_1 %bb.5, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3

bb.5 (%ir-block.11, bb_id 5):
; predecessors: %bb.4
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 3, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  $esi = MOV32ri 5, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  JMP_1 %bb.7, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3

bb.6 (%ir-block.12, bb_id 6):
; predecessors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 3, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  $esi = MOV32ri 6, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !47 :: (load (s64) from got); c/yk_outline_dynamic_with_promote.c:40:3
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $r15, debug-location !47 :: (store (s64) into @shadowstack_0); c/yk_outline_dynamic_with_promote.c:40:3
  $rax = MOV64rr killed $r14, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  RET64 implicit $rax, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3

bb.7 (%ir-block.13, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $r14, $r15
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !36; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 3, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  $esi = MOV32ri 7, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3
  JMP_1 %bb.6, debug-location !47; c/yk_outline_dynamic_with_promote.c:40:3

# End machine code for function f.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 6
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 6, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  $esi = MOV32ri 1, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:43
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:43
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  $rbx = MOV64rr $rax, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  JMP_1 %bb.2, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14
  $edi = MOV32ri 6, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = MOV32ri 2, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $rdi = MOV64rr $rbx, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  JMP_1 %bb.3, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  $esi = MOV32ri 3, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  JMP_1 %bb.4, debug-location !73; c/yk_outline_dynamic_with_promote.c:46:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 4, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $r15 = MOV64rr $rax, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.5, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 5, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r15, debug-location !74 :: (store (s64) into %ir.5); c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.6, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  $esi = MOV32ri 6, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !76 :: (store (s64) into %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:48:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !80, debug-location !79; c/yk_outline_dynamic_with_promote.c:49:3
  JMP_1 %bb.7, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r14
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  $esi = MOV32ri 7, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !82, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  JMP_1 %bb.8, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.15, %bb.9
  liveins: $rbx, $r14
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  $esi = MOV32ri 8, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !83 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:51:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.15, 5, implicit killed $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.9, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  $esi = MOV32ri 9, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.10, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.20
  successors: %bb.11
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  $esi = MOV32ri 10, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  $rdi = MOV64rr $rbx, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !86 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:52:5
  JMP_1 %bb.11, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  $esi = MOV32ri 11, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !88 :: (load (s64) from @stderr, !tbaa !39); c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:53:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  $edi = MOV32ri 1, implicit-def $rdi, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $r13 = MOV64rr $rax, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  JMP_1 %bb.12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5

bb.12 (%ir-block.25, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $esi = MOV32ri 12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  renamable $rsi = MOV64ri @.str, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rdi = MOV64rr killed $r12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rdx = MOV64rr killed $r15, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rcx = MOV64rr killed $r13, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $al = MOV8ri 0, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  JMP_1 %bb.13, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14, %bb.20
  liveins: $rbx, $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  $esi = MOV32ri 13, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !92 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !92 :: (store (s64) into %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.14, 5, implicit killed $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.20, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.14 (%ir-block.31, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 14, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.15, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.8, %bb.14
  successors: %bb.16
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 15, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !96 :: (load (s64) from %ir.5); c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.16, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3

bb.16 (%ir-block.34, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  $esi = MOV32ri 16, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  $rdi = MOV64rr killed $rbx, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  JMP_1 %bb.17, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1

bb.17 (%ir-block.35, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 17, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.18, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1

bb.18 (%ir-block.36, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 18, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.19, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.19 (%ir-block.37, bb_id 19):
; predecessors: %bb.18
  successors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 19, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.22, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.20 (%ir-block.38, bb_id 20):
; predecessors: %bb.13
  successors: %bb.10
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6
  $esi = MOV32ri 20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.21 (%ir-block.39, bb_id 21):
; predecessors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 21, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  RET64 implicit $eax, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.22 (%ir-block.40, bb_id 22):
; predecessors: %bb.19
  successors: %bb.21

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 22, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.21, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 6
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 6, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  $esi = MOV32ri 1, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:43
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:43
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  $rbx = MOV64rr $rax, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  JMP_1 %bb.2, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14
  $edi = MOV32ri 6, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = MOV32ri 2, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $rdi = MOV64rr $rbx, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  JMP_1 %bb.3, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  $esi = MOV32ri 3, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  JMP_1 %bb.4, debug-location !73; c/yk_outline_dynamic_with_promote.c:46:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 4, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $r15 = MOV64rr $rax, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.5, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 5, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r15, debug-location !74 :: (store (s64) into %ir.5); c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.6, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  $esi = MOV32ri 6, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !76 :: (store (s64) into %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:48:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !80, debug-location !79; c/yk_outline_dynamic_with_promote.c:49:3
  JMP_1 %bb.7, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r14
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  $esi = MOV32ri 7, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !82, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  JMP_1 %bb.8, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.15, %bb.9
  liveins: $rbx, $r14
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  $esi = MOV32ri 8, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !83 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:51:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.15, 5, implicit killed $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.9, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  $esi = MOV32ri 9, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.10, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.20
  successors: %bb.11
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  $esi = MOV32ri 10, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  $rdi = MOV64rr $rbx, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !86 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:52:5
  JMP_1 %bb.11, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  $esi = MOV32ri 11, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !88 :: (load (s64) from @stderr, !tbaa !39); c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:53:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  $edi = MOV32ri 1, implicit-def $rdi, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $r13 = MOV64rr $rax, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  JMP_1 %bb.12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5

bb.12 (%ir-block.25, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $esi = MOV32ri 12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  renamable $rsi = MOV64ri @.str, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rdi = MOV64rr killed $r12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rdx = MOV64rr killed $r15, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rcx = MOV64rr killed $r13, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $al = MOV8ri 0, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  JMP_1 %bb.13, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14, %bb.20
  liveins: $rbx, $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  $esi = MOV32ri 13, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !92 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !92 :: (store (s64) into %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.14, 5, implicit killed $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.20, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.14 (%ir-block.31, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 14, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.15, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.8, %bb.14
  successors: %bb.16
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 15, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !96 :: (load (s64) from %ir.5); c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.16, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3

bb.16 (%ir-block.34, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  $esi = MOV32ri 16, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  $rdi = MOV64rr killed $rbx, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  JMP_1 %bb.17, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1

bb.17 (%ir-block.35, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 17, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.18, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1

bb.18 (%ir-block.36, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 18, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.19, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.19 (%ir-block.37, bb_id 19):
; predecessors: %bb.18
  successors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 19, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.22, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.20 (%ir-block.38, bb_id 20):
; predecessors: %bb.13
  successors: %bb.10
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6
  $esi = MOV32ri 20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.21 (%ir-block.39, bb_id 21):
; predecessors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 21, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  RET64 implicit $eax, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.22 (%ir-block.40, bb_id 22):
; predecessors: %bb.19
  successors: %bb.21

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 22, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.21, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 6
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 6, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  $esi = MOV32ri 1, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:43
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:43
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  $rbx = MOV64rr $rax, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  JMP_1 %bb.2, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14
  $edi = MOV32ri 6, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = MOV32ri 2, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $rdi = MOV64rr $rbx, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  JMP_1 %bb.3, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  $esi = MOV32ri 3, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  JMP_1 %bb.4, debug-location !73; c/yk_outline_dynamic_with_promote.c:46:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 4, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $r15 = MOV64rr $rax, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.5, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 5, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r15, debug-location !74 :: (store (s64) into %ir.5); c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.6, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  $esi = MOV32ri 6, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !76 :: (store (s64) into %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:48:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !80, debug-location !79; c/yk_outline_dynamic_with_promote.c:49:3
  JMP_1 %bb.7, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r14
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  $esi = MOV32ri 7, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !82, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  JMP_1 %bb.8, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.15, %bb.9
  liveins: $rbx, $r14
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  $esi = MOV32ri 8, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !83 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:51:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.15, 5, implicit killed $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.9, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  $esi = MOV32ri 9, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.10, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.20
  successors: %bb.11
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  $esi = MOV32ri 10, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  $rdi = MOV64rr $rbx, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !86 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:52:5
  JMP_1 %bb.11, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  $esi = MOV32ri 11, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !88 :: (load (s64) from @stderr, !tbaa !39); c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:53:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  $edi = MOV32ri 1, implicit-def $rdi, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $r13 = MOV64rr $rax, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  JMP_1 %bb.12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5

bb.12 (%ir-block.25, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $esi = MOV32ri 12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  renamable $rsi = MOV64ri @.str, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rdi = MOV64rr killed $r12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rdx = MOV64rr killed $r15, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rcx = MOV64rr killed $r13, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $al = MOV8ri 0, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  JMP_1 %bb.13, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14, %bb.20
  liveins: $rbx, $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  $esi = MOV32ri 13, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !92 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !92 :: (store (s64) into %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.14, 5, implicit killed $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.20, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.14 (%ir-block.31, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 14, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.15, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.8, %bb.14
  successors: %bb.16
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 15, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !96 :: (load (s64) from %ir.5); c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.16, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3

bb.16 (%ir-block.34, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  $esi = MOV32ri 16, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  $rdi = MOV64rr killed $rbx, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  JMP_1 %bb.17, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1

bb.17 (%ir-block.35, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 17, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.18, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1

bb.18 (%ir-block.36, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 18, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.19, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.19 (%ir-block.37, bb_id 19):
; predecessors: %bb.18
  successors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 19, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.22, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.20 (%ir-block.38, bb_id 20):
; predecessors: %bb.13
  successors: %bb.10
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6
  $esi = MOV32ri 20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.21 (%ir-block.39, bb_id 21):
; predecessors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 21, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  RET64 implicit $eax, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.22 (%ir-block.40, bb_id 22):
; predecessors: %bb.19
  successors: %bb.21

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 22, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.21, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 6
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 16, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 6, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  $esi = MOV32ri 1, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:43
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:43
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  $rbx = MOV64rr $rax, debug-location !70; c/yk_outline_dynamic_with_promote.c:44:14
  JMP_1 %bb.2, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14
  $edi = MOV32ri 6, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = MOV32ri 2, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $rdi = MOV64rr $rbx, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !71; c/yk_outline_dynamic_with_promote.c:45:3
  JMP_1 %bb.3, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  $esi = MOV32ri 3, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !72; c/yk_outline_dynamic_with_promote.c:46:3
  JMP_1 %bb.4, debug-location !73; c/yk_outline_dynamic_with_promote.c:46:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 4, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $r15 = MOV64rr $rax, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.5, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 5, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !74; c/yk_outline_dynamic_with_promote.c:46:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r15, debug-location !74 :: (store (s64) into %ir.5); c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.6, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  $esi = MOV32ri 6, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !76; c/yk_outline_dynamic_with_promote.c:48:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !76 :: (store (s64) into %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:48:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !80, debug-location !79; c/yk_outline_dynamic_with_promote.c:49:3
  JMP_1 %bb.7, debug-location !69; c/yk_outline_dynamic_with_promote.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r14
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  $esi = MOV32ri 7, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !82, debug-location !81; c/yk_outline_dynamic_with_promote.c:50:3
  JMP_1 %bb.8, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.15, %bb.9
  liveins: $rbx, $r14
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  $esi = MOV32ri 8, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !83; c/yk_outline_dynamic_with_promote.c:51:10
  STACKMAP 4, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !83 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:51:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.15, 5, implicit killed $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.9, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  $esi = MOV32ri 9, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.10, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.20
  successors: %bb.11
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  $esi = MOV32ri 10, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  $rdi = MOV64rr $rbx, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !86; c/yk_outline_dynamic_with_promote.c:52:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r14, $r14b, $r14bh, $r14d, $r14w, $r14wh), implicit-def dead early-clobber $r11, debug-location !86 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:52:5
  JMP_1 %bb.11, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  $esi = MOV32ri 11, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !88 :: (load (s64) from @stderr, !tbaa !39); c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !89 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:53:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  $edi = MOV32ri 1, implicit-def $rdi, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  CALL64pcrel32 @f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $r13 = MOV64rr $rax, debug-location !90; c/yk_outline_dynamic_with_promote.c:53:56
  JMP_1 %bb.12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5

bb.12 (%ir-block.25, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $esi = MOV32ri 12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  renamable $rsi = MOV64ri @.str, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rdi = MOV64rr killed $r12, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rdx = MOV64rr killed $r15, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $rcx = MOV64rr killed $r13, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  $al = MOV8ri 0, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !91; c/yk_outline_dynamic_with_promote.c:53:5
  JMP_1 %bb.13, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14, %bb.20
  liveins: $rbx, $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  $esi = MOV32ri 13, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !92 :: (load (s64) from %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !92; c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !92 :: (store (s64) into %ir.6, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !84; c/yk_outline_dynamic_with_promote.c:51:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.14, 5, implicit killed $eflags, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.20, debug-location !85; c/yk_outline_dynamic_with_promote.c:51:3

bb.14 (%ir-block.31, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 14, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.15, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.8, %bb.14
  successors: %bb.16
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 15, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !96 :: (load (s64) from %ir.5); c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !96; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.16, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3

bb.16 (%ir-block.34, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  $esi = MOV32ri 16, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  $rdi = MOV64rr killed $rbx, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !97; c/yk_outline_dynamic_with_promote.c:57:3
  JMP_1 %bb.17, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1

bb.17 (%ir-block.35, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 17, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.18, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1

bb.18 (%ir-block.36, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 18, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !98; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.19, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.19 (%ir-block.37, bb_id 19):
; predecessors: %bb.18
  successors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 19, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.22, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.20 (%ir-block.38, bb_id 20):
; predecessors: %bb.13
  successors: %bb.10
  liveins: $rbx, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6
  $esi = MOV32ri 20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.21 (%ir-block.39, bb_id 21):
; predecessors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 21, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  RET64 implicit $eax, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

bb.22 (%ir-block.40, bb_id 22):
; predecessors: %bb.19
  successors: %bb.21

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !69; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 6, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 22, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.21, debug-location !99; c/yk_outline_dynamic_with_promote.c:58:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_f
# Machine code for function __yk_unopt_f: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi

bb.0 (%ir-block.1, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $r15, $r14, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -48
  CFI_INSTRUCTION offset $r12, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rdi
  $edi = MOV32ri 15
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r15 = MOV64rm renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  $rcx = MOV64rr $r15
  renamable $rcx = ADD64ri32 killed renamable $rcx(tied-def 0), 16, implicit-def dead $eflags
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $rcx :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !193; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.5, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r15
  $edi = MOV32ri 15, debug-location !194; c/yk_outline_dynamic_with_promote.c:38:3
  $esi = MOV32ri 1, debug-location !194; c/yk_outline_dynamic_with_promote.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !194; c/yk_outline_dynamic_with_promote.c:38:3
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:36
  JMP_1 %bb.2, debug-location !193; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.6, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r15
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 15, debug-location !195; c/yk_outline_dynamic_with_promote.c:38:15
  $esi = MOV32ri 2, debug-location !195; c/yk_outline_dynamic_with_promote.c:38:15
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !195; c/yk_outline_dynamic_with_promote.c:38:15
  renamable $rax = MOV64ri @g, debug-location !195; c/yk_outline_dynamic_with_promote.c:38:15
  MOV64mr renamable $r15, 1, $noreg, 0, $noreg, killed renamable $rax, debug-location !195 :: (store (s64) into %ir.4, !tbaa !39); c/yk_outline_dynamic_with_promote.c:38:15
  DBG_VALUE $r15, $noreg, !"fptr", !DIExpression(DW_OP_deref), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:38
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r15, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !44, debug-location !196; c/yk_outline_dynamic_with_promote.c:39:3
  JMP_1 %bb.3, debug-location !197; c/yk_outline_dynamic_with_promote.c:40:10

bb.3 (%ir-block.7, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r15
  DBG_VALUE $r15, $noreg, !"fptr", !DIExpression(DW_OP_deref), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 15, debug-location !197; c/yk_outline_dynamic_with_promote.c:40:10
  $esi = MOV32ri 3, debug-location !197; c/yk_outline_dynamic_with_promote.c:40:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !197; c/yk_outline_dynamic_with_promote.c:40:10
  renamable $r12 = MOV64rm renamable $r15, 1, $noreg, 0, $noreg, debug-location !197 :: (load (s64) from %ir.4, !tbaa !39); c/yk_outline_dynamic_with_promote.c:40:10
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:38
  $rdi = MOV64rr $rbx, debug-location !197; c/yk_outline_dynamic_with_promote.c:40:10
  CALL64r renamable $r12, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !197; c/yk_outline_dynamic_with_promote.c:40:10
  STACKMAP 10, 0, killed renamable $rbx, 3, renamable $r15, 3, renamable $r15, 3, killed renamable $r12, 3, implicit-def dead early-clobber $r11, debug-location !198; c/yk_outline_dynamic_with_promote.c:41:1
  $r14 = MOV64rr $rax, debug-location !197; c/yk_outline_dynamic_with_promote.c:40:10
  JMP_1 %bb.4, debug-location !198; c/yk_outline_dynamic_with_promote.c:41:1

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 15, debug-location !198; c/yk_outline_dynamic_with_promote.c:41:1
  $esi = MOV32ri 4, debug-location !198; c/yk_outline_dynamic_with_promote.c:41:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !198; c/yk_outline_dynamic_with_promote.c:41:1
  JMP_1 %bb.5, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3

bb.5 (%ir-block.11, bb_id 5):
; predecessors: %bb.4
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 15, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  $esi = MOV32ri 5, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  JMP_1 %bb.7, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3

bb.6 (%ir-block.12, bb_id 6):
; predecessors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 15, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  $esi = MOV32ri 6, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg, debug-location !199 :: (load (s64) from got); c/yk_outline_dynamic_with_promote.c:40:3
  MOV64mr killed renamable $rax, 1, $noreg, 0, $fs, killed renamable $r15, debug-location !199 :: (store (s64) into @shadowstack_0); c/yk_outline_dynamic_with_promote.c:40:3
  $rax = MOV64rr killed $r14, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  RET64 implicit $rax, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3

bb.7 (%ir-block.13, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $r14, $r15
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  DBG_VALUE $r12, $noreg, !"fptr", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:38
  DBG_VALUE $rbx, $noreg, !"x", !DIExpression(), debug-location !193; c/yk_outline_dynamic_with_promote.c:0 line no:36
  $edi = MOV32ri 15, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  $esi = MOV32ri 7, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $esi, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3
  JMP_1 %bb.6, debug-location !199; c/yk_outline_dynamic_with_promote.c:40:3

# End machine code for function __yk_unopt_f.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 16
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r13 = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r13
  $edi = MOV32ri 16, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  $esi = MOV32ri 1, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:43
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:43
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  $rbx = MOV64rr $rax, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  JMP_1 %bb.2, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 16, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = MOV32ri 2, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $rdi = MOV64rr $rbx, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  JMP_1 %bb.3, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  $esi = MOV32ri 3, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  JMP_1 %bb.4, debug-location !211; c/yk_outline_dynamic_with_promote.c:46:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 4, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $r14 = MOV64rr $rax, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.5, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 5, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !212 :: (store (s64) into %ir.4); c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.6, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  $esi = MOV32ri 6, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mi32 renamable $r13, 1, $noreg, 0, $noreg, 4, debug-location !214 :: (store (s64) into %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:48:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !80, debug-location !215; c/yk_outline_dynamic_with_promote.c:49:3
  JMP_1 %bb.7, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  $esi = MOV32ri 7, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  DBG_VALUE $r13, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !82, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  JMP_1 %bb.8, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.15, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  $esi = MOV32ri 8, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !217 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:51:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:51:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.15, 5, implicit killed $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.9, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  $esi = MOV32ri 9, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.10, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.20
  successors: %bb.11
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $esi = MOV32ri 10, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $rdi = MOV64rr $rbx, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !220 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:52:5
  JMP_1 %bb.11, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  $esi = MOV32ri 11, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r15 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !222 :: (load (s64) from @stderr, !tbaa !39); c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r14 = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !223 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:53:53
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  $edi = MOV32ri 1, implicit-def $rdi, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $r12 = MOV64rr $rax, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  JMP_1 %bb.12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $esi = MOV32ri 12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  renamable $rsi = MOV64ri @.str, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rdi = MOV64rr killed $r15, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rdx = MOV64rr killed $r14, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rcx = MOV64rr killed $r12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $al = MOV8ri 0, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit killed $rcx, implicit-def $eax, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  JMP_1 %bb.13, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6

bb.13 (%ir-block.26, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14, %bb.20
  liveins: $rbx, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  $esi = MOV32ri 13, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !226 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, renamable $rax, debug-location !226 :: (store (s64) into %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:51:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.14, 5, implicit killed $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.20, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 14, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.15, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.8, %bb.14
  successors: %bb.16
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 15, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !229 :: (load (s64) from %ir.4); c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3

bb.16 (%ir-block.33, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  $esi = MOV32ri 16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  $rdi = MOV64rr killed $rbx, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  JMP_1 %bb.17, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1

bb.17 (%ir-block.34, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 17, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.18, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1

bb.18 (%ir-block.35, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 18, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.19, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.19 (%ir-block.36, bb_id 19):
; predecessors: %bb.18
  successors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 19, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.22, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.20 (%ir-block.37, bb_id 20):
; predecessors: %bb.13
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16
  $esi = MOV32ri 20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.21 (%ir-block.38, bb_id 21):
; predecessors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 21, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  RET64 implicit $eax, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.22 (%ir-block.39, bb_id 22):
; predecessors: %bb.19
  successors: %bb.21

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 22, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.21, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 16
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r13 = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r13
  $edi = MOV32ri 16, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  $esi = MOV32ri 1, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:43
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:43
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  $rbx = MOV64rr $rax, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  JMP_1 %bb.2, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 16, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = MOV32ri 2, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $rdi = MOV64rr $rbx, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  JMP_1 %bb.3, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  $esi = MOV32ri 3, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  JMP_1 %bb.4, debug-location !211; c/yk_outline_dynamic_with_promote.c:46:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 4, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $r14 = MOV64rr $rax, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.5, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 5, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !212 :: (store (s64) into %ir.4); c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.6, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  $esi = MOV32ri 6, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mi32 renamable $r13, 1, $noreg, 0, $noreg, 4, debug-location !214 :: (store (s64) into %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:48:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !80, debug-location !215; c/yk_outline_dynamic_with_promote.c:49:3
  JMP_1 %bb.7, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  $esi = MOV32ri 7, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  DBG_VALUE $r13, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !82, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  JMP_1 %bb.8, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.15, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  $esi = MOV32ri 8, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !217 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:51:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:51:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.15, 5, implicit killed $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.9, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  $esi = MOV32ri 9, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.10, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.20
  successors: %bb.11
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $esi = MOV32ri 10, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $rdi = MOV64rr $rbx, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !220 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:52:5
  JMP_1 %bb.11, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  $esi = MOV32ri 11, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r15 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !222 :: (load (s64) from @stderr, !tbaa !39); c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r14 = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !223 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:53:53
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  $edi = MOV32ri 1, implicit-def $rdi, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $r12 = MOV64rr $rax, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  JMP_1 %bb.12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $esi = MOV32ri 12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  renamable $rsi = MOV64ri @.str, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rdi = MOV64rr killed $r15, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rdx = MOV64rr killed $r14, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rcx = MOV64rr killed $r12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $al = MOV8ri 0, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit killed $rcx, implicit-def $eax, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  JMP_1 %bb.13, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6

bb.13 (%ir-block.26, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14, %bb.20
  liveins: $rbx, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  $esi = MOV32ri 13, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !226 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, renamable $rax, debug-location !226 :: (store (s64) into %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:51:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.14, 5, implicit killed $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.20, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 14, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.15, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.8, %bb.14
  successors: %bb.16
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 15, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !229 :: (load (s64) from %ir.4); c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3

bb.16 (%ir-block.33, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  $esi = MOV32ri 16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  $rdi = MOV64rr killed $rbx, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  JMP_1 %bb.17, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1

bb.17 (%ir-block.34, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 17, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.18, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1

bb.18 (%ir-block.35, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 18, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.19, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.19 (%ir-block.36, bb_id 19):
; predecessors: %bb.18
  successors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 19, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.22, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.20 (%ir-block.37, bb_id 20):
; predecessors: %bb.13
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16
  $esi = MOV32ri 20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.21 (%ir-block.38, bb_id 21):
; predecessors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 21, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  RET64 implicit $eax, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.22 (%ir-block.39, bb_id 22):
; predecessors: %bb.19
  successors: %bb.21

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 22, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.21, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 16
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r13 = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r13
  $edi = MOV32ri 16, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  $esi = MOV32ri 1, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:43
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:43
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  $rbx = MOV64rr $rax, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  JMP_1 %bb.2, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 16, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = MOV32ri 2, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $rdi = MOV64rr $rbx, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  JMP_1 %bb.3, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  $esi = MOV32ri 3, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  JMP_1 %bb.4, debug-location !211; c/yk_outline_dynamic_with_promote.c:46:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 4, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $r14 = MOV64rr $rax, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.5, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 5, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !212 :: (store (s64) into %ir.4); c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.6, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  $esi = MOV32ri 6, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mi32 renamable $r13, 1, $noreg, 0, $noreg, 4, debug-location !214 :: (store (s64) into %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:48:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !80, debug-location !215; c/yk_outline_dynamic_with_promote.c:49:3
  JMP_1 %bb.7, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  $esi = MOV32ri 7, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  DBG_VALUE $r13, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !82, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  JMP_1 %bb.8, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.15, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  $esi = MOV32ri 8, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !217 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:51:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:51:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.15, 5, implicit killed $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.9, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  $esi = MOV32ri 9, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.10, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.20
  successors: %bb.11
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $esi = MOV32ri 10, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $rdi = MOV64rr $rbx, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !220 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:52:5
  JMP_1 %bb.11, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  $esi = MOV32ri 11, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r15 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !222 :: (load (s64) from @stderr, !tbaa !39); c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r14 = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !223 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:53:53
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  $edi = MOV32ri 1, implicit-def $rdi, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $r12 = MOV64rr $rax, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  JMP_1 %bb.12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $esi = MOV32ri 12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  renamable $rsi = MOV64ri @.str, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rdi = MOV64rr killed $r15, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rdx = MOV64rr killed $r14, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rcx = MOV64rr killed $r12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $al = MOV8ri 0, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit killed $rcx, implicit-def $eax, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  JMP_1 %bb.13, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6

bb.13 (%ir-block.26, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14, %bb.20
  liveins: $rbx, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  $esi = MOV32ri 13, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !226 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, renamable $rax, debug-location !226 :: (store (s64) into %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:51:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.14, 5, implicit killed $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.20, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 14, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.15, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.8, %bb.14
  successors: %bb.16
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 15, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !229 :: (load (s64) from %ir.4); c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3

bb.16 (%ir-block.33, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  $esi = MOV32ri 16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  $rdi = MOV64rr killed $rbx, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  JMP_1 %bb.17, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1

bb.17 (%ir-block.34, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 17, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.18, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1

bb.18 (%ir-block.35, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 18, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.19, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.19 (%ir-block.36, bb_id 19):
; predecessors: %bb.18
  successors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 19, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.22, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.20 (%ir-block.37, bb_id 20):
; predecessors: %bb.13
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16
  $esi = MOV32ri 20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.21 (%ir-block.38, bb_id 21):
; predecessors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 21, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  RET64 implicit $eax, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.22 (%ir-block.39, bb_id 22):
; predecessors: %bb.19
  successors: %bb.21

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 22, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.21, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 16
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $r13 = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r13
  $edi = MOV32ri 16, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  $esi = MOV32ri 1, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:43
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:43
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  $rbx = MOV64rr $rax, debug-location !208; c/yk_outline_dynamic_with_promote.c:44:14
  JMP_1 %bb.2, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 16, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = MOV32ri 2, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $rdi = MOV64rr $rbx, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !209; c/yk_outline_dynamic_with_promote.c:45:3
  JMP_1 %bb.3, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  $esi = MOV32ri 3, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !210; c/yk_outline_dynamic_with_promote.c:46:3
  JMP_1 %bb.4, debug-location !211; c/yk_outline_dynamic_with_promote.c:46:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 4, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $r14 = MOV64rr $rax, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.5, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  $esi = MOV32ri 5, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !212; c/yk_outline_dynamic_with_promote.c:46:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !212 :: (store (s64) into %ir.4); c/yk_outline_dynamic_with_promote.c:46:20
  JMP_1 %bb.6, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  $esi = MOV32ri 6, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !214; c/yk_outline_dynamic_with_promote.c:48:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mi32 renamable $r13, 1, $noreg, 0, $noreg, 4, debug-location !214 :: (store (s64) into %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:48:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !80, debug-location !215; c/yk_outline_dynamic_with_promote.c:49:3
  JMP_1 %bb.7, debug-location !207; c/yk_outline_dynamic_with_promote.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  $esi = MOV32ri 7, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  DBG_VALUE $r13, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r13, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !82, debug-location !216; c/yk_outline_dynamic_with_promote.c:50:3
  JMP_1 %bb.8, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.15, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  $esi = MOV32ri 8, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !217; c/yk_outline_dynamic_with_promote.c:51:10
  renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !217 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:51:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:51:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.15, 5, implicit killed $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.9, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  $esi = MOV32ri 9, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.10, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.20
  successors: %bb.11
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $esi = MOV32ri 10, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $rdi = MOV64rr $rbx, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !220; c/yk_outline_dynamic_with_promote.c:52:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !220 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:52:5
  JMP_1 %bb.11, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  $esi = MOV32ri 11, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !222; c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r15 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !222 :: (load (s64) from @stderr, !tbaa !39); c/yk_outline_dynamic_with_promote.c:53:13
  renamable $r14 = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !223 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:53:53
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  $edi = MOV32ri 1, implicit-def $rdi, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  CALL64pcrel32 @__yk_unopt_f, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $r15, 3, renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $r12 = MOV64rr $rax, debug-location !224; c/yk_outline_dynamic_with_promote.c:53:56
  JMP_1 %bb.12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13, $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $esi = MOV32ri 12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  renamable $rsi = MOV64ri @.str, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rdi = MOV64rr killed $r15, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rdx = MOV64rr killed $r14, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $rcx = MOV64rr killed $r12, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  $al = MOV8ri 0, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit killed $rcx, implicit-def $eax, debug-location !225; c/yk_outline_dynamic_with_promote.c:53:5
  JMP_1 %bb.13, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6

bb.13 (%ir-block.26, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14, %bb.20
  liveins: $rbx, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  $esi = MOV32ri 13, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  renamable $rax = MOV64rm renamable $r13, 1, $noreg, 0, $noreg, debug-location !226 :: (load (s64) from %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !226; c/yk_outline_dynamic_with_promote.c:54:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:48
  MOV64mr renamable $r13, 1, $noreg, 0, $noreg, renamable $rax, debug-location !226 :: (store (s64) into %ir.5, !tbaa !77); c/yk_outline_dynamic_with_promote.c:54:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !218; c/yk_outline_dynamic_with_promote.c:51:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $r13, 3, renamable $rbx, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !219 :: (load (s64) from %stack.0); c/yk_outline_dynamic_with_promote.c:51:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JCC_1 %bb.14, 5, implicit killed $eflags, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3
  JMP_1 %bb.20, debug-location !219; c/yk_outline_dynamic_with_promote.c:51:3

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 14, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.15, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.8, %bb.14
  successors: %bb.16
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  $esi = MOV32ri 15, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !229 :: (load (s64) from %ir.4); c/yk_outline_dynamic_with_promote.c:56:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !229; c/yk_outline_dynamic_with_promote.c:56:3
  JMP_1 %bb.16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3

bb.16 (%ir-block.33, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $rbx
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  $esi = MOV32ri 16, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  $rdi = MOV64rr killed $rbx, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !230; c/yk_outline_dynamic_with_promote.c:57:3
  JMP_1 %bb.17, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1

bb.17 (%ir-block.34, bb_id 17):
; predecessors: %bb.16
  successors: %bb.18

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 17, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.18, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1

bb.18 (%ir-block.35, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  $esi = MOV32ri 18, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !231; c/yk_outline_dynamic_with_promote.c:59:1
  JMP_1 %bb.19, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.19 (%ir-block.36, bb_id 19):
; predecessors: %bb.18
  successors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 19, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.22, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.20 (%ir-block.37, bb_id 20):
; predecessors: %bb.13
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16
  $esi = MOV32ri 20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.21 (%ir-block.38, bb_id 21):
; predecessors: %bb.22

  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 21, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  RET64 implicit $eax, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

bb.22 (%ir-block.39, bb_id 22):
; predecessors: %bb.19
  successors: %bb.21

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !207; c/yk_outline_dynamic_with_promote.c:0 line no:44
  $edi = MOV32ri 16, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  $esi = MOV32ri 22, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3
  JMP_1 %bb.21, debug-location !232; c/yk_outline_dynamic_with_promote.c:58:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
yk-jit-event: start-tracing
Transition: OptToUnopt
src_rbp: 0x7ffd655970b0, reg_store: 0x7ffd65597010, src_frame_size: 0x30, dst_frame_size: 0x30, rbp_offset_reg_store: 0xa0
Register2Register - src: Register(14, 8, []) dst: Register(13, 8, [])
Register2Register - src: Register(3, 8, []) dst: Register(3, 8, [])
register:14, value: 0x7feba872a010
register:15, value: 0x1
register:13, value: 0x7ffd655971d8
register:3, value: 0x1df2d680
4: 2
yk-jit-event: stop-tracing
--- Begin aot ---
# IR format version: 0
# Num funcs: 23
# Num consts: 30
# Num global decls: 3
# Num types: 23
global_decl tls @shadowstack_0
global_decl @stderr
global_decl @.str

func g(%arg0: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    call __yk_trace_basicblock_dummy(0i32, 0i32)
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:32: return yk_promote(x) + 1;
    call __yk_trace_basicblock_dummy(0i32, 1i32)
    %1_1: i64 = promote %0_0 [safepoint: 2i64, (%0_0, %1_1)]
    br bb2
  bb2:
    call __yk_trace_basicblock_dummy(0i32, 2i32)
    %2_1: i64 = add %1_1, 1i64
    br bb4
  bb3:
    call __yk_trace_basicblock_dummy(0i32, 3i32)
    ret %2_1
  bb4:
    call __yk_trace_basicblock_dummy(0i32, 4i32)
    br bb3
}

func llvm.dbg.value(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

func __yk_promote_usize(%arg0: i64) -> i64;

#[yk_outline]
func f(%arg0: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    call __yk_trace_basicblock_dummy(3i32, 0i32)
    %0_2: ptr = load @shadowstack_0
    %0_3: ptr = ptr_add %0_2, 16
    *@shadowstack_0 = %0_3
    %0_5: ptr = ptr_add %0_2, 0
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:38: uintptr_t (*fptr)(uintptr_t) = g;
    call __yk_trace_basicblock_dummy(3i32, 1i32)
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb2
  bb2:
    call __yk_trace_basicblock_dummy(3i32, 2i32)
    *%0_5 = g
    # yk_outline_dynamic_with_promote.c:40: return fptr(x);
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(3i32, 3i32)
    %3_1: ptr = load %0_5
    %3_2: i64 = icall %3_1(%0_0)
    # yk_outline_dynamic_with_promote.c:41: }
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(3i32, 4i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    # yk_outline_dynamic_with_promote.c:40: return fptr(x);
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(3i32, 5i32)
    br bb7
  bb6:
    call __yk_trace_basicblock_dummy(3i32, 6i32)
    *@shadowstack_0 = %0_2
    ret %3_2
  bb7:
    call __yk_trace_basicblock_dummy(3i32, 7i32)
    br bb6
}

func llvm.lifetime.start.p0(%arg0: i64, %arg1: ptr);

func llvm.lifetime.end.p0(%arg0: i64, %arg1: ptr);

#[yk_outline]
func main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock_dummy(6i32, 0i32)
    %0_3: ptr = call malloc(1000000i64)
    %0_4: ptr = ptr_add %0_3, 16
    *@shadowstack_0 = %0_4
    %0_6: ptr = alloca {0: i64}, 1, 8
    %0_7: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:44: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock_dummy(6i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # yk_outline_dynamic_with_promote.c:45: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock_dummy(6i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # yk_outline_dynamic_with_promote.c:46: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(6i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_6)
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(6i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(6i32, 5i32)
    *%0_6 = %4_1
    # yk_outline_dynamic_with_promote.c:48: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_7)
    br bb6
  bb6:
    call __yk_trace_basicblock_dummy(6i32, 6i32)
    *%0_7 = 4i64
    br bb7
  bb7:
    # yk_outline_dynamic_with_promote.c:50: NOOPT_VAL(i);
    call __yk_trace_basicblock_dummy(6i32, 7i32)
    # yk_outline_dynamic_with_promote.c:51: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock_dummy(6i32, 8i32)
    %8_1: i64 = load %0_7
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb15, bb9 [safepoint: 4i64, (%0_6, %0_7, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock_dummy(6i32, 9i32)
    br bb10
  bb10:
    # yk_outline_dynamic_with_promote.c:52: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock_dummy(6i32, 10i32)
    call llvm.experimental.patchpoint.void(0i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_6, 0i64, %0_6, %0_7, %1_1) [safepoint: 0i64, (%0_6, %0_7, %1_1)]
    # yk_outline_dynamic_with_promote.c:53: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, f(1));
    br bb11
  bb11:
    call __yk_trace_basicblock_dummy(6i32, 11i32)
    %11_1: ptr = load @stderr
    %11_2: i64 = load %0_7
    %11_3: i64 = call f(1i64) [safepoint: 7i64, (%0_6, %0_7, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    call __yk_trace_basicblock_dummy(6i32, 12i32)
    %12_1: i32 = call fprintf(%11_1, @.str, %11_2, %11_3)
    # yk_outline_dynamic_with_promote.c:54: i--;
    br bb13
  bb13:
    call __yk_trace_basicblock_dummy(6i32, 13i32)
    %13_1: i64 = load %0_7
    %13_2: i64 = add %13_1, -1i64
    *%0_7 = %13_2
    # yk_outline_dynamic_with_promote.c:51: while (i > 0) {
    %13_4: i1 = eq %13_2, 0i64
    condbr %13_4, bb14, bb20 [safepoint: 8i64, (%0_6, %0_7, %1_1, %13_4)]
  bb14:
    # yk_outline_dynamic_with_promote.c:56: yk_location_drop(loc);
    call __yk_trace_basicblock_dummy(6i32, 14i32)
    br bb15
  bb15:
    call __yk_trace_basicblock_dummy(6i32, 15i32)
    %15_1: i64 = load %0_6
    call yk_location_drop(%15_1)
    # yk_outline_dynamic_with_promote.c:57: yk_mt_shutdown(mt);
    br bb16
  bb16:
    call __yk_trace_basicblock_dummy(6i32, 16i32)
    call yk_mt_shutdown(%1_1)
    # yk_outline_dynamic_with_promote.c:59: }
    br bb17
  bb17:
    call __yk_trace_basicblock_dummy(6i32, 17i32)
    call llvm.lifetime.end.p0(8i64, %0_7)
    br bb18
  bb18:
    call __yk_trace_basicblock_dummy(6i32, 18i32)
    call llvm.lifetime.end.p0(8i64, %0_6)
    # yk_outline_dynamic_with_promote.c:58: return (EXIT_SUCCESS);
    br bb19
  bb19:
    call __yk_trace_basicblock_dummy(6i32, 19i32)
    br bb22
  bb20:
    call __yk_trace_basicblock_dummy(6i32, 20i32)
    br bb10
  bb21:
    call __yk_trace_basicblock_dummy(6i32, 21i32)
    ret 0i32
  bb22:
    call __yk_trace_basicblock_dummy(6i32, 22i32)
    br bb21
}

func yk_mt_new(%arg0: ptr) -> ptr;

func yk_mt_hot_threshold_set(%arg0: ptr, %arg1: i32);

func llvm.dbg.declare(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

func yk_location_new() -> i64;

func yk_mt_control_point(%arg0: ptr, %arg1: ptr);

func fprintf(%arg0: ptr, %arg1: ptr, ...) -> i32;

func yk_location_drop(%arg0: i64);

func yk_mt_shutdown(%arg0: ptr);

#[yk_outline]
func __yk_unopt_f(%arg0: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    call __yk_trace_basicblock(15i32, 0i32)
    %0_2: ptr = load @shadowstack_0
    %0_3: ptr = ptr_add %0_2, 16
    *@shadowstack_0 = %0_3
    %0_5: ptr = ptr_add %0_2, 0
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:38: uintptr_t (*fptr)(uintptr_t) = g;
    call __yk_trace_basicblock(15i32, 1i32)
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb2
  bb2:
    call __yk_trace_basicblock(15i32, 2i32)
    *%0_5 = g
    # yk_outline_dynamic_with_promote.c:40: return fptr(x);
    br bb3
  bb3:
    call __yk_trace_basicblock(15i32, 3i32)
    %3_1: ptr = load %0_5
    %3_2: i64 = icall %3_1(%0_0)
    # yk_outline_dynamic_with_promote.c:41: }
    br bb4
  bb4:
    call __yk_trace_basicblock(15i32, 4i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    # yk_outline_dynamic_with_promote.c:40: return fptr(x);
    br bb5
  bb5:
    call __yk_trace_basicblock(15i32, 5i32)
    br bb7
  bb6:
    call __yk_trace_basicblock(15i32, 6i32)
    *@shadowstack_0 = %0_2
    ret %3_2
  bb7:
    call __yk_trace_basicblock(15i32, 7i32)
    br bb6
}

#[yk_outline]
func __yk_unopt_main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock(16i32, 0i32)
    %0_3: ptr = load @shadowstack_0
    %0_4: ptr = alloca {0: i64}, 1, 8
    %0_5: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:44: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock(16i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # yk_outline_dynamic_with_promote.c:45: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock(16i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # yk_outline_dynamic_with_promote.c:46: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock(16i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_4)
    br bb4
  bb4:
    call __yk_trace_basicblock(16i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock(16i32, 5i32)
    *%0_4 = %4_1
    # yk_outline_dynamic_with_promote.c:48: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb6
  bb6:
    call __yk_trace_basicblock(16i32, 6i32)
    *%0_5 = 4i64
    br bb7
  bb7:
    # yk_outline_dynamic_with_promote.c:50: NOOPT_VAL(i);
    call __yk_trace_basicblock(16i32, 7i32)
    # yk_outline_dynamic_with_promote.c:51: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock(16i32, 8i32)
    %8_1: i64 = load %0_5
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb15, bb9 [safepoint: 9i64, (%0_4, %0_5, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock(16i32, 9i32)
    br bb10
  bb10:
    # yk_outline_dynamic_with_promote.c:52: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock(16i32, 10i32)
    call llvm.experimental.patchpoint.void(1i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_4, 1i64, %0_4, %0_5, %1_1) [safepoint: 1i64, (%0_4, %0_5, %1_1)]
    # yk_outline_dynamic_with_promote.c:53: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, f(1));
    br bb11
  bb11:
    call __yk_trace_basicblock(16i32, 11i32)
    %11_1: ptr = load @stderr
    %11_2: i64 = load %0_5
    %11_3: i64 = call __yk_unopt_f(1i64) [safepoint: 6i64, (%0_4, %0_5, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    call __yk_trace_basicblock(16i32, 12i32)
    %12_1: i32 = call fprintf(%11_1, @.str, %11_2, %11_3)
    # yk_outline_dynamic_with_promote.c:54: i--;
    br bb13
  bb13:
    call __yk_trace_basicblock(16i32, 13i32)
    %13_1: i64 = load %0_5
    %13_2: i64 = add %13_1, -1i64
    *%0_5 = %13_2
    # yk_outline_dynamic_with_promote.c:51: while (i > 0) {
    %13_4: i1 = eq %13_2, 0i64
    condbr %13_4, bb14, bb20 [safepoint: 3i64, (%0_4, %0_5, %1_1, %13_4)]
  bb14:
    # yk_outline_dynamic_with_promote.c:56: yk_location_drop(loc);
    call __yk_trace_basicblock(16i32, 14i32)
    br bb15
  bb15:
    call __yk_trace_basicblock(16i32, 15i32)
    %15_1: i64 = load %0_4
    call yk_location_drop(%15_1)
    # yk_outline_dynamic_with_promote.c:57: yk_mt_shutdown(mt);
    br bb16
  bb16:
    call __yk_trace_basicblock(16i32, 16i32)
    call yk_mt_shutdown(%1_1)
    # yk_outline_dynamic_with_promote.c:59: }
    br bb17
  bb17:
    call __yk_trace_basicblock(16i32, 17i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    br bb18
  bb18:
    call __yk_trace_basicblock(16i32, 18i32)
    call llvm.lifetime.end.p0(8i64, %0_4)
    # yk_outline_dynamic_with_promote.c:58: return (EXIT_SUCCESS);
    br bb19
  bb19:
    call __yk_trace_basicblock(16i32, 19i32)
    br bb22
  bb20:
    call __yk_trace_basicblock(16i32, 20i32)
    br bb10
  bb21:
    call __yk_trace_basicblock(16i32, 21i32)
    ret 0i32
  bb22:
    call __yk_trace_basicblock(16i32, 22i32)
    br bb21
}

func malloc(%arg0: i64) -> ptr;

func __ykrt_control_point(%arg0: ptr, %arg1: ptr, %arg2: i64);

func llvm.experimental.patchpoint.void(%arg0: i64, %arg1: i32, %arg2: ptr, %arg3: i32, ...);

func llvm.experimental.stackmap(%arg0: i64, %arg1: i32, ...);

func __yk_trace_basicblock(%arg0: i32, %arg1: i32);

func __yk_trace_basicblock_dummy(%arg0: i32, %arg1: i32);

--- End aot ---
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                18,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Load {
    ptr: Global(
        GlobalDeclIdx(
            1,
        ),
    ),
    tyidx: TyIdx(
        5,
    ),
    volatile: false,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Load {
    ptr: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                0,
            ),
            iidx: InstIdx(
                5,
            ),
        },
    ),
    tyidx: TyIdx(
        1,
    ),
    volatile: false,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        15,
    ),
    args: [
        Const(
            ConstIdx(
                3,
            ),
        ),
    ],
    safepoint: Some(
        DeoptSafepoint {
            id: 6,
            lives: [
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            0,
                        ),
                        iidx: InstIdx(
                            4,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            0,
                        ),
                        iidx: InstIdx(
                            5,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            1,
                        ),
                        iidx: InstIdx(
                            1,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            11,
                        ),
                        iidx: InstIdx(
                            1,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            11,
                        ),
                        iidx: InstIdx(
                            2,
                        ),
                    },
                ),
            ],
        },
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Br {
    succ: BBlockIdx(
        12,
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                19,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        12,
    ),
    args: [
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    11,
                ),
                iidx: InstIdx(
                    1,
                ),
            },
        ),
        Global(
            GlobalDeclIdx(
                2,
            ),
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    11,
                ),
                iidx: InstIdx(
                    2,
                ),
            },
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    11,
                ),
                iidx: InstIdx(
                    3,
                ),
            },
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Br {
    succ: BBlockIdx(
        13,
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                17,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Load {
    ptr: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                0,
            ),
            iidx: InstIdx(
                5,
            ),
        },
    ),
    tyidx: TyIdx(
        1,
    ),
    volatile: false,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = BinaryOp {
    lhs: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                13,
            ),
            iidx: InstIdx(
                1,
            ),
        },
    ),
    binop: Add,
    rhs: Const(
        ConstIdx(
            20,
        ),
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Store {
    val: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                13,
            ),
            iidx: InstIdx(
                2,
            ),
        },
    ),
    tgt: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                0,
            ),
            iidx: InstIdx(
                5,
            ),
        },
    ),
    volatile: false,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = ICmp {
    tyidx: TyIdx(
        10,
    ),
    lhs: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                13,
            ),
            iidx: InstIdx(
                2,
            ),
        },
    ),
    pred: Equal,
    rhs: Const(
        ConstIdx(
            14,
        ),
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = CondBr {
    cond: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                13,
            ),
            iidx: InstIdx(
                4,
            ),
        },
    ),
    true_bb: BBlockIdx(
        14,
    ),
    false_bb: BBlockIdx(
        20,
    ),
    safepoint: DeoptSafepoint {
        id: 3,
        lives: [
            LocalVariable(
                InstID {
                    funcidx: FuncIdx(
                        16,
                    ),
                    bbidx: BBlockIdx(
                        0,
                    ),
                    iidx: InstIdx(
                        4,
                    ),
                },
            ),
            LocalVariable(
                InstID {
                    funcidx: FuncIdx(
                        16,
                    ),
                    bbidx: BBlockIdx(
                        0,
                    ),
                    iidx: InstIdx(
                        5,
                    ),
                },
            ),
            LocalVariable(
                InstID {
                    funcidx: FuncIdx(
                        16,
                    ),
                    bbidx: BBlockIdx(
                        1,
                    ),
                    iidx: InstIdx(
                        1,
                    ),
                },
            ),
            LocalVariable(
                InstID {
                    funcidx: FuncIdx(
                        16,
                    ),
                    bbidx: BBlockIdx(
                        13,
                    ),
                    iidx: InstIdx(
                        4,
                    ),
                },
            ),
        ],
    },
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                27,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Br {
    succ: BBlockIdx(
        10,
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                16,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        19,
    ),
    args: [
        Const(
            ConstIdx(
                3,
            ),
        ),
        Const(
            ConstIdx(
                17,
            ),
        ),
        Func(
            FuncIdx(
                18,
            ),
        ),
        Const(
            ConstIdx(
                4,
            ),
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    1,
                ),
                iidx: InstIdx(
                    1,
                ),
            },
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    0,
                ),
                iidx: InstIdx(
                    4,
                ),
            },
        ),
        Const(
            ConstIdx(
                3,
            ),
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    0,
                ),
                iidx: InstIdx(
                    4,
                ),
            },
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    0,
                ),
                iidx: InstIdx(
                    5,
                ),
            },
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    1,
                ),
                iidx: InstIdx(
                    1,
                ),
            },
        ),
    ],
    safepoint: Some(
        DeoptSafepoint {
            id: 1,
            lives: [
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            0,
                        ),
                        iidx: InstIdx(
                            4,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            0,
                        ),
                        iidx: InstIdx(
                            5,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            1,
                        ),
                        iidx: InstIdx(
                            1,
                        ),
                    },
                ),
            ],
        },
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Br {
    succ: BBlockIdx(
        11,
    ),
}

thread '<unnamed>' panicked at ykrt/src/compile/jitc_yk/trace_builder.rs:1524:9:
assertion `left == right` failed
  left: 0
 right: 8
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

thread '<unnamed>' panicked at ykrt/src/mt.rs:262:39:
called `Result::unwrap()` on an `Err` value: Any { .. }
fatal runtime error: failed to initiate panic, error 5

test lang_tests::yk_outline_dynamic_with_promote.c ... [0m[31mFAILED[0m

failures:

---- lang_tests::yk_outline_dynamic_with_promote.c status ----
Exited due to signal: 6

---- lang_tests::yk_outline_dynamic_with_promote.c stderr ----

yk-jit-event: start-tracing
4: 2
yk-jit-event: stop-tracing
--- Begin aot ---
# IR format version: 0
# Num funcs: 23
# Num consts: 30
# Num global decls: 3
# Num types: 23
global_decl tls @shadowstack_0
global_decl @stderr
global_decl @.str

func g(%arg0: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    call __yk_trace_basicblock_dummy(0i32, 0i32)
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:32: return yk_promote(x) + 1;
    call __yk_trace_basicblock_dummy(0i32, 1i32)
    %1_1: i64 = promote %0_0 [safepoint: 2i64, (%0_0, %1_1)]
    br bb2
  bb2:
    call __yk_trace_basicblock_dummy(0i32, 2i32)
    %2_1: i64 = add %1_1, 1i64
    br bb4
  bb3:
    call __yk_trace_basicblock_dummy(0i32, 3i32)
    ret %2_1
  bb4:
    call __yk_trace_basicblock_dummy(0i32, 4i32)
    br bb3
}

func llvm.dbg.value(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

func __yk_promote_usize(%arg0: i64) -> i64;

#[yk_outline]
func f(%arg0: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    call __yk_trace_basicblock_dummy(3i32, 0i32)
    %0_2: ptr = load @shadowstack_0
    %0_3: ptr = ptr_add %0_2, 16
    *@shadowstack_0 = %0_3
    %0_5: ptr = ptr_add %0_2, 0
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:38: uintptr_t (*fptr)(uintptr_t) = g;
    call __yk_trace_basicblock_dummy(3i32, 1i32)
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb2
  bb2:
    call __yk_trace_basicblock_dummy(3i32, 2i32)
    *%0_5 = g
    # yk_outline_dynamic_with_promote.c:40: return fptr(x);
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(3i32, 3i32)
    %3_1: ptr = load %0_5
    %3_2: i64 = icall %3_1(%0_0)
    # yk_outline_dynamic_with_promote.c:41: }
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(3i32, 4i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    # yk_outline_dynamic_with_promote.c:40: return fptr(x);
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(3i32, 5i32)
    br bb7
  bb6:
    call __yk_trace_basicblock_dummy(3i32, 6i32)
    *@shadowstack_0 = %0_2
    ret %3_2
  bb7:
    call __yk_trace_basicblock_dummy(3i32, 7i32)
    br bb6
}

func llvm.lifetime.start.p0(%arg0: i64, %arg1: ptr);

func llvm.lifetime.end.p0(%arg0: i64, %arg1: ptr);

#[yk_outline]
func main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock_dummy(6i32, 0i32)
    %0_3: ptr = call malloc(1000000i64)
    %0_4: ptr = ptr_add %0_3, 16
    *@shadowstack_0 = %0_4
    %0_6: ptr = alloca {0: i64}, 1, 8
    %0_7: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:44: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock_dummy(6i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # yk_outline_dynamic_with_promote.c:45: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock_dummy(6i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # yk_outline_dynamic_with_promote.c:46: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(6i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_6)
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(6i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(6i32, 5i32)
    *%0_6 = %4_1
    # yk_outline_dynamic_with_promote.c:48: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_7)
    br bb6
  bb6:
    call __yk_trace_basicblock_dummy(6i32, 6i32)
    *%0_7 = 4i64
    br bb7
  bb7:
    # yk_outline_dynamic_with_promote.c:50: NOOPT_VAL(i);
    call __yk_trace_basicblock_dummy(6i32, 7i32)
    # yk_outline_dynamic_with_promote.c:51: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock_dummy(6i32, 8i32)
    %8_1: i64 = load %0_7
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb15, bb9 [safepoint: 4i64, (%0_6, %0_7, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock_dummy(6i32, 9i32)
    br bb10
  bb10:
    # yk_outline_dynamic_with_promote.c:52: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock_dummy(6i32, 10i32)
    call llvm.experimental.patchpoint.void(0i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_6, 0i64, %0_6, %0_7, %1_1) [safepoint: 0i64, (%0_6, %0_7, %1_1)]
    # yk_outline_dynamic_with_promote.c:53: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, f(1));
    br bb11
  bb11:
    call __yk_trace_basicblock_dummy(6i32, 11i32)
    %11_1: ptr = load @stderr
    %11_2: i64 = load %0_7
    %11_3: i64 = call f(1i64) [safepoint: 7i64, (%0_6, %0_7, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    call __yk_trace_basicblock_dummy(6i32, 12i32)
    %12_1: i32 = call fprintf(%11_1, @.str, %11_2, %11_3)
    # yk_outline_dynamic_with_promote.c:54: i--;
    br bb13
  bb13:
    call __yk_trace_basicblock_dummy(6i32, 13i32)
    %13_1: i64 = load %0_7
    %13_2: i64 = add %13_1, -1i64
    *%0_7 = %13_2
    # yk_outline_dynamic_with_promote.c:51: while (i > 0) {
    %13_4: i1 = eq %13_2, 0i64
    condbr %13_4, bb14, bb20 [safepoint: 8i64, (%0_6, %0_7, %1_1, %13_4)]
  bb14:
    # yk_outline_dynamic_with_promote.c:56: yk_location_drop(loc);
    call __yk_trace_basicblock_dummy(6i32, 14i32)
    br bb15
  bb15:
    call __yk_trace_basicblock_dummy(6i32, 15i32)
    %15_1: i64 = load %0_6
    call yk_location_drop(%15_1)
    # yk_outline_dynamic_with_promote.c:57: yk_mt_shutdown(mt);
    br bb16
  bb16:
    call __yk_trace_basicblock_dummy(6i32, 16i32)
    call yk_mt_shutdown(%1_1)
    # yk_outline_dynamic_with_promote.c:59: }
    br bb17
  bb17:
    call __yk_trace_basicblock_dummy(6i32, 17i32)
    call llvm.lifetime.end.p0(8i64, %0_7)
    br bb18
  bb18:
    call __yk_trace_basicblock_dummy(6i32, 18i32)
    call llvm.lifetime.end.p0(8i64, %0_6)
    # yk_outline_dynamic_with_promote.c:58: return (EXIT_SUCCESS);
    br bb19
  bb19:
    call __yk_trace_basicblock_dummy(6i32, 19i32)
    br bb22
  bb20:
    call __yk_trace_basicblock_dummy(6i32, 20i32)
    br bb10
  bb21:
    call __yk_trace_basicblock_dummy(6i32, 21i32)
    ret 0i32
  bb22:
    call __yk_trace_basicblock_dummy(6i32, 22i32)
    br bb21
}

func yk_mt_new(%arg0: ptr) -> ptr;

func yk_mt_hot_threshold_set(%arg0: ptr, %arg1: i32);

func llvm.dbg.declare(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

func yk_location_new() -> i64;

func yk_mt_control_point(%arg0: ptr, %arg1: ptr);

func fprintf(%arg0: ptr, %arg1: ptr, ...) -> i32;

func yk_location_drop(%arg0: i64);

func yk_mt_shutdown(%arg0: ptr);

#[yk_outline]
func __yk_unopt_f(%arg0: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    call __yk_trace_basicblock(15i32, 0i32)
    %0_2: ptr = load @shadowstack_0
    %0_3: ptr = ptr_add %0_2, 16
    *@shadowstack_0 = %0_3
    %0_5: ptr = ptr_add %0_2, 0
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:38: uintptr_t (*fptr)(uintptr_t) = g;
    call __yk_trace_basicblock(15i32, 1i32)
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb2
  bb2:
    call __yk_trace_basicblock(15i32, 2i32)
    *%0_5 = g
    # yk_outline_dynamic_with_promote.c:40: return fptr(x);
    br bb3
  bb3:
    call __yk_trace_basicblock(15i32, 3i32)
    %3_1: ptr = load %0_5
    %3_2: i64 = icall %3_1(%0_0)
    # yk_outline_dynamic_with_promote.c:41: }
    br bb4
  bb4:
    call __yk_trace_basicblock(15i32, 4i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    # yk_outline_dynamic_with_promote.c:40: return fptr(x);
    br bb5
  bb5:
    call __yk_trace_basicblock(15i32, 5i32)
    br bb7
  bb6:
    call __yk_trace_basicblock(15i32, 6i32)
    *@shadowstack_0 = %0_2
    ret %3_2
  bb7:
    call __yk_trace_basicblock(15i32, 7i32)
    br bb6
}

#[yk_outline]
func __yk_unopt_main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock(16i32, 0i32)
    %0_3: ptr = load @shadowstack_0
    %0_4: ptr = alloca {0: i64}, 1, 8
    %0_5: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # yk_outline_dynamic_with_promote.c:44: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock(16i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # yk_outline_dynamic_with_promote.c:45: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock(16i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # yk_outline_dynamic_with_promote.c:46: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock(16i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_4)
    br bb4
  bb4:
    call __yk_trace_basicblock(16i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock(16i32, 5i32)
    *%0_4 = %4_1
    # yk_outline_dynamic_with_promote.c:48: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb6
  bb6:
    call __yk_trace_basicblock(16i32, 6i32)
    *%0_5 = 4i64
    br bb7
  bb7:
    # yk_outline_dynamic_with_promote.c:50: NOOPT_VAL(i);
    call __yk_trace_basicblock(16i32, 7i32)
    # yk_outline_dynamic_with_promote.c:51: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock(16i32, 8i32)
    %8_1: i64 = load %0_5
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb15, bb9 [safepoint: 9i64, (%0_4, %0_5, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock(16i32, 9i32)
    br bb10
  bb10:
    # yk_outline_dynamic_with_promote.c:52: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock(16i32, 10i32)
    call llvm.experimental.patchpoint.void(1i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_4, 1i64, %0_4, %0_5, %1_1) [safepoint: 1i64, (%0_4, %0_5, %1_1)]
    # yk_outline_dynamic_with_promote.c:53: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, f(1));
    br bb11
  bb11:
    call __yk_trace_basicblock(16i32, 11i32)
    %11_1: ptr = load @stderr
    %11_2: i64 = load %0_5
    %11_3: i64 = call __yk_unopt_f(1i64) [safepoint: 6i64, (%0_4, %0_5, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    call __yk_trace_basicblock(16i32, 12i32)
    %12_1: i32 = call fprintf(%11_1, @.str, %11_2, %11_3)
    # yk_outline_dynamic_with_promote.c:54: i--;
    br bb13
  bb13:
    call __yk_trace_basicblock(16i32, 13i32)
    %13_1: i64 = load %0_5
    %13_2: i64 = add %13_1, -1i64
    *%0_5 = %13_2
    # yk_outline_dynamic_with_promote.c:51: while (i > 0) {
    %13_4: i1 = eq %13_2, 0i64
    condbr %13_4, bb14, bb20 [safepoint: 3i64, (%0_4, %0_5, %1_1, %13_4)]
  bb14:
    # yk_outline_dynamic_with_promote.c:56: yk_location_drop(loc);
    call __yk_trace_basicblock(16i32, 14i32)
    br bb15
  bb15:
    call __yk_trace_basicblock(16i32, 15i32)
    %15_1: i64 = load %0_4
    call yk_location_drop(%15_1)
    # yk_outline_dynamic_with_promote.c:57: yk_mt_shutdown(mt);
    br bb16
  bb16:
    call __yk_trace_basicblock(16i32, 16i32)
    call yk_mt_shutdown(%1_1)
    # yk_outline_dynamic_with_promote.c:59: }
    br bb17
  bb17:
    call __yk_trace_basicblock(16i32, 17i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    br bb18
  bb18:
    call __yk_trace_basicblock(16i32, 18i32)
    call llvm.lifetime.end.p0(8i64, %0_4)
    # yk_outline_dynamic_with_promote.c:58: return (EXIT_SUCCESS);
    br bb19
  bb19:
    call __yk_trace_basicblock(16i32, 19i32)
    br bb22
  bb20:
    call __yk_trace_basicblock(16i32, 20i32)
    br bb10
  bb21:
    call __yk_trace_basicblock(16i32, 21i32)
    ret 0i32
  bb22:
    call __yk_trace_basicblock(16i32, 22i32)
    br bb21
}

func malloc(%arg0: i64) -> ptr;

func __ykrt_control_point(%arg0: ptr, %arg1: ptr, %arg2: i64);

func llvm.experimental.patchpoint.void(%arg0: i64, %arg1: i32, %arg2: ptr, %arg3: i32, ...);

func llvm.experimental.stackmap(%arg0: i64, %arg1: i32, ...);

func __yk_trace_basicblock(%arg0: i32, %arg1: i32);

func __yk_trace_basicblock_dummy(%arg0: i32, %arg1: i32);

--- End aot ---
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                18,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Load {
    ptr: Global(
        GlobalDeclIdx(
            1,
        ),
    ),
    tyidx: TyIdx(
        5,
    ),
    volatile: false,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Load {
    ptr: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                0,
            ),
            iidx: InstIdx(
                5,
            ),
        },
    ),
    tyidx: TyIdx(
        1,
    ),
    volatile: false,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        15,
    ),
    args: [
        Const(
            ConstIdx(
                3,
            ),
        ),
    ],
    safepoint: Some(
        DeoptSafepoint {
            id: 6,
            lives: [
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            0,
                        ),
                        iidx: InstIdx(
                            4,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            0,
                        ),
                        iidx: InstIdx(
                            5,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            1,
                        ),
                        iidx: InstIdx(
                            1,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            11,
                        ),
                        iidx: InstIdx(
                            1,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            11,
                        ),
                        iidx: InstIdx(
                            2,
                        ),
                    },
                ),
            ],
        },
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Br {
    succ: BBlockIdx(
        12,
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                19,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        12,
    ),
    args: [
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    11,
                ),
                iidx: InstIdx(
                    1,
                ),
            },
        ),
        Global(
            GlobalDeclIdx(
                2,
            ),
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    11,
                ),
                iidx: InstIdx(
                    2,
                ),
            },
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    11,
                ),
                iidx: InstIdx(
                    3,
                ),
            },
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Br {
    succ: BBlockIdx(
        13,
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                17,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Load {
    ptr: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                0,
            ),
            iidx: InstIdx(
                5,
            ),
        },
    ),
    tyidx: TyIdx(
        1,
    ),
    volatile: false,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = BinaryOp {
    lhs: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                13,
            ),
            iidx: InstIdx(
                1,
            ),
        },
    ),
    binop: Add,
    rhs: Const(
        ConstIdx(
            20,
        ),
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Store {
    val: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                13,
            ),
            iidx: InstIdx(
                2,
            ),
        },
    ),
    tgt: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                0,
            ),
            iidx: InstIdx(
                5,
            ),
        },
    ),
    volatile: false,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = ICmp {
    tyidx: TyIdx(
        10,
    ),
    lhs: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                13,
            ),
            iidx: InstIdx(
                2,
            ),
        },
    ),
    pred: Equal,
    rhs: Const(
        ConstIdx(
            14,
        ),
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = CondBr {
    cond: LocalVariable(
        InstID {
            funcidx: FuncIdx(
                16,
            ),
            bbidx: BBlockIdx(
                13,
            ),
            iidx: InstIdx(
                4,
            ),
        },
    ),
    true_bb: BBlockIdx(
        14,
    ),
    false_bb: BBlockIdx(
        20,
    ),
    safepoint: DeoptSafepoint {
        id: 3,
        lives: [
            LocalVariable(
                InstID {
                    funcidx: FuncIdx(
                        16,
                    ),
                    bbidx: BBlockIdx(
                        0,
                    ),
                    iidx: InstIdx(
                        4,
                    ),
                },
            ),
            LocalVariable(
                InstID {
                    funcidx: FuncIdx(
                        16,
                    ),
                    bbidx: BBlockIdx(
                        0,
                    ),
                    iidx: InstIdx(
                        5,
                    ),
                },
            ),
            LocalVariable(
                InstID {
                    funcidx: FuncIdx(
                        16,
                    ),
                    bbidx: BBlockIdx(
                        1,
                    ),
                    iidx: InstIdx(
                        1,
                    ),
                },
            ),
            LocalVariable(
                InstID {
                    funcidx: FuncIdx(
                        16,
                    ),
                    bbidx: BBlockIdx(
                        13,
                    ),
                    iidx: InstIdx(
                        4,
                    ),
                },
            ),
        ],
    },
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                27,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Br {
    succ: BBlockIdx(
        10,
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        21,
    ),
    args: [
        Const(
            ConstIdx(
                23,
            ),
        ),
        Const(
            ConstIdx(
                16,
            ),
        ),
    ],
    safepoint: None,
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Call {
    callee: FuncIdx(
        19,
    ),
    args: [
        Const(
            ConstIdx(
                3,
            ),
        ),
        Const(
            ConstIdx(
                17,
            ),
        ),
        Func(
            FuncIdx(
                18,
            ),
        ),
        Const(
            ConstIdx(
                4,
            ),
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    1,
                ),
                iidx: InstIdx(
                    1,
                ),
            },
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    0,
                ),
                iidx: InstIdx(
                    4,
                ),
            },
        ),
        Const(
            ConstIdx(
                3,
            ),
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    0,
                ),
                iidx: InstIdx(
                    4,
                ),
            },
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    0,
                ),
                iidx: InstIdx(
                    5,
                ),
            },
        ),
        LocalVariable(
            InstID {
                funcidx: FuncIdx(
                    16,
                ),
                bbidx: BBlockIdx(
                    1,
                ),
                iidx: InstIdx(
                    1,
                ),
            },
        ),
    ],
    safepoint: Some(
        DeoptSafepoint {
            id: 1,
            lives: [
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            0,
                        ),
                        iidx: InstIdx(
                            4,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            0,
                        ),
                        iidx: InstIdx(
                            5,
                        ),
                    },
                ),
                LocalVariable(
                    InstID {
                        funcidx: FuncIdx(
                            16,
                        ),
                        bbidx: BBlockIdx(
                            1,
                        ),
                        iidx: InstIdx(
                            1,
                        ),
                    },
                ),
            ],
        },
    ),
}
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] "@@ process_block inst - {:?}" = "@@ process_block inst - {:?}"
[ykrt/src/compile/jitc_yk/trace_builder.rs:205:13] inst = Br {
    succ: BBlockIdx(
        11,
    ),
}

thread '<unnamed>' panicked at ykrt/src/compile/jitc_yk/trace_builder.rs:1524:9:
assertion `left == right` failed
  left: 0
 right: 8
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

thread '<unnamed>' panicked at ykrt/src/mt.rs:262:39:
called `Result::unwrap()` on an `Err` value: Any { .. }
fatal runtime error: failed to initiate panic, error 5


---- lang_tests::yk_outline_dynamic_with_promote.c stdout ----

Transition: OptToUnopt
src_rbp: 0x7ffd655970b0, reg_store: 0x7ffd65597010, src_frame_size: 0x30, dst_frame_size: 0x30, rbp_offset_reg_store: 0xa0
Register2Register - src: Register(14, 8, []) dst: Register(13, 8, [])
Register2Register - src: Register(3, 8, []) dst: Register(3, 8, [])
register:14, value: 0x7feba872a010
register:15, value: 0x1
register:13, value: 0x7ffd655971d8
register:3, value: 0x1df2d680

failures:
    lang_tests::yk_outline_dynamic_with_promote.c

test result: [0m[31mFAILED[0m. 0 passed; 1 failed; 0 ignored; 0 measured; 155 filtered out

[1m[31merror[0m[1m:[0m test failed, to rerun pass `-p tests --test c_tests`

Caused by:
  process didn't exit successfully: `/home/pd/yk-fork/target/debug/deps/c_tests-311eca720dce6708 '::yk_outline_dynamic_with_promote.c' --nocapture` (exit status: 1)
Shared connection to bencher16.soft-dev.org closed.
CompletedProcess(args=['ssh', '-t', 'bencher16.soft-dev.org', 'cd', 'yk-fork', '&&', 'CP_PRINT_MACHINE_CODE=1', 'CP_CP_PATCHPOINT=0', 'CP_VERBOSE=1', 'YKB_TRACER=swt', '/home/pd/.cargo/bin/cargo', 'test', '::yk_outline_dynamic_with_promote.c', '--', '--nocapture'], returncode=1)
