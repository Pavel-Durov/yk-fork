warning: unused variable: `dest_reg_nums`
   --> ykrt/src/trace/swt/live_vars.rs:790:13
    |
790 |         let dest_reg_nums = set_destination_live_vars(
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dest_reg_nums`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `ykrt` (lib test) generated 1 warning
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.36s
     Running unittests src/lib.rs (target/debug/deps/hwtracer-5a292c1a4725377f)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 14 filtered out; finished in 0.00s

     Running unittests src/lib.rs (target/debug/deps/tests-765bab7538b573ac)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/dump_ir.rs (target/debug/deps/dump_ir-613d17bd9885d5c3)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running unittests src/bin/gdb_c_test.rs (target/debug/deps/gdb_c_test-54dab2fbc910e3fa)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running langtest_c.rs (target/debug/deps/c_tests-a7df1e4d217569ba)
Running C tests...

running 1 tests********** Machine Code when processing stackmap **********
Function: idem1
# Machine code for function idem1: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14 = MOV64rr $rdi
  $edi = MOV32ri 2, debug-location !35; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !35; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !35; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !35; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r14
  $edi = MOV32ri 2, debug-location !36; c/idempotent_outline.c:31:25
  $esi = MOV32ri 1, debug-location !36; c/idempotent_outline.c:31:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !36; c/idempotent_outline.c:31:25
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  $r12 = MOV64rr $r14, debug-location !36; c/idempotent_outline.c:31:25
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 1, implicit-def dead $eflags, debug-location !36; c/idempotent_outline.c:31:25
  $r13 = MOV64rr $rbx, debug-location !37; c/idempotent_outline.c:31:32
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 1, implicit-def dead $eflags, debug-location !37; c/idempotent_outline.c:31:32
  $rdi = MOV64rr $r12, debug-location !38; c/idempotent_outline.c:31:17
  $rsi = MOV64rr $r13, debug-location !38; c/idempotent_outline.c:31:17
  CALL64pcrel32 @idem2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !38; c/idempotent_outline.c:31:17
  STACKMAP 4, 0, renamable $r14, 3, renamable $rbx, 3, killed renamable $r12, 3, killed renamable $r13, 3, implicit-def dead early-clobber $r11, debug-location !39; c/idempotent_outline.c:32:25
  $r15 = MOV64rr $rax, debug-location !38; c/idempotent_outline.c:31:17
  JMP_1 %bb.2, debug-location !39; c/idempotent_outline.c:32:25

bb.2 (%ir-block.7, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  $edi = MOV32ri 2, debug-location !39; c/idempotent_outline.c:32:25
  $esi = MOV32ri 2, debug-location !39; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !39; c/idempotent_outline.c:32:25
  $rdi = MOV64rr killed $r15, debug-location !39; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !39; c/idempotent_outline.c:32:25
  $r15 = MOV64rr $rax, debug-location !39; c/idempotent_outline.c:32:25
  JMP_1 %bb.3, debug-location !35; c/idempotent_outline.c:0

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  $edi = MOV32ri 2, debug-location !39; c/idempotent_outline.c:32:25
  $esi = MOV32ri 3, debug-location !39; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !39; c/idempotent_outline.c:32:25
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:31
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 5, implicit-def dead $eflags, debug-location !39; c/idempotent_outline.c:32:25
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 5, implicit-def dead $eflags, debug-location !40; c/idempotent_outline.c:32:32
  $rdi = MOV64rr $rbx, debug-location !41; c/idempotent_outline.c:32:17
  $rsi = MOV64rr $r14, debug-location !41; c/idempotent_outline.c:32:17
  CALL64pcrel32 @idem2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !41; c/idempotent_outline.c:32:17
  STACKMAP 5, 0, renamable $r15, 3, killed renamable $rbx, 3, killed renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !42; c/idempotent_outline.c:33:12
  $r12 = MOV64rr $rax, debug-location !41; c/idempotent_outline.c:32:17
  JMP_1 %bb.4, debug-location !42; c/idempotent_outline.c:33:12

bb.4 (%ir-block.13, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12, $r15
  $edi = MOV32ri 2, debug-location !42; c/idempotent_outline.c:33:12
  $esi = MOV32ri 4, debug-location !42; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !42; c/idempotent_outline.c:33:12
  $rdi = MOV64rr killed $r12, debug-location !42; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !42; c/idempotent_outline.c:33:12
  $rbx = MOV64rr $rax, debug-location !42; c/idempotent_outline.c:33:12
  JMP_1 %bb.5, debug-location !35; c/idempotent_outline.c:0

bb.5 (%ir-block.15, bb_id 5):
; predecessors: %bb.4
  successors: %bb.7
  liveins: $rbx, $r15
  $edi = MOV32ri 2, debug-location !42; c/idempotent_outline.c:33:12
  $esi = MOV32ri 5, debug-location !42; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !42; c/idempotent_outline.c:33:12
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:32
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $r15, implicit-def dead $eflags, debug-location !42; c/idempotent_outline.c:33:12
  JMP_1 %bb.7, debug-location !43; c/idempotent_outline.c:33:3

bb.6 (%ir-block.17, bb_id 6):
; predecessors: %bb.7
  liveins: $rbx
  $edi = MOV32ri 2, debug-location !43; c/idempotent_outline.c:33:3
  $esi = MOV32ri 6, debug-location !43; c/idempotent_outline.c:33:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !43; c/idempotent_outline.c:33:3
  $rax = MOV64rr killed $rbx, debug-location !43; c/idempotent_outline.c:33:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !43; c/idempotent_outline.c:33:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !43; c/idempotent_outline.c:33:3
  RET64 implicit $rax, debug-location !43; c/idempotent_outline.c:33:3

bb.7 (%ir-block.18, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !43; c/idempotent_outline.c:33:3
  $edi = MOV32ri 2, debug-location !43; c/idempotent_outline.c:33:3
  $esi = MOV32ri 7, debug-location !43; c/idempotent_outline.c:33:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !43; c/idempotent_outline.c:33:3
  JMP_1 %bb.6, debug-location !43; c/idempotent_outline.c:33:3

# End machine code for function idem1.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: idem1
# Machine code for function idem1: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14 = MOV64rr $rdi
  $edi = MOV32ri 2, debug-location !35; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !35; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !35; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !35; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r14
  $edi = MOV32ri 2, debug-location !36; c/idempotent_outline.c:31:25
  $esi = MOV32ri 1, debug-location !36; c/idempotent_outline.c:31:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !36; c/idempotent_outline.c:31:25
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  $r12 = MOV64rr $r14, debug-location !36; c/idempotent_outline.c:31:25
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 1, implicit-def dead $eflags, debug-location !36; c/idempotent_outline.c:31:25
  $r13 = MOV64rr $rbx, debug-location !37; c/idempotent_outline.c:31:32
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 1, implicit-def dead $eflags, debug-location !37; c/idempotent_outline.c:31:32
  $rdi = MOV64rr $r12, debug-location !38; c/idempotent_outline.c:31:17
  $rsi = MOV64rr $r13, debug-location !38; c/idempotent_outline.c:31:17
  CALL64pcrel32 @idem2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !38; c/idempotent_outline.c:31:17
  STACKMAP 4, 0, renamable $r14, 3, renamable $rbx, 3, killed renamable $r12, 3, killed renamable $r13, 3, implicit-def dead early-clobber $r11, debug-location !39; c/idempotent_outline.c:32:25
  $r15 = MOV64rr $rax, debug-location !38; c/idempotent_outline.c:31:17
  JMP_1 %bb.2, debug-location !39; c/idempotent_outline.c:32:25

bb.2 (%ir-block.7, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  $edi = MOV32ri 2, debug-location !39; c/idempotent_outline.c:32:25
  $esi = MOV32ri 2, debug-location !39; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !39; c/idempotent_outline.c:32:25
  $rdi = MOV64rr killed $r15, debug-location !39; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !39; c/idempotent_outline.c:32:25
  $r15 = MOV64rr $rax, debug-location !39; c/idempotent_outline.c:32:25
  JMP_1 %bb.3, debug-location !35; c/idempotent_outline.c:0

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:29
  $edi = MOV32ri 2, debug-location !39; c/idempotent_outline.c:32:25
  $esi = MOV32ri 3, debug-location !39; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !39; c/idempotent_outline.c:32:25
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:31
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 5, implicit-def dead $eflags, debug-location !39; c/idempotent_outline.c:32:25
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 5, implicit-def dead $eflags, debug-location !40; c/idempotent_outline.c:32:32
  $rdi = MOV64rr $rbx, debug-location !41; c/idempotent_outline.c:32:17
  $rsi = MOV64rr $r14, debug-location !41; c/idempotent_outline.c:32:17
  CALL64pcrel32 @idem2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !41; c/idempotent_outline.c:32:17
  STACKMAP 5, 0, renamable $r15, 3, killed renamable $rbx, 3, killed renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !42; c/idempotent_outline.c:33:12
  $r12 = MOV64rr $rax, debug-location !41; c/idempotent_outline.c:32:17
  JMP_1 %bb.4, debug-location !42; c/idempotent_outline.c:33:12

bb.4 (%ir-block.13, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12, $r15
  $edi = MOV32ri 2, debug-location !42; c/idempotent_outline.c:33:12
  $esi = MOV32ri 4, debug-location !42; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !42; c/idempotent_outline.c:33:12
  $rdi = MOV64rr killed $r12, debug-location !42; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !42; c/idempotent_outline.c:33:12
  $rbx = MOV64rr $rax, debug-location !42; c/idempotent_outline.c:33:12
  JMP_1 %bb.5, debug-location !35; c/idempotent_outline.c:0

bb.5 (%ir-block.15, bb_id 5):
; predecessors: %bb.4
  successors: %bb.7
  liveins: $rbx, $r15
  $edi = MOV32ri 2, debug-location !42; c/idempotent_outline.c:33:12
  $esi = MOV32ri 5, debug-location !42; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !42; c/idempotent_outline.c:33:12
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !35; c/idempotent_outline.c:0 line no:32
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $r15, implicit-def dead $eflags, debug-location !42; c/idempotent_outline.c:33:12
  JMP_1 %bb.7, debug-location !43; c/idempotent_outline.c:33:3

bb.6 (%ir-block.17, bb_id 6):
; predecessors: %bb.7
  liveins: $rbx
  $edi = MOV32ri 2, debug-location !43; c/idempotent_outline.c:33:3
  $esi = MOV32ri 6, debug-location !43; c/idempotent_outline.c:33:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !43; c/idempotent_outline.c:33:3
  $rax = MOV64rr killed $rbx, debug-location !43; c/idempotent_outline.c:33:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !43; c/idempotent_outline.c:33:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !43; c/idempotent_outline.c:33:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !43; c/idempotent_outline.c:33:3
  RET64 implicit $rax, debug-location !43; c/idempotent_outline.c:33:3

bb.7 (%ir-block.18, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !43; c/idempotent_outline.c:33:3
  $edi = MOV32ri 2, debug-location !43; c/idempotent_outline.c:33:3
  $esi = MOV32ri 7, debug-location !43; c/idempotent_outline.c:33:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !43; c/idempotent_outline.c:33:3
  JMP_1 %bb.6, debug-location !43; c/idempotent_outline.c:33:3

# End machine code for function idem1.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 8, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !68; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 3, debug-location !69; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !69; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !69; c/idempotent_outline.c:37:14
  $r15 = MOV64rr $rax, debug-location !69; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !68; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !70; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r15, debug-location !70; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !71; c/idempotent_outline.c:39:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !72; c/idempotent_outline.c:39:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !73; c/idempotent_outline.c:39:20
  $rbx = MOV64rr $rax, debug-location !73; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !73; c/idempotent_outline.c:39:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !73 :: (store (s64) into %ir.5); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !68; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !75; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !75; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !75 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !80; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !68; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !82; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !82; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:43:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !82; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !84; c/idempotent_outline.c:44:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !84; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !84; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/idempotent_outline.c:44:10
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !84 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !86; c/idempotent_outline.c:44:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !86; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !86; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !86; c/idempotent_outline.c:44:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !87; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !87; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !87; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r15, debug-location !87; c/idempotent_outline.c:45:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !87; c/idempotent_outline.c:45:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !87 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !88; c/idempotent_outline.c:46:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !88; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/idempotent_outline.c:46:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $rbx, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !88; c/idempotent_outline.c:46:19
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !89; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !88; c/idempotent_outline.c:46:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  JMP_1 %bb.12, debug-location !89; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 3, debug-location !90; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !90; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !90; c/idempotent_outline.c:47:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !90 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !93 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  CALL64pcrel32 @idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !94; c/idempotent_outline.c:47:56
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !95; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !95; c/idempotent_outline.c:47:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !95; c/idempotent_outline.c:47:5
  $r13 = MOV64rr $rax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !95; c/idempotent_outline.c:47:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r12, debug-location !95; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !95; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r13, debug-location !95; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !96; c/idempotent_outline.c:48:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !96; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !96; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:48:6
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !96; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !96 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !86; c/idempotent_outline.c:44:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !100; c/idempotent_outline.c:50:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !100 :: (load (s64) from %ir.5); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !101; c/idempotent_outline.c:51:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 3, debug-location !101; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !101; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r15, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !101; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !102; c/idempotent_outline.c:53:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !102; c/idempotent_outline.c:53:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !103; c/idempotent_outline.c:52:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !103; c/idempotent_outline.c:52:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 3
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !103; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !103; c/idempotent_outline.c:52:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !103; c/idempotent_outline.c:52:3
  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !103; c/idempotent_outline.c:52:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 8, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !68; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 3, debug-location !69; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !69; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !69; c/idempotent_outline.c:37:14
  $r15 = MOV64rr $rax, debug-location !69; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !68; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !70; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r15, debug-location !70; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !71; c/idempotent_outline.c:39:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !72; c/idempotent_outline.c:39:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !73; c/idempotent_outline.c:39:20
  $rbx = MOV64rr $rax, debug-location !73; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !73; c/idempotent_outline.c:39:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !73 :: (store (s64) into %ir.5); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !68; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !75; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !75; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !75 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !80; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !68; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !82; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !82; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:43:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !82; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !84; c/idempotent_outline.c:44:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !84; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !84; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/idempotent_outline.c:44:10
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !84 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !86; c/idempotent_outline.c:44:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !86; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !86; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !86; c/idempotent_outline.c:44:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !87; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !87; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !87; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r15, debug-location !87; c/idempotent_outline.c:45:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !87; c/idempotent_outline.c:45:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !87 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !88; c/idempotent_outline.c:46:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !88; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/idempotent_outline.c:46:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $rbx, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !88; c/idempotent_outline.c:46:19
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !89; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !88; c/idempotent_outline.c:46:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  JMP_1 %bb.12, debug-location !89; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 3, debug-location !90; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !90; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !90; c/idempotent_outline.c:47:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !90 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !93 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  CALL64pcrel32 @idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !94; c/idempotent_outline.c:47:56
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !95; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !95; c/idempotent_outline.c:47:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !95; c/idempotent_outline.c:47:5
  $r13 = MOV64rr $rax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !95; c/idempotent_outline.c:47:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r12, debug-location !95; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !95; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r13, debug-location !95; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !96; c/idempotent_outline.c:48:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !96; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !96; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:48:6
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !96; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !96 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !86; c/idempotent_outline.c:44:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !100; c/idempotent_outline.c:50:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !100 :: (load (s64) from %ir.5); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !101; c/idempotent_outline.c:51:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 3, debug-location !101; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !101; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r15, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !101; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !102; c/idempotent_outline.c:53:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !102; c/idempotent_outline.c:53:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !103; c/idempotent_outline.c:52:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !103; c/idempotent_outline.c:52:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 3
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !103; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !103; c/idempotent_outline.c:52:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !103; c/idempotent_outline.c:52:3
  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !103; c/idempotent_outline.c:52:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 8, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !68; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 3, debug-location !69; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !69; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !69; c/idempotent_outline.c:37:14
  $r15 = MOV64rr $rax, debug-location !69; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !68; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !70; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r15, debug-location !70; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !71; c/idempotent_outline.c:39:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !72; c/idempotent_outline.c:39:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !73; c/idempotent_outline.c:39:20
  $rbx = MOV64rr $rax, debug-location !73; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !73; c/idempotent_outline.c:39:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !73 :: (store (s64) into %ir.5); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !68; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !75; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !75; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !75 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !80; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !68; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !82; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !82; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:43:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !82; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !84; c/idempotent_outline.c:44:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !84; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !84; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/idempotent_outline.c:44:10
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !84 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !86; c/idempotent_outline.c:44:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !86; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !86; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !86; c/idempotent_outline.c:44:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !87; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !87; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !87; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r15, debug-location !87; c/idempotent_outline.c:45:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !87; c/idempotent_outline.c:45:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !87 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !88; c/idempotent_outline.c:46:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !88; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/idempotent_outline.c:46:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $rbx, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !88; c/idempotent_outline.c:46:19
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !89; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !88; c/idempotent_outline.c:46:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  JMP_1 %bb.12, debug-location !89; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 3, debug-location !90; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !90; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !90; c/idempotent_outline.c:47:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !90 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !93 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  CALL64pcrel32 @idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !94; c/idempotent_outline.c:47:56
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !95; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !95; c/idempotent_outline.c:47:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !95; c/idempotent_outline.c:47:5
  $r13 = MOV64rr $rax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !95; c/idempotent_outline.c:47:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r12, debug-location !95; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !95; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r13, debug-location !95; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !96; c/idempotent_outline.c:48:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !96; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !96; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:48:6
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !96; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !96 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !86; c/idempotent_outline.c:44:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !100; c/idempotent_outline.c:50:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !100 :: (load (s64) from %ir.5); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !101; c/idempotent_outline.c:51:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 3, debug-location !101; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !101; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r15, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !101; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !102; c/idempotent_outline.c:53:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !102; c/idempotent_outline.c:53:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !103; c/idempotent_outline.c:52:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !103; c/idempotent_outline.c:52:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 3
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !103; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !103; c/idempotent_outline.c:52:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !103; c/idempotent_outline.c:52:3
  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !103; c/idempotent_outline.c:52:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 8, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !68; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 3, debug-location !69; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !69; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !69; c/idempotent_outline.c:37:14
  $r15 = MOV64rr $rax, debug-location !69; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !68; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !70; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r15, debug-location !70; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !71; c/idempotent_outline.c:39:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !72; c/idempotent_outline.c:39:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !73; c/idempotent_outline.c:39:20
  $rbx = MOV64rr $rax, debug-location !73; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !73; c/idempotent_outline.c:39:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !73 :: (store (s64) into %ir.5); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !68; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !75; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !75; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !75 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !80; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !68; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !82; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !82; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:43:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !82; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !84; c/idempotent_outline.c:44:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !84; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !84; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/idempotent_outline.c:44:10
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !84 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !86; c/idempotent_outline.c:44:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !86; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !86; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !86; c/idempotent_outline.c:44:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !87; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !87; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !87; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r15, debug-location !87; c/idempotent_outline.c:45:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !87; c/idempotent_outline.c:45:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !87 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !88; c/idempotent_outline.c:46:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !88; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/idempotent_outline.c:46:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $rbx, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !88; c/idempotent_outline.c:46:19
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !89; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !88; c/idempotent_outline.c:46:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  JMP_1 %bb.12, debug-location !89; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 3, debug-location !90; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !90; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !90; c/idempotent_outline.c:47:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !90 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !93 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  CALL64pcrel32 @idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !94; c/idempotent_outline.c:47:56
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !95; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !95; c/idempotent_outline.c:47:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !95; c/idempotent_outline.c:47:5
  $r13 = MOV64rr $rax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !95; c/idempotent_outline.c:47:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r12, debug-location !95; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !95; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r13, debug-location !95; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !96; c/idempotent_outline.c:48:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !96; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !96; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:48:6
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !96; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !96 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !86; c/idempotent_outline.c:44:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !100; c/idempotent_outline.c:50:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !100 :: (load (s64) from %ir.5); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !101; c/idempotent_outline.c:51:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 3, debug-location !101; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !101; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r15, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !101; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !102; c/idempotent_outline.c:53:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !102; c/idempotent_outline.c:53:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !103; c/idempotent_outline.c:52:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !103; c/idempotent_outline.c:52:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 3
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !103; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !103; c/idempotent_outline.c:52:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !103; c/idempotent_outline.c:52:3
  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !103; c/idempotent_outline.c:52:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: main
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  $edi = MOV32ri 1000000, implicit-def $rdi
  CALL64pcrel32 target-flags(x86-plt) @malloc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  $r14 = MOV64rr $rax
  $rax = MOV64rr $r14
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), 8, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  MOV64mr killed renamable $rcx, 1, $noreg, 0, $fs, killed renamable $rax :: (store (s64) into @shadowstack_0)
  JMP_1 %bb.1, debug-location !68; c/idempotent_outline.c:0

bb.1 (%ir-block.7, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $r14
  $edi = MOV32ri 3, debug-location !69; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !69; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !69; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !69; c/idempotent_outline.c:37:14
  $r15 = MOV64rr $rax, debug-location !69; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !68; c/idempotent_outline.c:0

bb.2 (%ir-block.9, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !70; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r15, debug-location !70; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !70; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !70; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !71; c/idempotent_outline.c:39:3

bb.3 (%ir-block.10, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !71; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !71; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !72; c/idempotent_outline.c:39:14

bb.4 (%ir-block.11, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !73; c/idempotent_outline.c:39:20
  $rbx = MOV64rr $rax, debug-location !73; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !73; c/idempotent_outline.c:39:20

bb.5 (%ir-block.13, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !73; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !73; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !73; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $rbx, debug-location !73 :: (store (s64) into %ir.5); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !68; c/idempotent_outline.c:0

bb.6 (%ir-block.14, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !75; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !75; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !75; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $r14, 1, $noreg, 0, $noreg, 4, debug-location !75 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !80; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !68; c/idempotent_outline.c:0

bb.7 (%ir-block.15, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $r14, $r15
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !82; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !82; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !82; c/idempotent_outline.c:43:3
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $r14, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !82; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !84; c/idempotent_outline.c:44:10

bb.8 (%ir-block.16, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $r14, $r15
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !84; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !84; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !84; c/idempotent_outline.c:44:10
  STACKMAP 6, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !84 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !86; c/idempotent_outline.c:44:3

bb.9 (%ir-block.19, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $r14, $r15
  DBG_VALUE $r15, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 3, debug-location !86; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !86; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !86; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r15 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !86; c/idempotent_outline.c:44:3

bb.10 (%ir-block.20, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !87; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !87; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !87; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !87; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r15, debug-location !87; c/idempotent_outline.c:45:5
  dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !87; c/idempotent_outline.c:45:5
  PATCHPOINT 0, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($r14, $r15, $r14b, $r15b, $r14bh, $r15bh, $r14d, $r15d, $r14w, $r15w, $r14wh, $r15wh), implicit-def dead early-clobber $r11, debug-location !87 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !88; c/idempotent_outline.c:46:19

bb.11 (%ir-block.21, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $r14, $r15
  $edi = MOV32ri 3, debug-location !88; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !88; c/idempotent_outline.c:46:19
  renamable $rbx = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !88 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $rbx, debug-location !88; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !88; c/idempotent_outline.c:46:19
  STACKMAP 7, 0, 0, $rbp, -48, 3, renamable $r14, 3, renamable $r15, 3, killed renamable $rbx, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !89; c/idempotent_outline.c:0
  $r13 = MOV64rr $rax, debug-location !88; c/idempotent_outline.c:46:19
  $rbx = MOV64rr killed $r15
  DBG_VALUE $rbx, $noreg, !"mt", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:37
  JMP_1 %bb.12, debug-location !89; c/idempotent_outline.c:0

bb.12 (%ir-block.24, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r13, $r14
  $edi = MOV32ri 3, debug-location !90; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !90; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !90; c/idempotent_outline.c:47:13
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  renamable $r12 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !90 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !93 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r13, debug-location !94; c/idempotent_outline.c:47:56
  CALL64pcrel32 @idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !94; c/idempotent_outline.c:47:56
  STACKMAP 8, 0, 0, $rbp, -48, 3, renamable $r14, 3, killed renamable $rbx, 3, killed renamable $r13, 3, renamable $r12, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !95; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !95; c/idempotent_outline.c:47:5

bb.13 (%ir-block.28, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"k", !DIExpression(), debug-location !89; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !95; c/idempotent_outline.c:47:5
  $r13 = MOV64rr $rax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !95; c/idempotent_outline.c:47:5

bb.14 (%ir-block.30, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $r12, $r13, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !95; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !95; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !95; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r12, debug-location !95; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !95; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r13, debug-location !95; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !95; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !95; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !96; c/idempotent_outline.c:48:6

bb.15 (%ir-block.32, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $r14
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 3, debug-location !96; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !96; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !96; c/idempotent_outline.c:48:6
  STACKMAP 9, 0, 0, $rbp, -48, 3, renamable $r14, 3, 1, 8, $rbp, -64, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !86; c/idempotent_outline.c:44:3
  renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg, debug-location !96 :: (load (s64) from %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !96; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !68; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $r14, 1, $noreg, 0, $noreg, renamable $rax, debug-location !96 :: (store (s64) into %ir.6, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !85; c/idempotent_outline.c:44:12
  renamable $r15 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !86; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !86; c/idempotent_outline.c:44:3

bb.16 (%ir-block.36, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !100; c/idempotent_outline.c:50:3

bb.17 (%ir-block.37, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r15
  $edi = MOV32ri 3, debug-location !100; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !100; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !100; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !100 :: (load (s64) from %ir.5); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !100; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !101; c/idempotent_outline.c:51:3

bb.18 (%ir-block.39, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r15
  $edi = MOV32ri 3, debug-location !101; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !101; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r15, debug-location !101; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !101; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !102; c/idempotent_outline.c:53:1

bb.19 (%ir-block.40, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !102; c/idempotent_outline.c:53:1

bb.20 (%ir-block.41, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 3, debug-location !102; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !102; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !102; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !103; c/idempotent_outline.c:52:3

bb.21 (%ir-block.42, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !103; c/idempotent_outline.c:52:3

bb.22 (%ir-block.43, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $r14, $r15
  $edi = MOV32ri 3
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.44, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !103; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !103; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !103; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !103; c/idempotent_outline.c:52:3

bb.24 (%ir-block.45, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !103; c/idempotent_outline.c:52:3
  $edi = MOV32ri 3, debug-location !103; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !103; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock_dummy, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !103; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !103; c/idempotent_outline.c:52:3

# End machine code for function main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_idem1
# Machine code for function __yk_unopt_idem1: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14 = MOV64rr $rdi
  $edi = MOV32ri 16, debug-location !209; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !209; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !209; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !209; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r14
  $edi = MOV32ri 16, debug-location !210; c/idempotent_outline.c:31:25
  $esi = MOV32ri 1, debug-location !210; c/idempotent_outline.c:31:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !210; c/idempotent_outline.c:31:25
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  $r12 = MOV64rr $r14, debug-location !210; c/idempotent_outline.c:31:25
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 1, implicit-def dead $eflags, debug-location !210; c/idempotent_outline.c:31:25
  $r13 = MOV64rr $rbx, debug-location !211; c/idempotent_outline.c:31:32
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 1, implicit-def dead $eflags, debug-location !211; c/idempotent_outline.c:31:32
  $rdi = MOV64rr $r12, debug-location !212; c/idempotent_outline.c:31:17
  $rsi = MOV64rr $r13, debug-location !212; c/idempotent_outline.c:31:17
  CALL64pcrel32 @__yk_unopt_idem2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !212; c/idempotent_outline.c:31:17
  STACKMAP 11, 0, renamable $r14, 3, renamable $rbx, 3, killed renamable $r12, 3, killed renamable $r13, 3, implicit-def dead early-clobber $r11, debug-location !213; c/idempotent_outline.c:32:25
  $r15 = MOV64rr $rax, debug-location !212; c/idempotent_outline.c:31:17
  JMP_1 %bb.2, debug-location !213; c/idempotent_outline.c:32:25

bb.2 (%ir-block.7, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  $edi = MOV32ri 16, debug-location !213; c/idempotent_outline.c:32:25
  $esi = MOV32ri 2, debug-location !213; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !213; c/idempotent_outline.c:32:25
  $rdi = MOV64rr killed $r15, debug-location !213; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !213; c/idempotent_outline.c:32:25
  $r15 = MOV64rr $rax, debug-location !213; c/idempotent_outline.c:32:25
  JMP_1 %bb.3, debug-location !209; c/idempotent_outline.c:0

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  $edi = MOV32ri 16, debug-location !213; c/idempotent_outline.c:32:25
  $esi = MOV32ri 3, debug-location !213; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !213; c/idempotent_outline.c:32:25
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:31
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 5, implicit-def dead $eflags, debug-location !213; c/idempotent_outline.c:32:25
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 5, implicit-def dead $eflags, debug-location !214; c/idempotent_outline.c:32:32
  $rdi = MOV64rr $rbx, debug-location !215; c/idempotent_outline.c:32:17
  $rsi = MOV64rr $r14, debug-location !215; c/idempotent_outline.c:32:17
  CALL64pcrel32 @__yk_unopt_idem2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !215; c/idempotent_outline.c:32:17
  STACKMAP 10, 0, renamable $r15, 3, killed renamable $rbx, 3, killed renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !216; c/idempotent_outline.c:33:12
  $r12 = MOV64rr $rax, debug-location !215; c/idempotent_outline.c:32:17
  JMP_1 %bb.4, debug-location !216; c/idempotent_outline.c:33:12

bb.4 (%ir-block.13, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12, $r15
  $edi = MOV32ri 16, debug-location !216; c/idempotent_outline.c:33:12
  $esi = MOV32ri 4, debug-location !216; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !216; c/idempotent_outline.c:33:12
  $rdi = MOV64rr killed $r12, debug-location !216; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !216; c/idempotent_outline.c:33:12
  $rbx = MOV64rr $rax, debug-location !216; c/idempotent_outline.c:33:12
  JMP_1 %bb.5, debug-location !209; c/idempotent_outline.c:0

bb.5 (%ir-block.15, bb_id 5):
; predecessors: %bb.4
  successors: %bb.7
  liveins: $rbx, $r15
  $edi = MOV32ri 16, debug-location !216; c/idempotent_outline.c:33:12
  $esi = MOV32ri 5, debug-location !216; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !216; c/idempotent_outline.c:33:12
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:32
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $r15, implicit-def dead $eflags, debug-location !216; c/idempotent_outline.c:33:12
  JMP_1 %bb.7, debug-location !217; c/idempotent_outline.c:33:3

bb.6 (%ir-block.17, bb_id 6):
; predecessors: %bb.7
  liveins: $rbx
  $edi = MOV32ri 16, debug-location !217; c/idempotent_outline.c:33:3
  $esi = MOV32ri 6, debug-location !217; c/idempotent_outline.c:33:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !217; c/idempotent_outline.c:33:3
  $rax = MOV64rr killed $rbx, debug-location !217; c/idempotent_outline.c:33:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !217; c/idempotent_outline.c:33:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !217; c/idempotent_outline.c:33:3
  RET64 implicit $rax, debug-location !217; c/idempotent_outline.c:33:3

bb.7 (%ir-block.18, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !217; c/idempotent_outline.c:33:3
  $edi = MOV32ri 16, debug-location !217; c/idempotent_outline.c:33:3
  $esi = MOV32ri 7, debug-location !217; c/idempotent_outline.c:33:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !217; c/idempotent_outline.c:33:3
  JMP_1 %bb.6, debug-location !217; c/idempotent_outline.c:33:3

# End machine code for function __yk_unopt_idem1.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_idem1
# Machine code for function __yk_unopt_idem1: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
Function Live Ins: $rdi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $rdi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  $rbx = MOV64rr $rsi
  $r14 = MOV64rr $rdi
  $edi = MOV32ri 16, debug-location !209; c/idempotent_outline.c:0
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !209; c/idempotent_outline.c:0
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !209; c/idempotent_outline.c:0
  JMP_1 %bb.1, debug-location !209; c/idempotent_outline.c:0

bb.1 (%ir-block.3, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx, $r14
  $edi = MOV32ri 16, debug-location !210; c/idempotent_outline.c:31:25
  $esi = MOV32ri 1, debug-location !210; c/idempotent_outline.c:31:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !210; c/idempotent_outline.c:31:25
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  $r12 = MOV64rr $r14, debug-location !210; c/idempotent_outline.c:31:25
  renamable $r12 = ADD64ri32 killed renamable $r12(tied-def 0), 1, implicit-def dead $eflags, debug-location !210; c/idempotent_outline.c:31:25
  $r13 = MOV64rr $rbx, debug-location !211; c/idempotent_outline.c:31:32
  renamable $r13 = ADD64ri32 killed renamable $r13(tied-def 0), 1, implicit-def dead $eflags, debug-location !211; c/idempotent_outline.c:31:32
  $rdi = MOV64rr $r12, debug-location !212; c/idempotent_outline.c:31:17
  $rsi = MOV64rr $r13, debug-location !212; c/idempotent_outline.c:31:17
  CALL64pcrel32 @__yk_unopt_idem2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !212; c/idempotent_outline.c:31:17
  STACKMAP 11, 0, renamable $r14, 3, renamable $rbx, 3, killed renamable $r12, 3, killed renamable $r13, 3, implicit-def dead early-clobber $r11, debug-location !213; c/idempotent_outline.c:32:25
  $r15 = MOV64rr $rax, debug-location !212; c/idempotent_outline.c:31:17
  JMP_1 %bb.2, debug-location !213; c/idempotent_outline.c:32:25

bb.2 (%ir-block.7, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  $edi = MOV32ri 16, debug-location !213; c/idempotent_outline.c:32:25
  $esi = MOV32ri 2, debug-location !213; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !213; c/idempotent_outline.c:32:25
  $rdi = MOV64rr killed $r15, debug-location !213; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !213; c/idempotent_outline.c:32:25
  $r15 = MOV64rr $rax, debug-location !213; c/idempotent_outline.c:32:25
  JMP_1 %bb.3, debug-location !209; c/idempotent_outline.c:0

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r14, $noreg, !"x", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  DBG_VALUE $rbx, $noreg, !"y", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:29
  $edi = MOV32ri 16, debug-location !213; c/idempotent_outline.c:32:25
  $esi = MOV32ri 3, debug-location !213; c/idempotent_outline.c:32:25
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !213; c/idempotent_outline.c:32:25
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:31
  renamable $rbx = ADD64ri32 killed renamable $rbx(tied-def 0), 5, implicit-def dead $eflags, debug-location !213; c/idempotent_outline.c:32:25
  renamable $r14 = ADD64ri32 killed renamable $r14(tied-def 0), 5, implicit-def dead $eflags, debug-location !214; c/idempotent_outline.c:32:32
  $rdi = MOV64rr $rbx, debug-location !215; c/idempotent_outline.c:32:17
  $rsi = MOV64rr $r14, debug-location !215; c/idempotent_outline.c:32:17
  CALL64pcrel32 @__yk_unopt_idem2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !215; c/idempotent_outline.c:32:17
  STACKMAP 10, 0, renamable $r15, 3, killed renamable $rbx, 3, killed renamable $r14, 3, implicit-def dead early-clobber $r11, debug-location !216; c/idempotent_outline.c:33:12
  $r12 = MOV64rr $rax, debug-location !215; c/idempotent_outline.c:32:17
  JMP_1 %bb.4, debug-location !216; c/idempotent_outline.c:33:12

bb.4 (%ir-block.13, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $r12, $r15
  $edi = MOV32ri 16, debug-location !216; c/idempotent_outline.c:33:12
  $esi = MOV32ri 4, debug-location !216; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !216; c/idempotent_outline.c:33:12
  $rdi = MOV64rr killed $r12, debug-location !216; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !216; c/idempotent_outline.c:33:12
  $rbx = MOV64rr $rax, debug-location !216; c/idempotent_outline.c:33:12
  JMP_1 %bb.5, debug-location !209; c/idempotent_outline.c:0

bb.5 (%ir-block.15, bb_id 5):
; predecessors: %bb.4
  successors: %bb.7
  liveins: $rbx, $r15
  $edi = MOV32ri 16, debug-location !216; c/idempotent_outline.c:33:12
  $esi = MOV32ri 5, debug-location !216; c/idempotent_outline.c:33:12
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !216; c/idempotent_outline.c:33:12
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !209; c/idempotent_outline.c:0 line no:32
  renamable $rbx = ADD64rr killed renamable $rbx(tied-def 0), killed renamable $r15, implicit-def dead $eflags, debug-location !216; c/idempotent_outline.c:33:12
  JMP_1 %bb.7, debug-location !217; c/idempotent_outline.c:33:3

bb.6 (%ir-block.17, bb_id 6):
; predecessors: %bb.7
  liveins: $rbx
  $edi = MOV32ri 16, debug-location !217; c/idempotent_outline.c:33:3
  $esi = MOV32ri 6, debug-location !217; c/idempotent_outline.c:33:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !217; c/idempotent_outline.c:33:3
  $rax = MOV64rr killed $rbx, debug-location !217; c/idempotent_outline.c:33:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 8, implicit-def dead $eflags, debug-location !217; c/idempotent_outline.c:33:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !217; c/idempotent_outline.c:33:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !217; c/idempotent_outline.c:33:3
  RET64 implicit $rax, debug-location !217; c/idempotent_outline.c:33:3

bb.7 (%ir-block.18, bb_id 7):
; predecessors: %bb.5
  successors: %bb.6
  liveins: $rbx
  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !217; c/idempotent_outline.c:33:3
  $edi = MOV32ri 16, debug-location !217; c/idempotent_outline.c:33:3
  $esi = MOV32ri 7, debug-location !217; c/idempotent_outline.c:33:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !217; c/idempotent_outline.c:33:3
  JMP_1 %bb.6, debug-location !217; c/idempotent_outline.c:33:3

# End machine code for function __yk_unopt_idem1.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 17
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !227; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !228; c/idempotent_outline.c:37:14
  $r13 = MOV64rr $rax, debug-location !228; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !227; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !229; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r13, debug-location !229; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !230; c/idempotent_outline.c:39:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !230; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !230; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !231; c/idempotent_outline.c:39:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !232; c/idempotent_outline.c:39:20
  $r14 = MOV64rr $rax, debug-location !232; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !232; c/idempotent_outline.c:39:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !232 :: (store (s64) into %ir.4); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !227; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !234; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !234; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !234; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !234 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !235; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !227; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !236; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !236; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !236; c/idempotent_outline.c:43:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !236; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !237; c/idempotent_outline.c:44:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !237; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !237; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !237; c/idempotent_outline.c:44:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !237 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !239; c/idempotent_outline.c:44:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !239; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !239; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !239; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !239; c/idempotent_outline.c:44:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !240; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !240; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !240; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !240; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r13, debug-location !240; c/idempotent_outline.c:45:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !240; c/idempotent_outline.c:45:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !240 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !241; c/idempotent_outline.c:46:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !241; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !241; c/idempotent_outline.c:46:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !241 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r14, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !241; c/idempotent_outline.c:46:19
  STACKMAP 12, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !242; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !241; c/idempotent_outline.c:46:19
  JMP_1 %bb.12, debug-location !242; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !243; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !243; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !243; c/idempotent_outline.c:47:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !243 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !244 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  CALL64pcrel32 @__yk_unopt_idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !245; c/idempotent_outline.c:47:56
  STACKMAP 13, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !246; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !246; c/idempotent_outline.c:47:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:47:5
  $r12 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !246; c/idempotent_outline.c:47:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r14, debug-location !246; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !246; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r12, debug-location !246; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !247; c/idempotent_outline.c:48:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !247; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !247; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:48:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !247 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !247 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !239; c/idempotent_outline.c:44:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !250; c/idempotent_outline.c:50:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !250 :: (load (s64) from %ir.4); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !251; c/idempotent_outline.c:51:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 17, debug-location !251; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !251; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r13, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !251; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !252; c/idempotent_outline.c:53:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !252; c/idempotent_outline.c:53:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !253; c/idempotent_outline.c:52:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !253; c/idempotent_outline.c:52:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 17
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !253; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !253; c/idempotent_outline.c:52:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !253; c/idempotent_outline.c:52:3
  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !253; c/idempotent_outline.c:52:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 17
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !227; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !228; c/idempotent_outline.c:37:14
  $r13 = MOV64rr $rax, debug-location !228; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !227; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !229; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r13, debug-location !229; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !230; c/idempotent_outline.c:39:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !230; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !230; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !231; c/idempotent_outline.c:39:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !232; c/idempotent_outline.c:39:20
  $r14 = MOV64rr $rax, debug-location !232; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !232; c/idempotent_outline.c:39:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !232 :: (store (s64) into %ir.4); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !227; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !234; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !234; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !234; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !234 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !235; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !227; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !236; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !236; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !236; c/idempotent_outline.c:43:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !236; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !237; c/idempotent_outline.c:44:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !237; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !237; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !237; c/idempotent_outline.c:44:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !237 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !239; c/idempotent_outline.c:44:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !239; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !239; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !239; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !239; c/idempotent_outline.c:44:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !240; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !240; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !240; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !240; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r13, debug-location !240; c/idempotent_outline.c:45:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !240; c/idempotent_outline.c:45:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !240 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !241; c/idempotent_outline.c:46:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !241; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !241; c/idempotent_outline.c:46:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !241 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r14, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !241; c/idempotent_outline.c:46:19
  STACKMAP 12, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !242; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !241; c/idempotent_outline.c:46:19
  JMP_1 %bb.12, debug-location !242; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !243; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !243; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !243; c/idempotent_outline.c:47:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !243 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !244 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  CALL64pcrel32 @__yk_unopt_idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !245; c/idempotent_outline.c:47:56
  STACKMAP 13, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !246; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !246; c/idempotent_outline.c:47:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:47:5
  $r12 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !246; c/idempotent_outline.c:47:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r14, debug-location !246; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !246; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r12, debug-location !246; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !247; c/idempotent_outline.c:48:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !247; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !247; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:48:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !247 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !247 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !239; c/idempotent_outline.c:44:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !250; c/idempotent_outline.c:50:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !250 :: (load (s64) from %ir.4); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !251; c/idempotent_outline.c:51:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 17, debug-location !251; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !251; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r13, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !251; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !252; c/idempotent_outline.c:53:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !252; c/idempotent_outline.c:53:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !253; c/idempotent_outline.c:52:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !253; c/idempotent_outline.c:52:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 17
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !253; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !253; c/idempotent_outline.c:52:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !253; c/idempotent_outline.c:52:3
  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !253; c/idempotent_outline.c:52:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 17
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !227; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !228; c/idempotent_outline.c:37:14
  $r13 = MOV64rr $rax, debug-location !228; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !227; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !229; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r13, debug-location !229; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !230; c/idempotent_outline.c:39:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !230; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !230; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !231; c/idempotent_outline.c:39:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !232; c/idempotent_outline.c:39:20
  $r14 = MOV64rr $rax, debug-location !232; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !232; c/idempotent_outline.c:39:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !232 :: (store (s64) into %ir.4); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !227; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !234; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !234; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !234; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !234 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !235; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !227; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !236; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !236; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !236; c/idempotent_outline.c:43:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !236; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !237; c/idempotent_outline.c:44:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !237; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !237; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !237; c/idempotent_outline.c:44:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !237 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !239; c/idempotent_outline.c:44:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !239; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !239; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !239; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !239; c/idempotent_outline.c:44:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !240; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !240; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !240; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !240; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r13, debug-location !240; c/idempotent_outline.c:45:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !240; c/idempotent_outline.c:45:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !240 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !241; c/idempotent_outline.c:46:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !241; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !241; c/idempotent_outline.c:46:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !241 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r14, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !241; c/idempotent_outline.c:46:19
  STACKMAP 12, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !242; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !241; c/idempotent_outline.c:46:19
  JMP_1 %bb.12, debug-location !242; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !243; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !243; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !243; c/idempotent_outline.c:47:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !243 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !244 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  CALL64pcrel32 @__yk_unopt_idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !245; c/idempotent_outline.c:47:56
  STACKMAP 13, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !246; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !246; c/idempotent_outline.c:47:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:47:5
  $r12 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !246; c/idempotent_outline.c:47:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r14, debug-location !246; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !246; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r12, debug-location !246; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !247; c/idempotent_outline.c:48:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !247; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !247; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:48:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !247 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !247 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !239; c/idempotent_outline.c:44:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !250; c/idempotent_outline.c:50:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !250 :: (load (s64) from %ir.4); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !251; c/idempotent_outline.c:51:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 17, debug-location !251; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !251; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r13, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !251; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !252; c/idempotent_outline.c:53:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !252; c/idempotent_outline.c:53:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !253; c/idempotent_outline.c:52:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !253; c/idempotent_outline.c:52:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 17
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !253; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !253; c/idempotent_outline.c:52:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !253; c/idempotent_outline.c:52:3
  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !253; c/idempotent_outline.c:52:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 17
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !227; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !228; c/idempotent_outline.c:37:14
  $r13 = MOV64rr $rax, debug-location !228; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !227; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !229; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r13, debug-location !229; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !230; c/idempotent_outline.c:39:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !230; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !230; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !231; c/idempotent_outline.c:39:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !232; c/idempotent_outline.c:39:20
  $r14 = MOV64rr $rax, debug-location !232; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !232; c/idempotent_outline.c:39:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !232 :: (store (s64) into %ir.4); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !227; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !234; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !234; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !234; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !234 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !235; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !227; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !236; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !236; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !236; c/idempotent_outline.c:43:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !236; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !237; c/idempotent_outline.c:44:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !237; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !237; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !237; c/idempotent_outline.c:44:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !237 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !239; c/idempotent_outline.c:44:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !239; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !239; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !239; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !239; c/idempotent_outline.c:44:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !240; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !240; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !240; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !240; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r13, debug-location !240; c/idempotent_outline.c:45:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !240; c/idempotent_outline.c:45:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !240 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !241; c/idempotent_outline.c:46:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !241; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !241; c/idempotent_outline.c:46:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !241 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r14, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !241; c/idempotent_outline.c:46:19
  STACKMAP 12, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !242; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !241; c/idempotent_outline.c:46:19
  JMP_1 %bb.12, debug-location !242; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !243; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !243; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !243; c/idempotent_outline.c:47:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !243 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !244 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  CALL64pcrel32 @__yk_unopt_idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !245; c/idempotent_outline.c:47:56
  STACKMAP 13, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !246; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !246; c/idempotent_outline.c:47:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:47:5
  $r12 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !246; c/idempotent_outline.c:47:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r14, debug-location !246; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !246; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r12, debug-location !246; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !247; c/idempotent_outline.c:48:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !247; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !247; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:48:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !247 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !247 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !239; c/idempotent_outline.c:44:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !250; c/idempotent_outline.c:50:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !250 :: (load (s64) from %ir.4); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !251; c/idempotent_outline.c:51:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 17, debug-location !251; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !251; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r13, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !251; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !252; c/idempotent_outline.c:53:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !252; c/idempotent_outline.c:53:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !253; c/idempotent_outline.c:52:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !253; c/idempotent_outline.c:52:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 17
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !253; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !253; c/idempotent_outline.c:52:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !253; c/idempotent_outline.c:52:3
  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !253; c/idempotent_outline.c:52:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
********** Machine Code when processing stackmap **********
Function: __yk_unopt_main
# Machine code for function __yk_unopt_main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP-48]
  fi#-5: size=8, align=16, fixed, at location [SP-40]
  fi#-4: size=8, align=8, fixed, at location [SP-32]
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-56]
  fi#1: size=8, align=8, at location [SP-72]
  fi#2: size=8, align=8, at location [SP-64]
Function Live Ins: $edi, $rsi

bb.0 (%ir-block.2, bb_id 0):
  successors: %bb.1
  liveins: $edi, $rsi, $r15, $r14, $r13, $r12, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags
  CFI_INSTRUCTION offset $rbx, -56
  CFI_INSTRUCTION offset $r12, -48
  CFI_INSTRUCTION offset $r13, -40
  CFI_INSTRUCTION offset $r14, -32
  CFI_INSTRUCTION offset $r15, -24
  KILL $rsi
  KILL $edi
  $edi = MOV32ri 17
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rsp, implicit-def $ssp
  renamable $rax = MOV64rm $rip, 1, $noreg, target-flags(x86-gottpoff) @shadowstack_0, $noreg :: (load (s64) from got)
  renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 0, $fs :: (dereferenceable load (s64) from @shadowstack_0)
  JMP_1 %bb.1, debug-location !227; c/idempotent_outline.c:0

bb.1 (%ir-block.6, bb_id 1):
; predecessors: %bb.0
  successors: %bb.2
  liveins: $rbx
  $edi = MOV32ri 17, debug-location !228; c/idempotent_outline.c:37:14
  $esi = MOV32ri 1, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !228; c/idempotent_outline.c:37:14
  DBG_VALUE $noreg, $noreg, !"argv", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  DBG_VALUE $noreg, $noreg, !"argc", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:36
  dead $edi = XOR32rr undef $edi(tied-def 0), undef $edi, implicit-def dead $eflags, implicit-def $rdi, debug-location !228; c/idempotent_outline.c:37:14
  CALL64pcrel32 @yk_mt_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !228; c/idempotent_outline.c:37:14
  $r13 = MOV64rr $rax, debug-location !228; c/idempotent_outline.c:37:14
  JMP_1 %bb.2, debug-location !227; c/idempotent_outline.c:0

bb.2 (%ir-block.8, bb_id 2):
; predecessors: %bb.1
  successors: %bb.3
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !229; c/idempotent_outline.c:38:3
  $esi = MOV32ri 2, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $rdi = MOV64rr $r13, debug-location !229; c/idempotent_outline.c:38:3
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags, debug-location !229; c/idempotent_outline.c:38:3
  CALL64pcrel32 @yk_mt_hot_threshold_set, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, debug-location !229; c/idempotent_outline.c:38:3
  JMP_1 %bb.3, debug-location !230; c/idempotent_outline.c:39:3

bb.3 (%ir-block.9, bb_id 3):
; predecessors: %bb.2
  successors: %bb.4
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !230; c/idempotent_outline.c:39:3
  $esi = MOV32ri 3, debug-location !230; c/idempotent_outline.c:39:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !230; c/idempotent_outline.c:39:3
  JMP_1 %bb.4, debug-location !231; c/idempotent_outline.c:39:14

bb.4 (%ir-block.10, bb_id 4):
; predecessors: %bb.3
  successors: %bb.5
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 4, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 @yk_location_new, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rax, debug-location !232; c/idempotent_outline.c:39:20
  $r14 = MOV64rr $rax, debug-location !232; c/idempotent_outline.c:39:20
  JMP_1 %bb.5, debug-location !232; c/idempotent_outline.c:39:20

bb.5 (%ir-block.12, bb_id 5):
; predecessors: %bb.4
  successors: %bb.6
  liveins: $rbx, $r13, $r14
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !232; c/idempotent_outline.c:39:20
  $esi = MOV32ri 5, debug-location !232; c/idempotent_outline.c:39:20
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !232; c/idempotent_outline.c:39:20
  MOV64mr $rbp, 1, $noreg, -48, $noreg, killed renamable $r14, debug-location !232 :: (store (s64) into %ir.4); c/idempotent_outline.c:39:20
  JMP_1 %bb.6, debug-location !227; c/idempotent_outline.c:0

bb.6 (%ir-block.13, bb_id 6):
; predecessors: %bb.5
  successors: %bb.7
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !234; c/idempotent_outline.c:41:10
  $esi = MOV32ri 6, debug-location !234; c/idempotent_outline.c:41:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !234; c/idempotent_outline.c:41:10
  DBG_VALUE 4, 0, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mi32 renamable $rbx, 1, $noreg, 0, $noreg, 4, debug-location !234 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:41:10
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], $rbp, 1, $noreg, -48, $noreg, $1:[mem:m], $rbp, 1, $noreg, -48, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !81, debug-location !235; c/idempotent_outline.c:42:3
  JMP_1 %bb.7, debug-location !227; c/idempotent_outline.c:0

bb.7 (%ir-block.14, bb_id 7):
; predecessors: %bb.6
  successors: %bb.8
  liveins: $rbx, $r13
  DBG_VALUE 4, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !236; c/idempotent_outline.c:43:3
  $esi = MOV32ri 7, debug-location !236; c/idempotent_outline.c:43:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !236; c/idempotent_outline.c:43:3
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  INLINEASM &"" [sideeffect] [mayload] [maystore] [attdialect], $0:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $1:[mem:m], renamable $rbx, 1, $noreg, 0, $noreg, $2:[clobber], implicit-def dead early-clobber $df, $3:[clobber], implicit-def early-clobber $fpsw, $4:[clobber], implicit-def dead early-clobber $eflags, !83, debug-location !236; c/idempotent_outline.c:43:3
  JMP_1 %bb.8, debug-location !237; c/idempotent_outline.c:44:10

bb.8 (%ir-block.15, bb_id 8):
; predecessors: %bb.7
  successors: %bb.17, %bb.9
  liveins: $rbx, $r13
  DBG_VALUE $rbx, $noreg, !"i", !DIExpression(DW_OP_deref), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !237; c/idempotent_outline.c:44:10
  $esi = MOV32ri 8, debug-location !237; c/idempotent_outline.c:44:10
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !237; c/idempotent_outline.c:44:10
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !237 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:44:10
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  STACKMAP 3, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.17, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.9, debug-location !239; c/idempotent_outline.c:44:3

bb.9 (%ir-block.18, bb_id 9):
; predecessors: %bb.8
  successors: %bb.10
  liveins: $rbx, $r13
  DBG_VALUE $r13, $noreg, !"mt", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:37
  $edi = MOV32ri 17, debug-location !239; c/idempotent_outline.c:44:3
  $esi = MOV32ri 9, debug-location !239; c/idempotent_outline.c:44:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !239; c/idempotent_outline.c:44:3
  MOV64mr $rbp, 1, $noreg, -64, $noreg, renamable $r13 :: (store (s64) into %stack.1)
  JMP_1 %bb.10, debug-location !239; c/idempotent_outline.c:44:3

bb.10 (%ir-block.19, bb_id 10):
; predecessors: %bb.9, %bb.22
  successors: %bb.11
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !240; c/idempotent_outline.c:45:5
  $esi = MOV32ri 10, debug-location !240; c/idempotent_outline.c:45:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !240; c/idempotent_outline.c:45:5
  renamable $rsi = LEA64r $rbp, 1, $noreg, -48, $noreg, debug-location !240; c/idempotent_outline.c:45:5
  $rdi = MOV64rr $r13, debug-location !240; c/idempotent_outline.c:45:5
  $edx = MOV32ri 1, implicit-def $rdx, debug-location !240; c/idempotent_outline.c:45:5
  PATCHPOINT 1, 13, @__ykrt_control_point, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, liveout($bh, $bl, $bx, $ebx, $hbx, $rbx, $r13, $r13b, $r13bh, $r13d, $r13w, $r13wh), implicit-def dead early-clobber $r11, debug-location !240 :: (load (s64) from %stack.0); c/idempotent_outline.c:45:5
  JMP_1 %bb.11, debug-location !241; c/idempotent_outline.c:46:19

bb.11 (%ir-block.20, bb_id 11):
; predecessors: %bb.10
  successors: %bb.12
  liveins: $rbx, $r13
  $edi = MOV32ri 17, debug-location !241; c/idempotent_outline.c:46:19
  $esi = MOV32ri 11, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !241; c/idempotent_outline.c:46:19
  renamable $r14 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !241 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:46:19
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r14, debug-location !241; c/idempotent_outline.c:46:19
  CALL64pcrel32 @__yk_promote_usize, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !241; c/idempotent_outline.c:46:19
  STACKMAP 12, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, killed renamable $r14, 3, $rax, 3, implicit-def dead early-clobber $r11, debug-location !242; c/idempotent_outline.c:0
  $r12 = MOV64rr $rax, debug-location !241; c/idempotent_outline.c:46:19
  JMP_1 %bb.12, debug-location !242; c/idempotent_outline.c:0

bb.12 (%ir-block.23, bb_id 12):
; predecessors: %bb.11
  successors: %bb.13
  liveins: $rbx, $r12, $r13
  DBG_VALUE $r14, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !243; c/idempotent_outline.c:47:13
  $esi = MOV32ri 12, debug-location !243; c/idempotent_outline.c:47:13
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !243; c/idempotent_outline.c:47:13
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  renamable $r14 = MOV64rm $noreg, 1, $noreg, @stderr, $noreg, debug-location !243 :: (load (s64) from @stderr, !tbaa !91); c/idempotent_outline.c:47:13
  renamable $r15 = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !244 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:47:53
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $rdi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  $rsi = MOV64rr $r12, debug-location !245; c/idempotent_outline.c:47:56
  CALL64pcrel32 @__yk_unopt_idem1, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax, debug-location !245; c/idempotent_outline.c:47:56
  STACKMAP 13, 0, 0, $rbp, -48, 3, renamable $rbx, 3, killed renamable $r13, 3, killed renamable $r12, 3, renamable $r14, 3, renamable $r15, 3, implicit-def dead early-clobber $r11, debug-location !246; c/idempotent_outline.c:47:5
  MOV64mr $rbp, 1, $noreg, -56, $noreg, $rax :: (store (s64) into %stack.2)
  JMP_1 %bb.13, debug-location !246; c/idempotent_outline.c:47:5

bb.13 (%ir-block.27, bb_id 13):
; predecessors: %bb.12
  successors: %bb.14
  liveins: $rbx, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  DBG_VALUE $r12, $noreg, !"k", !DIExpression(), debug-location !242; c/idempotent_outline.c:0 line no:46
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 13, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rm $rbp, 1, $noreg, -56, $noreg :: (load (s64) from %stack.2)
  CALL64pcrel32 target-flags(x86-plt) @__yk_idempotent_promote_i64, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, debug-location !246; c/idempotent_outline.c:47:5
  $r12 = MOV64rr $rax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.14, debug-location !246; c/idempotent_outline.c:47:5

bb.14 (%ir-block.29, bb_id 14):
; predecessors: %bb.13
  successors: %bb.15
  liveins: $rbx, $r12, $r14, $r15
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !246; c/idempotent_outline.c:47:5
  $esi = MOV32ri 14, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !246; c/idempotent_outline.c:47:5
  renamable $rsi = MOV64ri @.str, debug-location !246; c/idempotent_outline.c:47:5
  $rdi = MOV64rr killed $r14, debug-location !246; c/idempotent_outline.c:47:5
  $rdx = MOV64rr killed $r15, debug-location !246; c/idempotent_outline.c:47:5
  $rcx = MOV64rr killed $r12, debug-location !246; c/idempotent_outline.c:47:5
  $al = MOV8ri 0, debug-location !246; c/idempotent_outline.c:47:5
  CALL64pcrel32 @fprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $eax, debug-location !246; c/idempotent_outline.c:47:5
  JMP_1 %bb.15, debug-location !247; c/idempotent_outline.c:48:6

bb.15 (%ir-block.31, bb_id 15):
; predecessors: %bb.14
  successors: %bb.16, %bb.22
  liveins: $rbx
  DBG_VALUE $r15, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  $edi = MOV32ri 17, debug-location !247; c/idempotent_outline.c:48:6
  $esi = MOV32ri 15, debug-location !247; c/idempotent_outline.c:48:6
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !247; c/idempotent_outline.c:48:6
  renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg, debug-location !247 :: (load (s64) from %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  renamable $rax = ADD64ri32 killed renamable $rax(tied-def 0), -1, implicit-def dead $eflags, debug-location !247; c/idempotent_outline.c:48:6
  DBG_VALUE $rax, $noreg, !"i", !DIExpression(), debug-location !227; c/idempotent_outline.c:0 line no:41
  MOV64mr renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax, debug-location !247 :: (store (s64) into %ir.5, !tbaa !76); c/idempotent_outline.c:48:6
  CMP64ri32 killed renamable $rax, 0, implicit-def $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $al = SETCCr 4, implicit killed $eflags, debug-location !238; c/idempotent_outline.c:44:12
  renamable $r13 = MOV64rm $rbp, 1, $noreg, -64, $noreg :: (load (s64) from %stack.1)
  STACKMAP 2, 0, 0, $rbp, -48, 3, renamable $rbx, 3, renamable $r13, 3, renamable $al, 3, implicit-def dead early-clobber $r11, debug-location !239 :: (load (s64) from %stack.0); c/idempotent_outline.c:44:3
  TEST8ri killed renamable $al, 1, implicit-def $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JCC_1 %bb.16, 5, implicit killed $eflags, debug-location !239; c/idempotent_outline.c:44:3
  JMP_1 %bb.22, debug-location !239; c/idempotent_outline.c:44:3

bb.16 (%ir-block.35, bb_id 16):
; predecessors: %bb.15
  successors: %bb.17
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 16, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.17, debug-location !250; c/idempotent_outline.c:50:3

bb.17 (%ir-block.36, bb_id 17):
; predecessors: %bb.8, %bb.16
  successors: %bb.18
  liveins: $r13
  $edi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  $esi = MOV32ri 17, debug-location !250; c/idempotent_outline.c:50:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !250; c/idempotent_outline.c:50:3
  renamable $rdi = MOV64rm $rbp, 1, $noreg, -48, $noreg, debug-location !250 :: (load (s64) from %ir.4); c/idempotent_outline.c:50:3
  CALL64pcrel32 @yk_location_drop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !250; c/idempotent_outline.c:50:3
  JMP_1 %bb.18, debug-location !251; c/idempotent_outline.c:51:3

bb.18 (%ir-block.38, bb_id 18):
; predecessors: %bb.17
  successors: %bb.19
  liveins: $r13
  $edi = MOV32ri 17, debug-location !251; c/idempotent_outline.c:51:3
  $esi = MOV32ri 18, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !251; c/idempotent_outline.c:51:3
  $rdi = MOV64rr killed $r13, debug-location !251; c/idempotent_outline.c:51:3
  CALL64pcrel32 @yk_mt_shutdown, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, debug-location !251; c/idempotent_outline.c:51:3
  JMP_1 %bb.19, debug-location !252; c/idempotent_outline.c:53:1

bb.19 (%ir-block.39, bb_id 19):
; predecessors: %bb.18
  successors: %bb.20

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 19, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.20, debug-location !252; c/idempotent_outline.c:53:1

bb.20 (%ir-block.40, bb_id 20):
; predecessors: %bb.19
  successors: %bb.21

  $edi = MOV32ri 17, debug-location !252; c/idempotent_outline.c:53:1
  $esi = MOV32ri 20, debug-location !252; c/idempotent_outline.c:53:1
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !252; c/idempotent_outline.c:53:1
  JMP_1 %bb.21, debug-location !253; c/idempotent_outline.c:52:3

bb.21 (%ir-block.41, bb_id 21):
; predecessors: %bb.20
  successors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 21, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.24, debug-location !253; c/idempotent_outline.c:52:3

bb.22 (%ir-block.42, bb_id 22):
; predecessors: %bb.15
  successors: %bb.10
  liveins: $rbx, $r13
  $edi = MOV32ri 17
  $esi = MOV32ri 22
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi
  JMP_1 %bb.10

bb.23 (%ir-block.43, bb_id 23):
; predecessors: %bb.24

  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 23, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 24, implicit-def dead $eflags, debug-location !253; c/idempotent_outline.c:52:3
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !253; c/idempotent_outline.c:52:3
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8, debug-location !253; c/idempotent_outline.c:52:3
  RET64 implicit $eax, debug-location !253; c/idempotent_outline.c:52:3

bb.24 (%ir-block.44, bb_id 24):
; predecessors: %bb.21
  successors: %bb.23

  CFI_INSTRUCTION def_cfa $rbp, 16, debug-location !253; c/idempotent_outline.c:52:3
  $edi = MOV32ri 17, debug-location !253; c/idempotent_outline.c:52:3
  $esi = MOV32ri 24, debug-location !253; c/idempotent_outline.c:52:3
  CALL64pcrel32 target-flags(x86-plt) @__yk_trace_basicblock, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, debug-location !253; c/idempotent_outline.c:52:3
  JMP_1 %bb.23, debug-location !253; c/idempotent_outline.c:52:3

# End machine code for function __yk_unopt_main.

********** End of Machine Code **********
yk-jit-event: start-tracing
Transition: OptToUnopt
src_rbp: 0x7ffc4b3f1200, reg_store: 0x7ffc4b3f1150, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
ASM DUMP:
  0: movabs rbp, 0x7ffc4b3f1200
  a: movabs rsp, 0x7ffc4b3f1200
  14: sub rsp, 0x40
  1b: mov rbx, qword ptr [rbp - 0xa8]
  22: mov r13, qword ptr [rbp - 0xb0]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rdi, qword ptr [rbp - 0x68]
  3e: mov rsi, qword ptr [rbp - 0x70]
  45: mov r8, qword ptr [rbp - 0x78]
  4c: mov r9, qword ptr [rbp - 0x80]
  53: mov r10, qword ptr [rbp - 0x88]
  5a: mov r11, qword ptr [rbp - 0x90]
  61: mov r12, qword ptr [rbp - 0x98]
  68: mov r14, qword ptr [rbp - 0xa8]
  6f: mov r15, qword ptr [rbp - 0xb0]
  76: sub rsp, 0x10
  7a: mov qword ptr [rsp], rax
  7e: movabs rax, 0x204dd8
  88: mov qword ptr [rsp + 8], rax
  8d: pop rax
  8e: ret 
4: 28
yk-jit-event: stop-tracing
--- Begin aot ---
# IR format version: 0
# Num funcs: 25
# Num consts: 33
# Num global decls: 3
# Num types: 24
global_decl tls @shadowstack_0
global_decl @stderr
global_decl @.str

#[yk_idempotent, yk_outline]
func idem2(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock_dummy(0i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:25: return x + y;
    call __yk_trace_basicblock_dummy(0i32, 1i32)
    %1_1: i64 = add %0_1, %0_0
    br bb3
  bb2:
    call __yk_trace_basicblock_dummy(0i32, 2i32)
    ret %1_1
  bb3:
    call __yk_trace_basicblock_dummy(0i32, 3i32)
    br bb2
}

func llvm.dbg.value(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

#[yk_idempotent, yk_outline]
func idem1(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock_dummy(2i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:31: uintptr_t a = idem2(x + 1, y + 1);
    call __yk_trace_basicblock_dummy(2i32, 1i32)
    %1_1: i64 = add %0_0, 1i64
    %1_2: i64 = add %0_1, 1i64
    %1_3: i64 = call idem2(%1_1, %1_2) [safepoint: 4i64, (%0_0, %0_1, %1_1, %1_2)]
    # idempotent_outline.c:32: uintptr_t b = idem2(y + 5, x + 5);
    br bb2
  bb2:
    call __yk_trace_basicblock_dummy(2i32, 2i32)
    %2_1: i64 = idempotent_promote %1_3
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(2i32, 3i32)
    %3_1: i64 = add %0_1, 5i64
    %3_2: i64 = add %0_0, 5i64
    %3_3: i64 = call idem2(%3_1, %3_2) [safepoint: 5i64, (%2_1, %3_1, %3_2)]
    # idempotent_outline.c:33: return a + b;
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(2i32, 4i32)
    %4_1: i64 = idempotent_promote %3_3
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(2i32, 5i32)
    %5_1: i64 = add %4_1, %2_1
    br bb7
  bb6:
    call __yk_trace_basicblock_dummy(2i32, 6i32)
    ret %5_1
  bb7:
    call __yk_trace_basicblock_dummy(2i32, 7i32)
    br bb6
}

#[yk_outline]
func main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock_dummy(3i32, 0i32)
    %0_3: ptr = call malloc(1000000i64)
    %0_4: ptr = ptr_add %0_3, 8
    *@shadowstack_0 = %0_4
    %0_6: ptr = alloca {0: i64}, 1, 8
    %0_7: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # idempotent_outline.c:37: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock_dummy(3i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # idempotent_outline.c:38: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock_dummy(3i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # idempotent_outline.c:39: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(3i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_6)
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(3i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(3i32, 5i32)
    *%0_6 = %4_1
    # idempotent_outline.c:41: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_7)
    br bb6
  bb6:
    call __yk_trace_basicblock_dummy(3i32, 6i32)
    *%0_7 = 4i64
    br bb7
  bb7:
    # idempotent_outline.c:43: NOOPT_VAL(i);
    call __yk_trace_basicblock_dummy(3i32, 7i32)
    # idempotent_outline.c:44: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock_dummy(3i32, 8i32)
    %8_1: i64 = load %0_7
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb17, bb9 [safepoint: 6i64, (%0_6, %0_7, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock_dummy(3i32, 9i32)
    br bb10
  bb10:
    # idempotent_outline.c:45: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock_dummy(3i32, 10i32)
    call llvm.experimental.patchpoint.void(0i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_6, 0i64, %0_6, %0_7, %1_1) [safepoint: 0i64, (%0_6, %0_7, %1_1)]
    # idempotent_outline.c:46: uintptr_t k = yk_promote(i);
    br bb11
  bb11:
    call __yk_trace_basicblock_dummy(3i32, 11i32)
    %11_1: i64 = load %0_7
    %11_2: i64 = promote %11_1 [safepoint: 7i64, (%0_6, %0_7, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    # idempotent_outline.c:47: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, idem1(k, k));
    call __yk_trace_basicblock_dummy(3i32, 12i32)
    %12_1: ptr = load @stderr
    %12_2: i64 = load %0_7
    %12_3: i64 = call idem1(%11_2, %11_2) [safepoint: 8i64, (%0_6, %0_7, %1_1, %11_2, %12_1, %12_2)]
    br bb13
  bb13:
    call __yk_trace_basicblock_dummy(3i32, 13i32)
    %13_1: i64 = idempotent_promote %12_3
    br bb14
  bb14:
    call __yk_trace_basicblock_dummy(3i32, 14i32)
    %14_1: i32 = call fprintf(%12_1, @.str, %12_2, %13_1)
    # idempotent_outline.c:48: i--;
    br bb15
  bb15:
    call __yk_trace_basicblock_dummy(3i32, 15i32)
    %15_1: i64 = load %0_7
    %15_2: i64 = add %15_1, -1i64
    *%0_7 = %15_2
    # idempotent_outline.c:44: while (i > 0) {
    %15_4: i1 = eq %15_2, 0i64
    condbr %15_4, bb16, bb22 [safepoint: 9i64, (%0_6, %0_7, %1_1, %15_4)]
  bb16:
    # idempotent_outline.c:50: yk_location_drop(loc);
    call __yk_trace_basicblock_dummy(3i32, 16i32)
    br bb17
  bb17:
    call __yk_trace_basicblock_dummy(3i32, 17i32)
    %17_1: i64 = load %0_6
    call yk_location_drop(%17_1)
    # idempotent_outline.c:51: yk_mt_shutdown(mt);
    br bb18
  bb18:
    call __yk_trace_basicblock_dummy(3i32, 18i32)
    call yk_mt_shutdown(%1_1)
    # idempotent_outline.c:53: }
    br bb19
  bb19:
    call __yk_trace_basicblock_dummy(3i32, 19i32)
    call llvm.lifetime.end.p0(8i64, %0_7)
    br bb20
  bb20:
    call __yk_trace_basicblock_dummy(3i32, 20i32)
    call llvm.lifetime.end.p0(8i64, %0_6)
    # idempotent_outline.c:52: return (EXIT_SUCCESS);
    br bb21
  bb21:
    call __yk_trace_basicblock_dummy(3i32, 21i32)
    br bb24
  bb22:
    call __yk_trace_basicblock_dummy(3i32, 22i32)
    br bb10
  bb23:
    call __yk_trace_basicblock_dummy(3i32, 23i32)
    ret 0i32
  bb24:
    call __yk_trace_basicblock_dummy(3i32, 24i32)
    br bb23
}

func yk_mt_new(%arg0: ptr) -> ptr;

func yk_mt_hot_threshold_set(%arg0: ptr, %arg1: i32);

func llvm.lifetime.start.p0(%arg0: i64, %arg1: ptr);

func llvm.dbg.declare(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

func yk_location_new() -> i64;

func yk_mt_control_point(%arg0: ptr, %arg1: ptr);

func __yk_promote_usize(%arg0: i64) -> i64;

func fprintf(%arg0: ptr, %arg1: ptr, ...) -> i32;

func yk_location_drop(%arg0: i64);

func yk_mt_shutdown(%arg0: ptr);

func llvm.lifetime.end.p0(%arg0: i64, %arg1: ptr);

#[yk_idempotent, yk_outline]
func __yk_unopt_idem2(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock(15i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:25: return x + y;
    call __yk_trace_basicblock(15i32, 1i32)
    %1_1: i64 = add %0_1, %0_0
    br bb3
  bb2:
    call __yk_trace_basicblock(15i32, 2i32)
    ret %1_1
  bb3:
    call __yk_trace_basicblock(15i32, 3i32)
    br bb2
}

#[yk_idempotent, yk_outline]
func __yk_unopt_idem1(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock(16i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:31: uintptr_t a = idem2(x + 1, y + 1);
    call __yk_trace_basicblock(16i32, 1i32)
    %1_1: i64 = add %0_0, 1i64
    %1_2: i64 = add %0_1, 1i64
    %1_3: i64 = call __yk_unopt_idem2(%1_1, %1_2) [safepoint: 11i64, (%0_0, %0_1, %1_1, %1_2)]
    # idempotent_outline.c:32: uintptr_t b = idem2(y + 5, x + 5);
    br bb2
  bb2:
    call __yk_trace_basicblock(16i32, 2i32)
    %2_1: i64 = idempotent_promote %1_3
    br bb3
  bb3:
    call __yk_trace_basicblock(16i32, 3i32)
    %3_1: i64 = add %0_1, 5i64
    %3_2: i64 = add %0_0, 5i64
    %3_3: i64 = call __yk_unopt_idem2(%3_1, %3_2) [safepoint: 10i64, (%2_1, %3_1, %3_2)]
    # idempotent_outline.c:33: return a + b;
    br bb4
  bb4:
    call __yk_trace_basicblock(16i32, 4i32)
    %4_1: i64 = idempotent_promote %3_3
    br bb5
  bb5:
    call __yk_trace_basicblock(16i32, 5i32)
    %5_1: i64 = add %4_1, %2_1
    br bb7
  bb6:
    call __yk_trace_basicblock(16i32, 6i32)
    ret %5_1
  bb7:
    call __yk_trace_basicblock(16i32, 7i32)
    br bb6
}

#[yk_outline]
func __yk_unopt_main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock(17i32, 0i32)
    %0_3: ptr = load @shadowstack_0
    %0_4: ptr = alloca {0: i64}, 1, 8
    %0_5: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # idempotent_outline.c:37: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock(17i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # idempotent_outline.c:38: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock(17i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # idempotent_outline.c:39: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock(17i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_4)
    br bb4
  bb4:
    call __yk_trace_basicblock(17i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock(17i32, 5i32)
    *%0_4 = %4_1
    # idempotent_outline.c:41: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb6
  bb6:
    call __yk_trace_basicblock(17i32, 6i32)
    *%0_5 = 4i64
    br bb7
  bb7:
    # idempotent_outline.c:43: NOOPT_VAL(i);
    call __yk_trace_basicblock(17i32, 7i32)
    # idempotent_outline.c:44: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock(17i32, 8i32)
    %8_1: i64 = load %0_5
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb17, bb9 [safepoint: 3i64, (%0_4, %0_5, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock(17i32, 9i32)
    br bb10
  bb10:
    # idempotent_outline.c:45: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock(17i32, 10i32)
    call llvm.experimental.patchpoint.void(1i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_4, 1i64, %0_4, %0_5, %1_1) [safepoint: 1i64, (%0_4, %0_5, %1_1)]
    # idempotent_outline.c:46: uintptr_t k = yk_promote(i);
    br bb11
  bb11:
    call __yk_trace_basicblock(17i32, 11i32)
    %11_1: i64 = load %0_5
    %11_2: i64 = promote %11_1 [safepoint: 12i64, (%0_4, %0_5, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    # idempotent_outline.c:47: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, idem1(k, k));
    call __yk_trace_basicblock(17i32, 12i32)
    %12_1: ptr = load @stderr
    %12_2: i64 = load %0_5
    %12_3: i64 = call __yk_unopt_idem1(%11_2, %11_2) [safepoint: 13i64, (%0_4, %0_5, %1_1, %11_2, %12_1, %12_2)]
    br bb13
  bb13:
    call __yk_trace_basicblock(17i32, 13i32)
    %13_1: i64 = idempotent_promote %12_3
    br bb14
  bb14:
    call __yk_trace_basicblock(17i32, 14i32)
    %14_1: i32 = call fprintf(%12_1, @.str, %12_2, %13_1)
    # idempotent_outline.c:48: i--;
    br bb15
  bb15:
    call __yk_trace_basicblock(17i32, 15i32)
    %15_1: i64 = load %0_5
    %15_2: i64 = add %15_1, -1i64
    *%0_5 = %15_2
    # idempotent_outline.c:44: while (i > 0) {
    %15_4: i1 = eq %15_2, 0i64
    condbr %15_4, bb16, bb22 [safepoint: 2i64, (%0_4, %0_5, %1_1, %15_4)]
  bb16:
    # idempotent_outline.c:50: yk_location_drop(loc);
    call __yk_trace_basicblock(17i32, 16i32)
    br bb17
  bb17:
    call __yk_trace_basicblock(17i32, 17i32)
    %17_1: i64 = load %0_4
    call yk_location_drop(%17_1)
    # idempotent_outline.c:51: yk_mt_shutdown(mt);
    br bb18
  bb18:
    call __yk_trace_basicblock(17i32, 18i32)
    call yk_mt_shutdown(%1_1)
    # idempotent_outline.c:53: }
    br bb19
  bb19:
    call __yk_trace_basicblock(17i32, 19i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    br bb20
  bb20:
    call __yk_trace_basicblock(17i32, 20i32)
    call llvm.lifetime.end.p0(8i64, %0_4)
    # idempotent_outline.c:52: return (EXIT_SUCCESS);
    br bb21
  bb21:
    call __yk_trace_basicblock(17i32, 21i32)
    br bb24
  bb22:
    call __yk_trace_basicblock(17i32, 22i32)
    br bb10
  bb23:
    call __yk_trace_basicblock(17i32, 23i32)
    ret 0i32
  bb24:
    call __yk_trace_basicblock(17i32, 24i32)
    br bb23
}

func malloc(%arg0: i64) -> ptr;

func __ykrt_control_point(%arg0: ptr, %arg1: ptr, %arg2: i64);

func llvm.experimental.patchpoint.void(%arg0: i64, %arg1: i32, %arg2: ptr, %arg3: i32, ...);

func __yk_idempotent_promote_i64(%arg0: i64) -> i64;

func llvm.experimental.stackmap(%arg0: i64, %arg1: i32, ...);

func __yk_trace_basicblock(%arg0: i32, %arg1: i32);

func __yk_trace_basicblock_dummy(%arg0: i32, %arg1: i32);

--- End aot ---
--- Begin jit-pre-opt ---
; compiled trace ID #0

func_decl __yk_unopt_idem1 (i64, i64) -> i64
func_decl fprintf (ptr, ptr, ...) -> i32
global_decl @stderr
global_decl @.str

entry:
    %0: ptr = param Direct(6, -48, 8)
    %1: ptr = param Register(3, 8, [])
    %2: ptr = param Register(13, 8, [])
    header_start [%0, %1, %2]
    %4: i64 = load %1
    %6: i1 = eq %4, 4i64
    guard true, %6, [17:%0_4: %0, 17:%0_5: %1, 17:%1_1: %2, 17:%11_1: %4, 17:%11_2: %4] ; trace_gidx 0 safepoint_id 12
    %8: ptr = lookup_global @stderr
    %9: ptr = load %8
    %10: i64 = load %1
    %11: i64 = call @__yk_unopt_idem1(%4, %4) <idem_const 10i64>
    %13: ptr = lookup_global @.str
    %14: i32 = call @fprintf(%9, %13, %10, %11)
    %15: i64 = load %1
    %16: i64 = add %15, 18446744073709551615i64
    *%1 = %16
    %18: i1 = eq %16, 0i64
    guard false, %18, [17:%0_4: %0, 17:%0_5: %1, 17:%1_1: %2, 17:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
    header_end [%0, %1, %2]
--- End jit-pre-opt ---
--- Begin jit-post-opt ---
; compiled trace ID #0

func_decl __yk_unopt_idem1 (i64, i64) -> i64
func_decl fprintf (ptr, ptr, ...) -> i32
global_decl @stderr
global_decl @.str

entry:
    %0: ptr = param Direct(6, -48, 8)
    %1: ptr = param Register(3, 8, [])
    %2: ptr = param Register(13, 8, [])
    header_start [%0, %1, %2]
    %4: i64 = load %1
    %6: i1 = eq %4, 4i64
    guard true, %6, [17:%0_4: %0, 17:%0_5: %1, 17:%1_1: %2, 17:%11_1: %4, 17:%11_2: %4] ; trace_gidx 0 safepoint_id 12
    %8: ptr = lookup_global @stderr
    %9: ptr = load %8
    %13: ptr = lookup_global @.str
    %14: i32 = call @fprintf(%9, %13, 4i64, 10i64)
    %15: i64 = load %1
    %16: i64 = add %15, 18446744073709551615i64
    *%1 = %16
    %18: i1 = eq %16, 0i64
    guard false, %18, [17:%0_4: %0, 17:%0_5: %1, 17:%1_1: %2, 17:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
    header_end [%0, %1, %2]
    %21: ptr = param Direct(6, -48, 8)
    %22: ptr = param Register(3, 8, [])
    %23: ptr = param Register(13, 8, [])
    body_start [%21, %22, %23]
    %25: i64 = load %22
    %26: i1 = eq %25, 4i64
    guard true, %26, [17:%0_4: %21, 17:%0_5: %22, 17:%1_1: %23, 17:%11_1: %25, 17:%11_2: %25] ; trace_gidx 2 safepoint_id 12
    %28: ptr = lookup_global @stderr
    %29: ptr = load %28
    %30: ptr = lookup_global @.str
    %31: i32 = call @fprintf(%29, %30, 4i64, 10i64)
    %32: i64 = load %22
    %33: i64 = add %32, 18446744073709551615i64
    *%22 = %33
    %35: i1 = eq %33, 0i64
    guard false, %35, [17:%0_4: %21, 17:%0_5: %22, 17:%1_1: %23, 17:%15_4: 1i1] ; trace_gidx 3 safepoint_id 2
    body_end [%21, %22, %23]
--- End jit-post-opt ---
Transition: UnoptToOpt
src_rbp: 0x7ffc4b3f1200, reg_store: 0x7ffc4b3f1150, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(3, 8, []) dst: Register(14, 8, [])
Register2Register - src: Register(13, 8, []) dst: Register(15, 8, [])
ASM DUMP:
  0: movabs rbp, 0x7ffc4b3f1200
  a: movabs rsp, 0x7ffc4b3f1200
  14: sub rsp, 0x40
  1b: mov r14, qword ptr [rbp - 0x60]
  22: mov r15, qword ptr [rbp - 0xa0]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rbx, qword ptr [rbp - 0x60]
  3e: mov rdi, qword ptr [rbp - 0x68]
  45: mov rsi, qword ptr [rbp - 0x70]
  4c: mov r8, qword ptr [rbp - 0x78]
  53: mov r9, qword ptr [rbp - 0x80]
  5a: mov r10, qword ptr [rbp - 0x88]
  61: mov r11, qword ptr [rbp - 0x90]
  68: mov r12, qword ptr [rbp - 0x98]
  6f: mov r13, qword ptr [rbp - 0xa0]
  76: sub rsp, 0x10
  7a: mov qword ptr [rsp], rax
  7e: movabs rax, 0x2049c9
  88: mov qword ptr [rsp + 8], rax
  8d: pop rax
  8e: ret 
3: 24
yk-jit-event: enter-jit-code
Transition: OptToUnopt
src_rbp: 0x7ffc4b3f1200, reg_store: 0x7ffc4b3f1150, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
@@ calling exec_trace
ASM DUMP:
  0: movabs rbp, 0x7ffc4b3f1200
  a: movabs rsp, 0x7ffc4b3f1200
  14: sub rsp, 0x40
  1b: mov rbx, qword ptr [rbp - 0xa8]
  22: mov r13, qword ptr [rbp - 0xb0]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rdi, qword ptr [rbp - 0x68]
  3e: mov rsi, qword ptr [rbp - 0x70]
  45: mov r8, qword ptr [rbp - 0x78]
  4c: mov r9, qword ptr [rbp - 0x80]
  53: mov r10, qword ptr [rbp - 0x88]
  5a: mov r11, qword ptr [rbp - 0x90]
  61: mov r12, qword ptr [rbp - 0x98]
  68: mov r14, qword ptr [rbp - 0xa8]
  6f: mov r15, qword ptr [rbp - 0xb0]
  76: movabs rdi, 0x7ffc4b3f1200
  80: movabs rsi, 0x7ffc4b3f11c0
  8a: movabs rdx, 0x7fbca3f0c000
  94: movabs rcx, 0x7fbca4796d20
  9e: call rcx
yk-jit-event: deoptimise
2: 20
yk-jit-event: enter-jit-code
Transition: OptToUnopt
src_rbp: 0x7ffc4b3f1200, reg_store: 0x7ffc4b3f1150, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
@@ calling exec_trace
ASM DUMP:
  0: movabs rbp, 0x7ffc4b3f1200
  a: movabs rsp, 0x7ffc4b3f1200
  14: sub rsp, 0x40
  1b: mov rbx, qword ptr [rbp - 0xa8]
  22: mov r13, qword ptr [rbp - 0xb0]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rdi, qword ptr [rbp - 0x68]
  3e: mov rsi, qword ptr [rbp - 0x70]
  45: mov r8, qword ptr [rbp - 0x78]
  4c: mov r9, qword ptr [rbp - 0x80]
  53: mov r10, qword ptr [rbp - 0x88]
  5a: mov r11, qword ptr [rbp - 0x90]
  61: mov r12, qword ptr [rbp - 0x98]
  68: mov r14, qword ptr [rbp - 0xa8]
  6f: mov r15, qword ptr [rbp - 0xb0]
  76: movabs rdi, 0x7ffc4b3f1200
  80: movabs rsi, 0x7ffc4b3f11c0
  8a: movabs rdx, 0x7fbca3f0c000
  94: movabs rcx, 0x7fbca4796d20
  9e: call rcx
yk-jit-event: deoptimise
4222429319: 16889717288

test lang_tests::idempotent_outline.c ... [0m[31mFAILED[0m

failures:

---- lang_tests::idempotent_outline.c status ----
Exited due to signal: 11

---- lang_tests::idempotent_outline.c stderr ----

yk-jit-event: start-tracing
4: 28
yk-jit-event: stop-tracing
--- Begin aot ---
# IR format version: 0
# Num funcs: 25
# Num consts: 33
# Num global decls: 3
# Num types: 24
global_decl tls @shadowstack_0
global_decl @stderr
global_decl @.str

#[yk_idempotent, yk_outline]
func idem2(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock_dummy(0i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:25: return x + y;
    call __yk_trace_basicblock_dummy(0i32, 1i32)
    %1_1: i64 = add %0_1, %0_0
    br bb3
  bb2:
    call __yk_trace_basicblock_dummy(0i32, 2i32)
    ret %1_1
  bb3:
    call __yk_trace_basicblock_dummy(0i32, 3i32)
    br bb2
}

func llvm.dbg.value(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

#[yk_idempotent, yk_outline]
func idem1(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock_dummy(2i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:31: uintptr_t a = idem2(x + 1, y + 1);
    call __yk_trace_basicblock_dummy(2i32, 1i32)
    %1_1: i64 = add %0_0, 1i64
    %1_2: i64 = add %0_1, 1i64
    %1_3: i64 = call idem2(%1_1, %1_2) [safepoint: 4i64, (%0_0, %0_1, %1_1, %1_2)]
    # idempotent_outline.c:32: uintptr_t b = idem2(y + 5, x + 5);
    br bb2
  bb2:
    call __yk_trace_basicblock_dummy(2i32, 2i32)
    %2_1: i64 = idempotent_promote %1_3
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(2i32, 3i32)
    %3_1: i64 = add %0_1, 5i64
    %3_2: i64 = add %0_0, 5i64
    %3_3: i64 = call idem2(%3_1, %3_2) [safepoint: 5i64, (%2_1, %3_1, %3_2)]
    # idempotent_outline.c:33: return a + b;
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(2i32, 4i32)
    %4_1: i64 = idempotent_promote %3_3
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(2i32, 5i32)
    %5_1: i64 = add %4_1, %2_1
    br bb7
  bb6:
    call __yk_trace_basicblock_dummy(2i32, 6i32)
    ret %5_1
  bb7:
    call __yk_trace_basicblock_dummy(2i32, 7i32)
    br bb6
}

#[yk_outline]
func main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock_dummy(3i32, 0i32)
    %0_3: ptr = call malloc(1000000i64)
    %0_4: ptr = ptr_add %0_3, 8
    *@shadowstack_0 = %0_4
    %0_6: ptr = alloca {0: i64}, 1, 8
    %0_7: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # idempotent_outline.c:37: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock_dummy(3i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # idempotent_outline.c:38: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock_dummy(3i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # idempotent_outline.c:39: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock_dummy(3i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_6)
    br bb4
  bb4:
    call __yk_trace_basicblock_dummy(3i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock_dummy(3i32, 5i32)
    *%0_6 = %4_1
    # idempotent_outline.c:41: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_7)
    br bb6
  bb6:
    call __yk_trace_basicblock_dummy(3i32, 6i32)
    *%0_7 = 4i64
    br bb7
  bb7:
    # idempotent_outline.c:43: NOOPT_VAL(i);
    call __yk_trace_basicblock_dummy(3i32, 7i32)
    # idempotent_outline.c:44: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock_dummy(3i32, 8i32)
    %8_1: i64 = load %0_7
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb17, bb9 [safepoint: 6i64, (%0_6, %0_7, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock_dummy(3i32, 9i32)
    br bb10
  bb10:
    # idempotent_outline.c:45: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock_dummy(3i32, 10i32)
    call llvm.experimental.patchpoint.void(0i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_6, 0i64, %0_6, %0_7, %1_1) [safepoint: 0i64, (%0_6, %0_7, %1_1)]
    # idempotent_outline.c:46: uintptr_t k = yk_promote(i);
    br bb11
  bb11:
    call __yk_trace_basicblock_dummy(3i32, 11i32)
    %11_1: i64 = load %0_7
    %11_2: i64 = promote %11_1 [safepoint: 7i64, (%0_6, %0_7, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    # idempotent_outline.c:47: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, idem1(k, k));
    call __yk_trace_basicblock_dummy(3i32, 12i32)
    %12_1: ptr = load @stderr
    %12_2: i64 = load %0_7
    %12_3: i64 = call idem1(%11_2, %11_2) [safepoint: 8i64, (%0_6, %0_7, %1_1, %11_2, %12_1, %12_2)]
    br bb13
  bb13:
    call __yk_trace_basicblock_dummy(3i32, 13i32)
    %13_1: i64 = idempotent_promote %12_3
    br bb14
  bb14:
    call __yk_trace_basicblock_dummy(3i32, 14i32)
    %14_1: i32 = call fprintf(%12_1, @.str, %12_2, %13_1)
    # idempotent_outline.c:48: i--;
    br bb15
  bb15:
    call __yk_trace_basicblock_dummy(3i32, 15i32)
    %15_1: i64 = load %0_7
    %15_2: i64 = add %15_1, -1i64
    *%0_7 = %15_2
    # idempotent_outline.c:44: while (i > 0) {
    %15_4: i1 = eq %15_2, 0i64
    condbr %15_4, bb16, bb22 [safepoint: 9i64, (%0_6, %0_7, %1_1, %15_4)]
  bb16:
    # idempotent_outline.c:50: yk_location_drop(loc);
    call __yk_trace_basicblock_dummy(3i32, 16i32)
    br bb17
  bb17:
    call __yk_trace_basicblock_dummy(3i32, 17i32)
    %17_1: i64 = load %0_6
    call yk_location_drop(%17_1)
    # idempotent_outline.c:51: yk_mt_shutdown(mt);
    br bb18
  bb18:
    call __yk_trace_basicblock_dummy(3i32, 18i32)
    call yk_mt_shutdown(%1_1)
    # idempotent_outline.c:53: }
    br bb19
  bb19:
    call __yk_trace_basicblock_dummy(3i32, 19i32)
    call llvm.lifetime.end.p0(8i64, %0_7)
    br bb20
  bb20:
    call __yk_trace_basicblock_dummy(3i32, 20i32)
    call llvm.lifetime.end.p0(8i64, %0_6)
    # idempotent_outline.c:52: return (EXIT_SUCCESS);
    br bb21
  bb21:
    call __yk_trace_basicblock_dummy(3i32, 21i32)
    br bb24
  bb22:
    call __yk_trace_basicblock_dummy(3i32, 22i32)
    br bb10
  bb23:
    call __yk_trace_basicblock_dummy(3i32, 23i32)
    ret 0i32
  bb24:
    call __yk_trace_basicblock_dummy(3i32, 24i32)
    br bb23
}

func yk_mt_new(%arg0: ptr) -> ptr;

func yk_mt_hot_threshold_set(%arg0: ptr, %arg1: i32);

func llvm.lifetime.start.p0(%arg0: i64, %arg1: ptr);

func llvm.dbg.declare(%arg0: ?ty<metadata>, %arg1: ?ty<metadata>, %arg2: ?ty<metadata>);

func yk_location_new() -> i64;

func yk_mt_control_point(%arg0: ptr, %arg1: ptr);

func __yk_promote_usize(%arg0: i64) -> i64;

func fprintf(%arg0: ptr, %arg1: ptr, ...) -> i32;

func yk_location_drop(%arg0: i64);

func yk_mt_shutdown(%arg0: ptr);

func llvm.lifetime.end.p0(%arg0: i64, %arg1: ptr);

#[yk_idempotent, yk_outline]
func __yk_unopt_idem2(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock(15i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:25: return x + y;
    call __yk_trace_basicblock(15i32, 1i32)
    %1_1: i64 = add %0_1, %0_0
    br bb3
  bb2:
    call __yk_trace_basicblock(15i32, 2i32)
    ret %1_1
  bb3:
    call __yk_trace_basicblock(15i32, 3i32)
    br bb2
}

#[yk_idempotent, yk_outline]
func __yk_unopt_idem1(%arg0: i64, %arg1: i64) -> i64 {
  bb0:
    %0_0: i64 = arg(0)
    %0_1: i64 = arg(1)
    call __yk_trace_basicblock(16i32, 0i32)
    br bb1
  bb1:
    # idempotent_outline.c:31: uintptr_t a = idem2(x + 1, y + 1);
    call __yk_trace_basicblock(16i32, 1i32)
    %1_1: i64 = add %0_0, 1i64
    %1_2: i64 = add %0_1, 1i64
    %1_3: i64 = call __yk_unopt_idem2(%1_1, %1_2) [safepoint: 11i64, (%0_0, %0_1, %1_1, %1_2)]
    # idempotent_outline.c:32: uintptr_t b = idem2(y + 5, x + 5);
    br bb2
  bb2:
    call __yk_trace_basicblock(16i32, 2i32)
    %2_1: i64 = idempotent_promote %1_3
    br bb3
  bb3:
    call __yk_trace_basicblock(16i32, 3i32)
    %3_1: i64 = add %0_1, 5i64
    %3_2: i64 = add %0_0, 5i64
    %3_3: i64 = call __yk_unopt_idem2(%3_1, %3_2) [safepoint: 10i64, (%2_1, %3_1, %3_2)]
    # idempotent_outline.c:33: return a + b;
    br bb4
  bb4:
    call __yk_trace_basicblock(16i32, 4i32)
    %4_1: i64 = idempotent_promote %3_3
    br bb5
  bb5:
    call __yk_trace_basicblock(16i32, 5i32)
    %5_1: i64 = add %4_1, %2_1
    br bb7
  bb6:
    call __yk_trace_basicblock(16i32, 6i32)
    ret %5_1
  bb7:
    call __yk_trace_basicblock(16i32, 7i32)
    br bb6
}

#[yk_outline]
func __yk_unopt_main(%arg0: i32, %arg1: ptr) -> i32 {
  bb0:
    %0_0: i32 = arg(0)
    %0_1: ptr = arg(1)
    call __yk_trace_basicblock(17i32, 0i32)
    %0_3: ptr = load @shadowstack_0
    %0_4: ptr = alloca {0: i64}, 1, 8
    %0_5: ptr = ptr_add %0_3, 0
    br bb1
  bb1:
    # idempotent_outline.c:37: YkMT *mt = yk_mt_new(NULL);
    call __yk_trace_basicblock(17i32, 1i32)
    %1_1: ptr = call yk_mt_new(0x0)
    br bb2
  bb2:
    # idempotent_outline.c:38: yk_mt_hot_threshold_set(mt, 0);
    call __yk_trace_basicblock(17i32, 2i32)
    call yk_mt_hot_threshold_set(%1_1, 0i32)
    # idempotent_outline.c:39: YkLocation loc = yk_location_new();
    br bb3
  bb3:
    call __yk_trace_basicblock(17i32, 3i32)
    call llvm.lifetime.start.p0(8i64, %0_4)
    br bb4
  bb4:
    call __yk_trace_basicblock(17i32, 4i32)
    %4_1: i64 = call yk_location_new()
    br bb5
  bb5:
    call __yk_trace_basicblock(17i32, 5i32)
    *%0_4 = %4_1
    # idempotent_outline.c:41: size_t i = 4;
    call llvm.lifetime.start.p0(8i64, %0_5)
    br bb6
  bb6:
    call __yk_trace_basicblock(17i32, 6i32)
    *%0_5 = 4i64
    br bb7
  bb7:
    # idempotent_outline.c:43: NOOPT_VAL(i);
    call __yk_trace_basicblock(17i32, 7i32)
    # idempotent_outline.c:44: while (i > 0) {
    br bb8
  bb8:
    call __yk_trace_basicblock(17i32, 8i32)
    %8_1: i64 = load %0_5
    %8_2: i1 = eq %8_1, 0i64
    condbr %8_2, bb17, bb9 [safepoint: 3i64, (%0_4, %0_5, %1_1, %8_2)]
  bb9:
    call __yk_trace_basicblock(17i32, 9i32)
    br bb10
  bb10:
    # idempotent_outline.c:45: yk_mt_control_point(mt, &loc);
    call __yk_trace_basicblock(17i32, 10i32)
    call llvm.experimental.patchpoint.void(1i64, 13i32, __ykrt_control_point, 3i32, %1_1, %0_4, 1i64, %0_4, %0_5, %1_1) [safepoint: 1i64, (%0_4, %0_5, %1_1)]
    # idempotent_outline.c:46: uintptr_t k = yk_promote(i);
    br bb11
  bb11:
    call __yk_trace_basicblock(17i32, 11i32)
    %11_1: i64 = load %0_5
    %11_2: i64 = promote %11_1 [safepoint: 12i64, (%0_4, %0_5, %1_1, %11_1, %11_2)]
    br bb12
  bb12:
    # idempotent_outline.c:47: fprintf(stderr, "%" PRIuPTR ": %" PRIuPTR "\n", i, idem1(k, k));
    call __yk_trace_basicblock(17i32, 12i32)
    %12_1: ptr = load @stderr
    %12_2: i64 = load %0_5
    %12_3: i64 = call __yk_unopt_idem1(%11_2, %11_2) [safepoint: 13i64, (%0_4, %0_5, %1_1, %11_2, %12_1, %12_2)]
    br bb13
  bb13:
    call __yk_trace_basicblock(17i32, 13i32)
    %13_1: i64 = idempotent_promote %12_3
    br bb14
  bb14:
    call __yk_trace_basicblock(17i32, 14i32)
    %14_1: i32 = call fprintf(%12_1, @.str, %12_2, %13_1)
    # idempotent_outline.c:48: i--;
    br bb15
  bb15:
    call __yk_trace_basicblock(17i32, 15i32)
    %15_1: i64 = load %0_5
    %15_2: i64 = add %15_1, -1i64
    *%0_5 = %15_2
    # idempotent_outline.c:44: while (i > 0) {
    %15_4: i1 = eq %15_2, 0i64
    condbr %15_4, bb16, bb22 [safepoint: 2i64, (%0_4, %0_5, %1_1, %15_4)]
  bb16:
    # idempotent_outline.c:50: yk_location_drop(loc);
    call __yk_trace_basicblock(17i32, 16i32)
    br bb17
  bb17:
    call __yk_trace_basicblock(17i32, 17i32)
    %17_1: i64 = load %0_4
    call yk_location_drop(%17_1)
    # idempotent_outline.c:51: yk_mt_shutdown(mt);
    br bb18
  bb18:
    call __yk_trace_basicblock(17i32, 18i32)
    call yk_mt_shutdown(%1_1)
    # idempotent_outline.c:53: }
    br bb19
  bb19:
    call __yk_trace_basicblock(17i32, 19i32)
    call llvm.lifetime.end.p0(8i64, %0_5)
    br bb20
  bb20:
    call __yk_trace_basicblock(17i32, 20i32)
    call llvm.lifetime.end.p0(8i64, %0_4)
    # idempotent_outline.c:52: return (EXIT_SUCCESS);
    br bb21
  bb21:
    call __yk_trace_basicblock(17i32, 21i32)
    br bb24
  bb22:
    call __yk_trace_basicblock(17i32, 22i32)
    br bb10
  bb23:
    call __yk_trace_basicblock(17i32, 23i32)
    ret 0i32
  bb24:
    call __yk_trace_basicblock(17i32, 24i32)
    br bb23
}

func malloc(%arg0: i64) -> ptr;

func __ykrt_control_point(%arg0: ptr, %arg1: ptr, %arg2: i64);

func llvm.experimental.patchpoint.void(%arg0: i64, %arg1: i32, %arg2: ptr, %arg3: i32, ...);

func __yk_idempotent_promote_i64(%arg0: i64) -> i64;

func llvm.experimental.stackmap(%arg0: i64, %arg1: i32, ...);

func __yk_trace_basicblock(%arg0: i32, %arg1: i32);

func __yk_trace_basicblock_dummy(%arg0: i32, %arg1: i32);

--- End aot ---
--- Begin jit-pre-opt ---
; compiled trace ID #0

func_decl __yk_unopt_idem1 (i64, i64) -> i64
func_decl fprintf (ptr, ptr, ...) -> i32
global_decl @stderr
global_decl @.str

entry:
    %0: ptr = param Direct(6, -48, 8)
    %1: ptr = param Register(3, 8, [])
    %2: ptr = param Register(13, 8, [])
    header_start [%0, %1, %2]
    %4: i64 = load %1
    %6: i1 = eq %4, 4i64
    guard true, %6, [17:%0_4: %0, 17:%0_5: %1, 17:%1_1: %2, 17:%11_1: %4, 17:%11_2: %4] ; trace_gidx 0 safepoint_id 12
    %8: ptr = lookup_global @stderr
    %9: ptr = load %8
    %10: i64 = load %1
    %11: i64 = call @__yk_unopt_idem1(%4, %4) <idem_const 10i64>
    %13: ptr = lookup_global @.str
    %14: i32 = call @fprintf(%9, %13, %10, %11)
    %15: i64 = load %1
    %16: i64 = add %15, 18446744073709551615i64
    *%1 = %16
    %18: i1 = eq %16, 0i64
    guard false, %18, [17:%0_4: %0, 17:%0_5: %1, 17:%1_1: %2, 17:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
    header_end [%0, %1, %2]
--- End jit-pre-opt ---
--- Begin jit-post-opt ---
; compiled trace ID #0

func_decl __yk_unopt_idem1 (i64, i64) -> i64
func_decl fprintf (ptr, ptr, ...) -> i32
global_decl @stderr
global_decl @.str

entry:
    %0: ptr = param Direct(6, -48, 8)
    %1: ptr = param Register(3, 8, [])
    %2: ptr = param Register(13, 8, [])
    header_start [%0, %1, %2]
    %4: i64 = load %1
    %6: i1 = eq %4, 4i64
    guard true, %6, [17:%0_4: %0, 17:%0_5: %1, 17:%1_1: %2, 17:%11_1: %4, 17:%11_2: %4] ; trace_gidx 0 safepoint_id 12
    %8: ptr = lookup_global @stderr
    %9: ptr = load %8
    %13: ptr = lookup_global @.str
    %14: i32 = call @fprintf(%9, %13, 4i64, 10i64)
    %15: i64 = load %1
    %16: i64 = add %15, 18446744073709551615i64
    *%1 = %16
    %18: i1 = eq %16, 0i64
    guard false, %18, [17:%0_4: %0, 17:%0_5: %1, 17:%1_1: %2, 17:%15_4: 1i1] ; trace_gidx 1 safepoint_id 2
    header_end [%0, %1, %2]
    %21: ptr = param Direct(6, -48, 8)
    %22: ptr = param Register(3, 8, [])
    %23: ptr = param Register(13, 8, [])
    body_start [%21, %22, %23]
    %25: i64 = load %22
    %26: i1 = eq %25, 4i64
    guard true, %26, [17:%0_4: %21, 17:%0_5: %22, 17:%1_1: %23, 17:%11_1: %25, 17:%11_2: %25] ; trace_gidx 2 safepoint_id 12
    %28: ptr = lookup_global @stderr
    %29: ptr = load %28
    %30: ptr = lookup_global @.str
    %31: i32 = call @fprintf(%29, %30, 4i64, 10i64)
    %32: i64 = load %22
    %33: i64 = add %32, 18446744073709551615i64
    *%22 = %33
    %35: i1 = eq %33, 0i64
    guard false, %35, [17:%0_4: %21, 17:%0_5: %22, 17:%1_1: %23, 17:%15_4: 1i1] ; trace_gidx 3 safepoint_id 2
    body_end [%21, %22, %23]
--- End jit-post-opt ---
3: 24
yk-jit-event: enter-jit-code
yk-jit-event: deoptimise
2: 20
yk-jit-event: enter-jit-code
yk-jit-event: deoptimise
4222429319: 16889717288


---- lang_tests::idempotent_outline.c stdout ----

Transition: OptToUnopt
src_rbp: 0x7ffc4b3f1200, reg_store: 0x7ffc4b3f1150, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
ASM DUMP:
  0: movabs rbp, 0x7ffc4b3f1200
  a: movabs rsp, 0x7ffc4b3f1200
  14: sub rsp, 0x40
  1b: mov rbx, qword ptr [rbp - 0xa8]
  22: mov r13, qword ptr [rbp - 0xb0]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rdi, qword ptr [rbp - 0x68]
  3e: mov rsi, qword ptr [rbp - 0x70]
  45: mov r8, qword ptr [rbp - 0x78]
  4c: mov r9, qword ptr [rbp - 0x80]
  53: mov r10, qword ptr [rbp - 0x88]
  5a: mov r11, qword ptr [rbp - 0x90]
  61: mov r12, qword ptr [rbp - 0x98]
  68: mov r14, qword ptr [rbp - 0xa8]
  6f: mov r15, qword ptr [rbp - 0xb0]
  76: sub rsp, 0x10
  7a: mov qword ptr [rsp], rax
  7e: movabs rax, 0x204dd8
  88: mov qword ptr [rsp + 8], rax
  8d: pop rax
  8e: ret 
Transition: UnoptToOpt
src_rbp: 0x7ffc4b3f1200, reg_store: 0x7ffc4b3f1150, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(3, 8, []) dst: Register(14, 8, [])
Register2Register - src: Register(13, 8, []) dst: Register(15, 8, [])
ASM DUMP:
  0: movabs rbp, 0x7ffc4b3f1200
  a: movabs rsp, 0x7ffc4b3f1200
  14: sub rsp, 0x40
  1b: mov r14, qword ptr [rbp - 0x60]
  22: mov r15, qword ptr [rbp - 0xa0]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rbx, qword ptr [rbp - 0x60]
  3e: mov rdi, qword ptr [rbp - 0x68]
  45: mov rsi, qword ptr [rbp - 0x70]
  4c: mov r8, qword ptr [rbp - 0x78]
  53: mov r9, qword ptr [rbp - 0x80]
  5a: mov r10, qword ptr [rbp - 0x88]
  61: mov r11, qword ptr [rbp - 0x90]
  68: mov r12, qword ptr [rbp - 0x98]
  6f: mov r13, qword ptr [rbp - 0xa0]
  76: sub rsp, 0x10
  7a: mov qword ptr [rsp], rax
  7e: movabs rax, 0x2049c9
  88: mov qword ptr [rsp + 8], rax
  8d: pop rax
  8e: ret 
Transition: OptToUnopt
src_rbp: 0x7ffc4b3f1200, reg_store: 0x7ffc4b3f1150, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
@@ calling exec_trace
ASM DUMP:
  0: movabs rbp, 0x7ffc4b3f1200
  a: movabs rsp, 0x7ffc4b3f1200
  14: sub rsp, 0x40
  1b: mov rbx, qword ptr [rbp - 0xa8]
  22: mov r13, qword ptr [rbp - 0xb0]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rdi, qword ptr [rbp - 0x68]
  3e: mov rsi, qword ptr [rbp - 0x70]
  45: mov r8, qword ptr [rbp - 0x78]
  4c: mov r9, qword ptr [rbp - 0x80]
  53: mov r10, qword ptr [rbp - 0x88]
  5a: mov r11, qword ptr [rbp - 0x90]
  61: mov r12, qword ptr [rbp - 0x98]
  68: mov r14, qword ptr [rbp - 0xa8]
  6f: mov r15, qword ptr [rbp - 0xb0]
  76: movabs rdi, 0x7ffc4b3f1200
  80: movabs rsi, 0x7ffc4b3f11c0
  8a: movabs rdx, 0x7fbca3f0c000
  94: movabs rcx, 0x7fbca4796d20
  9e: call rcx
Transition: OptToUnopt
src_rbp: 0x7ffc4b3f1200, reg_store: 0x7ffc4b3f1150, src_frame_size: 0x40, dst_frame_size: 0x40, rbp_offset_reg_store: 0xb0
Register2Register - src: Register(14, 8, []) dst: Register(3, 8, [])
Register2Register - src: Register(15, 8, []) dst: Register(13, 8, [])
@@ calling exec_trace
ASM DUMP:
  0: movabs rbp, 0x7ffc4b3f1200
  a: movabs rsp, 0x7ffc4b3f1200
  14: sub rsp, 0x40
  1b: mov rbx, qword ptr [rbp - 0xa8]
  22: mov r13, qword ptr [rbp - 0xb0]
  29: mov rax, qword ptr [rbp - 0x50]
  30: mov rcx, qword ptr [rbp - 0x58]
  37: mov rdi, qword ptr [rbp - 0x68]
  3e: mov rsi, qword ptr [rbp - 0x70]
  45: mov r8, qword ptr [rbp - 0x78]
  4c: mov r9, qword ptr [rbp - 0x80]
  53: mov r10, qword ptr [rbp - 0x88]
  5a: mov r11, qword ptr [rbp - 0x90]
  61: mov r12, qword ptr [rbp - 0x98]
  68: mov r14, qword ptr [rbp - 0xa8]
  6f: mov r15, qword ptr [rbp - 0xb0]
  76: movabs rdi, 0x7ffc4b3f1200
  80: movabs rsi, 0x7ffc4b3f11c0
  8a: movabs rdx, 0x7fbca3f0c000
  94: movabs rcx, 0x7fbca4796d20
  9e: call rcx

failures:
    lang_tests::idempotent_outline.c

test result: [0m[31mFAILED[0m. 0 passed; 1 failed; 0 ignored; 0 measured; 150 filtered out

error: test failed, to rerun pass `-p tests --test c_tests`

Caused by:
  process didn't exit successfully: `/home/pd/git-repos/research/yk-fork/target/debug/deps/c_tests-a7df1e4d217569ba '::idempotent_outline.c' --nocapture` (exit status: 1)
